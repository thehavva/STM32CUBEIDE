
internal_ADCwithUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005c90  08005c90  00015c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ac  080060ac  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  080060ac  080060ac  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060ac  080060ac  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080060b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001fc  080062b0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080062b0  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006adc  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001789  00000000  00000000  00026d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00028490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  00028c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d3d  00000000  00000000  000293b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bb8  00000000  00000000  000410f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000860af  00000000  00000000  00049cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfd5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003078  00000000  00000000  000cfdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c78 	.word	0x08005c78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08005c78 	.word	0x08005c78

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fb12 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f862 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f918 	bl	8000d68 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b38:	f000 f8ae 	bl	8000c98 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b3c:	f000 f8ea 	bl	8000d14 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000b40:	4827      	ldr	r0, [pc, #156]	; (8000be0 <main+0xb8>)
 8000b42:	f000 fc65 	bl	8001410 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000b46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b4a:	4825      	ldr	r0, [pc, #148]	; (8000be0 <main+0xb8>)
 8000b4c:	f000 fd3a 	bl	80015c4 <HAL_ADC_PollForConversion>
	  data_ADC=HAL_ADC_GetValue(&hadc1);
 8000b50:	4823      	ldr	r0, [pc, #140]	; (8000be0 <main+0xb8>)
 8000b52:	f000 fe3d 	bl	80017d0 <HAL_ADC_GetValue>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <main+0xbc>)
 8000b5a:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000b5c:	4820      	ldr	r0, [pc, #128]	; (8000be0 <main+0xb8>)
 8000b5e:	f000 fd05 	bl	800156c <HAL_ADC_Stop>

	  Vadc = ((3.3) * data_ADC) / 4095;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <main+0xbc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fc3c 	bl	80003e4 <__aeabi_ui2d>
 8000b6c:	a318      	add	r3, pc, #96	; (adr r3, 8000bd0 <main+0xa8>)
 8000b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b72:	f7ff fcb1 	bl	80004d8 <__aeabi_dmul>
 8000b76:	4602      	mov	r2, r0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	a316      	add	r3, pc, #88	; (adr r3, 8000bd8 <main+0xb0>)
 8000b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b84:	f7ff fdd2 	bl	800072c <__aeabi_ddiv>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f7ff ff7a 	bl	8000a88 <__aeabi_d2f>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <main+0xc0>)
 8000b98:	6013      	str	r3, [r2, #0]
	  sprintf(data, "\f %f \r\n", Vadc);
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <main+0xc0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fc42 	bl	8000428 <__aeabi_f2d>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4910      	ldr	r1, [pc, #64]	; (8000bec <main+0xc4>)
 8000baa:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <main+0xc8>)
 8000bac:	f002 fdea 	bl	8003784 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) data, strlen(data), 1000);
 8000bb0:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <main+0xc8>)
 8000bb2:	f7ff facd 	bl	8000150 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <main+0xc8>)
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <main+0xcc>)
 8000bc2:	f001 ffe2 	bl	8002b8a <HAL_UART_Transmit>
	  HAL_Delay(250);
 8000bc6:	20fa      	movs	r0, #250	; 0xfa
 8000bc8:	f000 fb26 	bl	8001218 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000bcc:	e7b8      	b.n	8000b40 <main+0x18>
 8000bce:	bf00      	nop
 8000bd0:	66666666 	.word	0x66666666
 8000bd4:	400a6666 	.word	0x400a6666
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40affe00 	.word	0x40affe00
 8000be0:	20000220 	.word	0x20000220
 8000be4:	20000218 	.word	0x20000218
 8000be8:	2000021c 	.word	0x2000021c
 8000bec:	08005c90 	.word	0x08005c90
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000250 	.word	0x20000250

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	; 0x50
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 f954 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c30:	2310      	movs	r3, #16
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 f9c7 	bl	8001fd0 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c48:	f000 f8b0 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fc34 	bl	80024d4 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c72:	f000 f89b 	bl	8000dac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c76:	2302      	movs	r3, #2
 8000c78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fdbf 	bl	8002804 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c8c:	f000 f88e 	bl	8000dac <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3750      	adds	r7, #80	; 0x50
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <MX_ADC1_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cc2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cd6:	f000 fac3 	bl	8001260 <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 f864 	bl	8000dac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cf6:	f000 fd77 	bl	80017e8 <HAL_ADC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d00:	f000 f854 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000220 	.word	0x20000220
 8000d10:	40012400 	.word	0x40012400

08000d14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_USART1_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f001 fed0 	bl	8002af0 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f000 f829 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000250 	.word	0x20000250
 8000d64:	40013800 	.word	0x40013800

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_GPIO_Init+0x40>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <MX_GPIO_Init+0x40>)
 8000d74:	f043 0320 	orr.w	r3, r3, #32
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_GPIO_Init+0x40>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_GPIO_Init+0x40>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <MX_GPIO_Init+0x40>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <MX_GPIO_Init+0x40>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]

}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_MspInit+0x5c>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <HAL_MspInit+0x5c>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6193      	str	r3, [r2, #24]
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_MspInit+0x5c>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_MspInit+0x5c>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_MspInit+0x5c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_MspInit+0x5c>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_MspInit+0x60>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_MspInit+0x60>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000

08000e1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_ADC_MspInit+0x6c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d121      	bne.n	8000e80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_ADC_MspInit+0x70>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e70:	2303      	movs	r3, #3
 8000e72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_ADC_MspInit+0x74>)
 8000e7c:	f000 ff2c 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012400 	.word	0x40012400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_UART_MspInit+0x8c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d131      	bne.n	8000f18 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <HAL_UART_MspInit+0x94>)
 8000efa:	f000 feed 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <HAL_UART_MspInit+0x94>)
 8000f14:	f000 fee0 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010800 	.word	0x40010800

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f72:	f000 f935 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
	return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <_kill>:

int _kill(int pid, int sig)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f92:	f001 ff65 	bl	8002e60 <__errno>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2216      	movs	r2, #22
 8000f9a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_exit>:

void _exit (int status)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ffe7 	bl	8000f88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fba:	e7fe      	b.n	8000fba <_exit+0x12>

08000fbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00a      	b.n	8000fe4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fce:	f3af 8000 	nop.w
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	b2ca      	uxtb	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf0      	blt.n	8000fce <_read+0x12>
	}

return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e009      	b.n	800101c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf1      	blt.n	8001008 <_write+0x12>
	}
	return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_close>:

int _close(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001054:	605a      	str	r2, [r3, #4]
	return 0;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <_isatty>:

int _isatty(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
	return 1;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
	return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f001 fece 	bl	8002e60 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20002800 	.word	0x20002800
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000294 	.word	0x20000294
 80010f8:	200002b0 	.word	0x200002b0

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800112e:	f7ff ffe5 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f001 fe9b 	bl	8002e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001136:	f7ff fcf7 	bl	8000b28 <main>
  bx lr
 800113a:	4770      	bx	lr
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001144:	080060b4 	.word	0x080060b4
  ldr r2, =_sbss
 8001148:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800114c:	200002ac 	.word	0x200002ac

08001150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x28>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x28>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 fd83 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fe22 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fd8d 	bl	8001cbe <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 fd63 	bl	8001c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000020 	.word	0x20000020
 80011d8:	20000028 	.word	0x20000028
 80011dc:	20000024 	.word	0x20000024

080011e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_IncTick+0x1c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_IncTick+0x20>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a03      	ldr	r2, [pc, #12]	; (8001200 <HAL_IncTick+0x20>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000028 	.word	0x20000028
 8001200:	20000298 	.word	0x20000298

08001204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b02      	ldr	r3, [pc, #8]	; (8001214 <HAL_GetTick+0x10>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000298 	.word	0x20000298

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff fff0 	bl	8001204 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_Delay+0x44>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffe0 	bl	8001204 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000028 	.word	0x20000028

08001260 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0be      	b.n	8001400 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	2b00      	cmp	r3, #0
 800128e:	d109      	bne.n	80012a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fdbc 	bl	8000e1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fbf1 	bl	8001a8c <ADC_ConversionStop_Disable>
 80012aa:	4603      	mov	r3, r0
 80012ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 8099 	bne.w	80013ee <HAL_ADC_Init+0x18e>
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 8095 	bne.w	80013ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	f043 0202 	orr.w	r2, r3, #2
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f8:	d003      	beq.n	8001302 <HAL_ADC_Init+0xa2>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d102      	bne.n	8001308 <HAL_ADC_Init+0xa8>
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	e000      	b.n	800130a <HAL_ADC_Init+0xaa>
 8001308:	2300      	movs	r3, #0
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7d1b      	ldrb	r3, [r3, #20]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d119      	bne.n	800134c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7b1b      	ldrb	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d109      	bne.n	8001334 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	3b01      	subs	r3, #1
 8001326:	035a      	lsls	r2, r3, #13
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	e00b      	b.n	800134c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	f043 0220 	orr.w	r2, r3, #32
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	430a      	orrs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_ADC_Init+0x1a8>)
 8001368:	4013      	ands	r3, r2
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	430b      	orrs	r3, r1
 8001372:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800137c:	d003      	beq.n	8001386 <HAL_ADC_Init+0x126>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d104      	bne.n	8001390 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	3b01      	subs	r3, #1
 800138c:	051b      	lsls	r3, r3, #20
 800138e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_ADC_Init+0x1ac>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d10b      	bne.n	80013cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ca:	e018      	b.n	80013fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f023 0312 	bic.w	r3, r3, #18
 80013d4:	f043 0210 	orr.w	r2, r3, #16
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ec:	e007      	b.n	80013fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	f043 0210 	orr.w	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	ffe1f7fd 	.word	0xffe1f7fd
 800140c:	ff1f0efe 	.word	0xff1f0efe

08001410 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_ADC_Start+0x1a>
 8001426:	2302      	movs	r3, #2
 8001428:	e098      	b.n	800155c <HAL_ADC_Start+0x14c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fad0 	bl	80019d8 <ADC_Enable>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 8087 	bne.w	8001552 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a41      	ldr	r2, [pc, #260]	; (8001564 <HAL_ADC_Start+0x154>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d105      	bne.n	800146e <HAL_ADC_Start+0x5e>
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <HAL_ADC_Start+0x158>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d115      	bne.n	800149a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d026      	beq.n	80014d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001490:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001498:	e01d      	b.n	80014d6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <HAL_ADC_Start+0x158>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d004      	beq.n	80014ba <HAL_ADC_Start+0xaa>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <HAL_ADC_Start+0x154>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10d      	bne.n	80014d6 <HAL_ADC_Start+0xc6>
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_ADC_Start+0x158>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	f023 0206 	bic.w	r2, r3, #6
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ee:	e002      	b.n	80014f6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f06f 0202 	mvn.w	r2, #2
 8001506:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001512:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001516:	d113      	bne.n	8001540 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800151c:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_ADC_Start+0x154>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d105      	bne.n	800152e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_ADC_Start+0x158>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d108      	bne.n	8001540 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e00c      	b.n	800155a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e003      	b.n	800155a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40012800 	.word	0x40012800
 8001568:	40012400 	.word	0x40012400

0800156c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_ADC_Stop+0x1a>
 8001582:	2302      	movs	r3, #2
 8001584:	e01a      	b.n	80015bc <HAL_ADC_Stop+0x50>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fa7c 	bl	8001a8c <ADC_ConversionStop_Disable>
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015da:	f7ff fe13 	bl	8001204 <HAL_GetTick>
 80015de:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	f043 0220 	orr.w	r2, r3, #32
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0d3      	b.n	80017ae <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d131      	bne.n	8001678 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800161e:	2b00      	cmp	r3, #0
 8001620:	d12a      	bne.n	8001678 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001622:	e021      	b.n	8001668 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162a:	d01d      	beq.n	8001668 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_ADC_PollForConversion+0x7e>
 8001632:	f7ff fde7 	bl	8001204 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d212      	bcs.n	8001668 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10b      	bne.n	8001668 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f043 0204 	orr.w	r2, r3, #4
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0a2      	b.n	80017ae <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0d6      	beq.n	8001624 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001676:	e070      	b.n	800175a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001678:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <HAL_ADC_PollForConversion+0x1f4>)
 800167a:	681c      	ldr	r4, [r3, #0]
 800167c:	2002      	movs	r0, #2
 800167e:	f001 f977 	bl	8002970 <HAL_RCCEx_GetPeriphCLKFreq>
 8001682:	4603      	mov	r3, r0
 8001684:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_ADC_PollForConversion+0x1f8>)
 8001690:	400b      	ands	r3, r1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_ADC_PollForConversion+0x104>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68d9      	ldr	r1, [r3, #12]
 800169c:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <HAL_ADC_PollForConversion+0x1fc>)
 800169e:	400b      	ands	r3, r1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <HAL_ADC_PollForConversion+0x104>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6919      	ldr	r1, [r3, #16]
 80016aa:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_ADC_PollForConversion+0x200>)
 80016ac:	400b      	ands	r3, r1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <HAL_ADC_PollForConversion+0x100>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68d9      	ldr	r1, [r3, #12]
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_ADC_PollForConversion+0x204>)
 80016ba:	400b      	ands	r3, r1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_PollForConversion+0x100>
 80016c0:	2314      	movs	r3, #20
 80016c2:	e020      	b.n	8001706 <HAL_ADC_PollForConversion+0x142>
 80016c4:	2329      	movs	r3, #41	; 0x29
 80016c6:	e01e      	b.n	8001706 <HAL_ADC_PollForConversion+0x142>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6919      	ldr	r1, [r3, #16]
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_ADC_PollForConversion+0x200>)
 80016d0:	400b      	ands	r3, r1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_ADC_PollForConversion+0x120>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68d9      	ldr	r1, [r3, #12]
 80016dc:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_ADC_PollForConversion+0x204>)
 80016de:	400b      	ands	r3, r1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00d      	beq.n	8001700 <HAL_ADC_PollForConversion+0x13c>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6919      	ldr	r1, [r3, #16]
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_ADC_PollForConversion+0x208>)
 80016ec:	400b      	ands	r3, r1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <HAL_ADC_PollForConversion+0x140>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68d9      	ldr	r1, [r3, #12]
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <HAL_ADC_PollForConversion+0x208>)
 80016fa:	400b      	ands	r3, r1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_ADC_PollForConversion+0x140>
 8001700:	2354      	movs	r3, #84	; 0x54
 8001702:	e000      	b.n	8001706 <HAL_ADC_PollForConversion+0x142>
 8001704:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800170c:	e021      	b.n	8001752 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d01a      	beq.n	800174c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d007      	beq.n	800172c <HAL_ADC_PollForConversion+0x168>
 800171c:	f7ff fd72 	bl	8001204 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d20f      	bcs.n	800174c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d90b      	bls.n	800174c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	f043 0204 	orr.w	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e030      	b.n	80017ae <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3301      	adds	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	429a      	cmp	r2, r3
 8001758:	d8d9      	bhi.n	800170e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f06f 0212 	mvn.w	r2, #18
 8001762:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800177a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800177e:	d115      	bne.n	80017ac <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001784:	2b00      	cmp	r3, #0
 8001786:	d111      	bne.n	80017ac <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000020 	.word	0x20000020
 80017bc:	24924924 	.word	0x24924924
 80017c0:	00924924 	.word	0x00924924
 80017c4:	12492492 	.word	0x12492492
 80017c8:	00492492 	.word	0x00492492
 80017cc:	00249249 	.word	0x00249249

080017d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x20>
 8001804:	2302      	movs	r3, #2
 8001806:	e0dc      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x1da>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b06      	cmp	r3, #6
 8001816:	d81c      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b05      	subs	r3, #5
 800182a:	221f      	movs	r2, #31
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b05      	subs	r3, #5
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
 8001850:	e03c      	b.n	80018cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d81c      	bhi.n	8001894 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	3b23      	subs	r3, #35	; 0x23
 800186c:	221f      	movs	r2, #31
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	4019      	ands	r1, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b23      	subs	r3, #35	; 0x23
 8001886:	fa00 f203 	lsl.w	r2, r0, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
 8001892:	e01b      	b.n	80018cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b41      	subs	r3, #65	; 0x41
 80018a6:	221f      	movs	r2, #31
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4019      	ands	r1, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	3b41      	subs	r3, #65	; 0x41
 80018c0:	fa00 f203 	lsl.w	r2, r0, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	d91c      	bls.n	800190e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68d9      	ldr	r1, [r3, #12]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	3b1e      	subs	r3, #30
 80018e6:	2207      	movs	r2, #7
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4019      	ands	r1, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6898      	ldr	r0, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	3b1e      	subs	r3, #30
 8001900:	fa00 f203 	lsl.w	r2, r0, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	e019      	b.n	8001942 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6919      	ldr	r1, [r3, #16]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	2207      	movs	r2, #7
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4019      	ands	r1, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6898      	ldr	r0, [r3, #8]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	fa00 f203 	lsl.w	r2, r0, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d003      	beq.n	8001952 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800194e:	2b11      	cmp	r3, #17
 8001950:	d132      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d125      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d126      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001978:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b10      	cmp	r3, #16
 8001980:	d11a      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	0c9a      	lsrs	r2, r3, #18
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001998:	e002      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3b01      	subs	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <HAL_ADC_ConfigChannel+0x1b2>
 80019a6:	e007      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	f043 0220 	orr.w	r2, r3, #32
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40012400 	.word	0x40012400
 80019d0:	20000020 	.word	0x20000020
 80019d4:	431bde83 	.word	0x431bde83

080019d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d040      	beq.n	8001a78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <ADC_Enable+0xac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <ADC_Enable+0xb0>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0c9b      	lsrs	r3, r3, #18
 8001a12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a14:	e002      	b.n	8001a1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a22:	f7ff fbef 	bl	8001204 <HAL_GetTick>
 8001a26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a28:	e01f      	b.n	8001a6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a2a:	f7ff fbeb 	bl	8001204 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d918      	bls.n	8001a6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d011      	beq.n	8001a6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f043 0210 	orr.w	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e007      	b.n	8001a7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d1d8      	bne.n	8001a2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000020 	.word	0x20000020
 8001a88:	431bde83 	.word	0x431bde83

08001a8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12e      	bne.n	8001b04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ab6:	f7ff fba5 	bl	8001204 <HAL_GetTick>
 8001aba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001abc:	e01b      	b.n	8001af6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001abe:	f7ff fba1 	bl	8001204 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d914      	bls.n	8001af6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10d      	bne.n	8001af6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f043 0210 	orr.w	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e007      	b.n	8001b06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d0dc      	beq.n	8001abe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff90 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff49 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff5e 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff90 	bl	8001bc8 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5f 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffb0 	bl	8001c2c <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b08b      	sub	sp, #44	; 0x2c
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e161      	b.n	8001fb0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cec:	2201      	movs	r2, #1
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	f040 8150 	bne.w	8001faa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4a97      	ldr	r2, [pc, #604]	; (8001f6c <HAL_GPIO_Init+0x294>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d05e      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d14:	4a95      	ldr	r2, [pc, #596]	; (8001f6c <HAL_GPIO_Init+0x294>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d875      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d1a:	4a95      	ldr	r2, [pc, #596]	; (8001f70 <HAL_GPIO_Init+0x298>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d058      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d20:	4a93      	ldr	r2, [pc, #588]	; (8001f70 <HAL_GPIO_Init+0x298>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d86f      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d26:	4a93      	ldr	r2, [pc, #588]	; (8001f74 <HAL_GPIO_Init+0x29c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d052      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d2c:	4a91      	ldr	r2, [pc, #580]	; (8001f74 <HAL_GPIO_Init+0x29c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d869      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d32:	4a91      	ldr	r2, [pc, #580]	; (8001f78 <HAL_GPIO_Init+0x2a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04c      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d38:	4a8f      	ldr	r2, [pc, #572]	; (8001f78 <HAL_GPIO_Init+0x2a0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d863      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d3e:	4a8f      	ldr	r2, [pc, #572]	; (8001f7c <HAL_GPIO_Init+0x2a4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d046      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d44:	4a8d      	ldr	r2, [pc, #564]	; (8001f7c <HAL_GPIO_Init+0x2a4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d85d      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d4a:	2b12      	cmp	r3, #18
 8001d4c:	d82a      	bhi.n	8001da4 <HAL_GPIO_Init+0xcc>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d859      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d52:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <HAL_GPIO_Init+0x80>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001dd3 	.word	0x08001dd3
 8001d5c:	08001dad 	.word	0x08001dad
 8001d60:	08001dbf 	.word	0x08001dbf
 8001d64:	08001e01 	.word	0x08001e01
 8001d68:	08001e07 	.word	0x08001e07
 8001d6c:	08001e07 	.word	0x08001e07
 8001d70:	08001e07 	.word	0x08001e07
 8001d74:	08001e07 	.word	0x08001e07
 8001d78:	08001e07 	.word	0x08001e07
 8001d7c:	08001e07 	.word	0x08001e07
 8001d80:	08001e07 	.word	0x08001e07
 8001d84:	08001e07 	.word	0x08001e07
 8001d88:	08001e07 	.word	0x08001e07
 8001d8c:	08001e07 	.word	0x08001e07
 8001d90:	08001e07 	.word	0x08001e07
 8001d94:	08001e07 	.word	0x08001e07
 8001d98:	08001e07 	.word	0x08001e07
 8001d9c:	08001db5 	.word	0x08001db5
 8001da0:	08001dc9 	.word	0x08001dc9
 8001da4:	4a76      	ldr	r2, [pc, #472]	; (8001f80 <HAL_GPIO_Init+0x2a8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001daa:	e02c      	b.n	8001e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e029      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	3304      	adds	r3, #4
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e024      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e01f      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	330c      	adds	r3, #12
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e01a      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e013      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de8:	2308      	movs	r3, #8
 8001dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	611a      	str	r2, [r3, #16]
          break;
 8001df2:	e009      	b.n	8001e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df4:	2308      	movs	r3, #8
 8001df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	615a      	str	r2, [r3, #20]
          break;
 8001dfe:	e003      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
          break;
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          break;
 8001e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2bff      	cmp	r3, #255	; 0xff
 8001e0c:	d801      	bhi.n	8001e12 <HAL_GPIO_Init+0x13a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_Init+0x13e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d802      	bhi.n	8001e24 <HAL_GPIO_Init+0x14c>
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	e002      	b.n	8001e2a <HAL_GPIO_Init+0x152>
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	3b08      	subs	r3, #8
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	210f      	movs	r1, #15
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	6a39      	ldr	r1, [r7, #32]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80a9 	beq.w	8001faa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e58:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_GPIO_Init+0x2ac>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a49      	ldr	r2, [pc, #292]	; (8001f84 <HAL_GPIO_Init+0x2ac>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_GPIO_Init+0x2ac>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e70:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <HAL_GPIO_Init+0x2b0>)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <HAL_GPIO_Init+0x2b4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_GPIO_Init+0x1e0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <HAL_GPIO_Init+0x2b8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <HAL_GPIO_Init+0x1dc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <HAL_GPIO_Init+0x2bc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d101      	bne.n	8001eb0 <HAL_GPIO_Init+0x1d8>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e004      	b.n	8001eba <HAL_GPIO_Init+0x1e2>
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x1e2>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_GPIO_Init+0x1e2>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4093      	lsls	r3, r2
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eca:	492f      	ldr	r1, [pc, #188]	; (8001f88 <HAL_GPIO_Init+0x2b0>)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	492b      	ldr	r1, [pc, #172]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ef2:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4927      	ldr	r1, [pc, #156]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4921      	ldr	r1, [pc, #132]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	491d      	ldr	r1, [pc, #116]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4917      	ldr	r1, [pc, #92]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4913      	ldr	r1, [pc, #76]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01f      	beq.n	8001f9c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	490d      	ldr	r1, [pc, #52]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e01f      	b.n	8001faa <HAL_GPIO_Init+0x2d2>
 8001f6a:	bf00      	nop
 8001f6c:	10320000 	.word	0x10320000
 8001f70:	10310000 	.word	0x10310000
 8001f74:	10220000 	.word	0x10220000
 8001f78:	10210000 	.word	0x10210000
 8001f7c:	10120000 	.word	0x10120000
 8001f80:	10110000 	.word	0x10110000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40010800 	.word	0x40010800
 8001f90:	40010c00 	.word	0x40010c00
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_GPIO_Init+0x2f4>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4909      	ldr	r1, [pc, #36]	; (8001fcc <HAL_GPIO_Init+0x2f4>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	3301      	adds	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f47f ae96 	bne.w	8001cec <HAL_GPIO_Init+0x14>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	372c      	adds	r7, #44	; 0x2c
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e272      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff0:	4b92      	ldr	r3, [pc, #584]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d00c      	beq.n	8002016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ffc:	4b8f      	ldr	r3, [pc, #572]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d112      	bne.n	800202e <HAL_RCC_OscConfig+0x5e>
 8002008:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d10b      	bne.n	800202e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002016:	4b89      	ldr	r3, [pc, #548]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d06c      	beq.n	80020fc <HAL_RCC_OscConfig+0x12c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d168      	bne.n	80020fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e24c      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x76>
 8002038:	4b80      	ldr	r3, [pc, #512]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a7f      	ldr	r2, [pc, #508]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x98>
 800204e:	4b7b      	ldr	r3, [pc, #492]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7a      	ldr	r2, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b78      	ldr	r3, [pc, #480]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a77      	ldr	r2, [pc, #476]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0xbc>
 8002072:	4b72      	ldr	r3, [pc, #456]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a71      	ldr	r2, [pc, #452]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6e      	ldr	r2, [pc, #440]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0xd4>
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6a      	ldr	r2, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a67      	ldr	r2, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f8aa 	bl	8001204 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff f8a6 	bl	8001204 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e200      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe4>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff f896 	bl	8001204 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff f892 	bl	8001204 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1ec      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x10c>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210a:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b08      	cmp	r3, #8
 8002120:	d11c      	bne.n	800215c <HAL_RCC_OscConfig+0x18c>
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e1c0      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4939      	ldr	r1, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	e03a      	b.n	80021d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff f84b 	bl	8001204 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff f847 	bl	8001204 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1a1      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4927      	ldr	r1, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff f82a 	bl	8001204 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff f826 	bl	8001204 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e180      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d03a      	beq.n	8002254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d019      	beq.n	800221a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7ff f80a 	bl	8001204 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f4:	f7ff f806 	bl	8001204 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e160      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_RCC_OscConfig+0x26c>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002212:	2001      	movs	r0, #1
 8002214:	f000 fad8 	bl	80027c8 <RCC_Delay>
 8002218:	e01c      	b.n	8002254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7fe fff0 	bl	8001204 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002226:	e00f      	b.n	8002248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7fe ffec 	bl	8001204 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d908      	bls.n	8002248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e146      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	42420000 	.word	0x42420000
 8002244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b92      	ldr	r3, [pc, #584]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e9      	bne.n	8002228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a6 	beq.w	80023ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b8b      	ldr	r3, [pc, #556]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4b88      	ldr	r3, [pc, #544]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a87      	ldr	r2, [pc, #540]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b85      	ldr	r3, [pc, #532]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228a:	2301      	movs	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b82      	ldr	r3, [pc, #520]	; (8002498 <HAL_RCC_OscConfig+0x4c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <HAL_RCC_OscConfig+0x4c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7e      	ldr	r2, [pc, #504]	; (8002498 <HAL_RCC_OscConfig+0x4c8>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7fe ffad 	bl	8001204 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ae:	f7fe ffa9 	bl	8001204 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b64      	cmp	r3, #100	; 0x64
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e103      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x4c8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x312>
 80022d4:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	e02d      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x334>
 80022ea:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a69      	ldr	r2, [pc, #420]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b67      	ldr	r3, [pc, #412]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a66      	ldr	r2, [pc, #408]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
 8002302:	e01c      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0x356>
 800230c:	4b61      	ldr	r3, [pc, #388]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a60      	ldr	r2, [pc, #384]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	4b5e      	ldr	r3, [pc, #376]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a5d      	ldr	r2, [pc, #372]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0x36e>
 8002326:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a5a      	ldr	r2, [pc, #360]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	4b58      	ldr	r3, [pc, #352]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a57      	ldr	r2, [pc, #348]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d015      	beq.n	8002372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe ff5d 	bl	8001204 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe ff59 	bl	8001204 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0b1      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ee      	beq.n	800234e <HAL_RCC_OscConfig+0x37e>
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7fe ff47 	bl	8001204 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7fe ff43 	bl	8001204 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e09b      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	4b40      	ldr	r3, [pc, #256]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800239c:	7dfb      	ldrb	r3, [r7, #23]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a3b      	ldr	r2, [pc, #236]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 8087 	beq.w	80024c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d061      	beq.n	8002488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d146      	bne.n	800245a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7fe ff17 	bl	8001204 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe ff13 	bl	8001204 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e06d      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4921      	ldr	r1, [pc, #132]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a19      	ldr	r1, [r3, #32]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	430b      	orrs	r3, r1
 8002426:	491b      	ldr	r1, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fee7 	bl	8001204 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fee3 	bl	8001204 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e03d      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x46a>
 8002458:	e035      	b.n	80024c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCC_OscConfig+0x4cc>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe fed0 	bl	8001204 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fecc 	bl	8001204 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e026      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x498>
 8002486:	e01e      	b.n	80024c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e019      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
 8002494:	40021000 	.word	0x40021000
 8002498:	40007000 	.word	0x40007000
 800249c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x500>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d0      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d910      	bls.n	8002518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	4965      	ldr	r1, [pc, #404]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b8      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800253a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	494d      	ldr	r1, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d040      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d115      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07f      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e073      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06b      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4936      	ldr	r1, [pc, #216]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c4:	f7fe fe1e 	bl	8001204 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7fe fe1a 	bl	8001204 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e053      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d210      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4922      	ldr	r1, [pc, #136]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e032      	b.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4916      	ldr	r1, [pc, #88]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002662:	f000 f821 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002666:	4602      	mov	r2, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	5ccb      	ldrb	r3, [r1, r3]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1cc>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fd7c 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40022000 	.word	0x40022000
 8002698:	40021000 	.word	0x40021000
 800269c:	08005cb8 	.word	0x08005cb8
 80026a0:	20000020 	.word	0x20000020
 80026a4:	20000024 	.word	0x20000024

080026a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	b490      	push	{r4, r7}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_RCC_GetSysClockFreq+0xac>)
 80026b0:	1d3c      	adds	r4, r7, #4
 80026b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026b8:	f240 2301 	movw	r3, #513	; 0x201
 80026bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d002      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x40>
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d003      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x46>
 80026e6:	e02b      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ea:	623b      	str	r3, [r7, #32]
      break;
 80026ec:	e02b      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	0c9b      	lsrs	r3, r3, #18
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3328      	adds	r3, #40	; 0x28
 80026f8:	443b      	add	r3, r7
 80026fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d012      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb0>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0c5b      	lsrs	r3, r3, #17
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	3328      	adds	r3, #40	; 0x28
 8002716:	443b      	add	r3, r7
 8002718:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800271c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002722:	fb03 f202 	mul.w	r2, r3, r2
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	e004      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	623b      	str	r3, [r7, #32]
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	6a3b      	ldr	r3, [r7, #32]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc90      	pop	{r4, r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	08005c98 	.word	0x08005c98
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	003d0900 	.word	0x003d0900

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <HAL_RCC_GetHCLKFreq+0x10>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000020 	.word	0x20000020

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff2 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	08005cc8 	.word	0x08005cc8

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027a4:	f7ff ffde 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08005cc8 	.word	0x08005cc8

080027c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <RCC_Delay+0x34>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <RCC_Delay+0x38>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0a5b      	lsrs	r3, r3, #9
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e4:	bf00      	nop
  }
  while (Delay --);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	60fa      	str	r2, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f9      	bne.n	80027e4 <RCC_Delay+0x1c>
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	20000020 	.word	0x20000020
 8002800:	10624dd3 	.word	0x10624dd3

08002804 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d07d      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002824:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	4a4b      	ldr	r2, [pc, #300]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283a:	61d3      	str	r3, [r2, #28]
 800283c:	4b49      	ldr	r3, [pc, #292]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002848:	2301      	movs	r3, #1
 800284a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b46      	ldr	r3, [pc, #280]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d118      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a42      	ldr	r2, [pc, #264]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002864:	f7fe fcce 	bl	8001204 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	e008      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286c:	f7fe fcca 	bl	8001204 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e06d      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d02e      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d027      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028b2:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028b8:	4b2c      	ldr	r3, [pc, #176]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028be:	4a29      	ldr	r2, [pc, #164]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d014      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe fc99 	bl	8001204 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fc95 	bl	8001204 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e036      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ee      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4917      	ldr	r1, [pc, #92]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	4313      	orrs	r3, r2
 8002908:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800290a:	7dfb      	ldrb	r3, [r7, #23]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	490b      	ldr	r1, [pc, #44]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4904      	ldr	r1, [pc, #16]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
 800296c:	42420440 	.word	0x42420440

08002970 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b08d      	sub	sp, #52	; 0x34
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002978:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800297a:	f107 040c 	add.w	r4, r7, #12
 800297e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002984:	f240 2301 	movw	r3, #513	; 0x201
 8002988:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	f200 808e 	bhi.w	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d049      	beq.n	8002a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d079      	beq.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80029b8:	e086      	b.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80029c0:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d07f      	beq.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	0c9b      	lsrs	r3, r3, #18
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	3330      	adds	r3, #48	; 0x30
 80029d6:	443b      	add	r3, r7
 80029d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029dc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d017      	beq.n	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	0c5b      	lsrs	r3, r3, #17
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	3330      	adds	r3, #48	; 0x30
 80029f4:	443b      	add	r3, r7
 80029f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a06:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	fb02 f303 	mul.w	r3, r2, r3
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a16:	e004      	b.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a22:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2e:	d102      	bne.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a34:	e04a      	b.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a44:	e042      	b.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002a46:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a56:	d108      	bne.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a68:	e01f      	b.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a74:	d109      	bne.n	8002a8a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002a82:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	e00f      	b.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002aa2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002aa8:	e012      	b.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002aaa:	e011      	b.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002aac:	f7ff fe78 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	0b9b      	lsrs	r3, r3, #14
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	3301      	adds	r3, #1
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ac6:	e004      	b.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002ac8:	bf00      	nop
 8002aca:	e002      	b.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002ad0:	bf00      	nop
    }
  }
  return (frequency);
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3734      	adds	r7, #52	; 0x34
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	08005ca8 	.word	0x08005ca8
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	007a1200 	.word	0x007a1200
 8002ae8:	003d0900 	.word	0x003d0900
 8002aec:	aaaaaaab 	.word	0xaaaaaaab

08002af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e03f      	b.n	8002b82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f9bc 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	; 0x24
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f905 	bl	8002d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b08a      	sub	sp, #40	; 0x28
 8002b8e:	af02      	add	r7, sp, #8
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d17c      	bne.n	8002ca4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_UART_Transmit+0x2c>
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e075      	b.n	8002ca6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_UART_Transmit+0x3e>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e06e      	b.n	8002ca6 <HAL_UART_Transmit+0x11c>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2221      	movs	r2, #33	; 0x21
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bde:	f7fe fb11 	bl	8001204 <HAL_GetTick>
 8002be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	88fa      	ldrh	r2, [r7, #6]
 8002be8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	88fa      	ldrh	r2, [r7, #6]
 8002bee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf8:	d108      	bne.n	8002c0c <HAL_UART_Transmit+0x82>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d104      	bne.n	8002c0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e003      	b.n	8002c14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c1c:	e02a      	b.n	8002c74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f840 	bl	8002cae <UART_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e036      	b.n	8002ca6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10b      	bne.n	8002c56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	3302      	adds	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e007      	b.n	8002c66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	3301      	adds	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1cf      	bne.n	8002c1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	2140      	movs	r1, #64	; 0x40
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f810 	bl	8002cae <UART_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e006      	b.n	8002ca6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	e02c      	b.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	d028      	beq.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0x30>
 8002cce:	f7fe fa99 	bl	8001204 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d21d      	bcs.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e00f      	b.n	8002d3a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d0c3      	beq.n	8002cc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d7e:	f023 030c 	bic.w	r3, r3, #12
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2c      	ldr	r2, [pc, #176]	; (8002e58 <UART_SetConfig+0x114>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d103      	bne.n	8002db4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dac:	f7ff fcf8 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	e002      	b.n	8002dba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002db4:	f7ff fce0 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8002db8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009a      	lsls	r2, r3, #2
 8002dc4:	441a      	add	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <UART_SetConfig+0x118>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	0119      	lsls	r1, r3, #4
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009a      	lsls	r2, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <UART_SetConfig+0x118>)
 8002df2:	fba3 0302 	umull	r0, r3, r3, r2
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2064      	movs	r0, #100	; 0x64
 8002dfa:	fb00 f303 	mul.w	r3, r0, r3
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	3332      	adds	r3, #50	; 0x32
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <UART_SetConfig+0x118>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e10:	4419      	add	r1, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009a      	lsls	r2, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <UART_SetConfig+0x118>)
 8002e2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2064      	movs	r0, #100	; 0x64
 8002e32:	fb00 f303 	mul.w	r3, r0, r3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	3332      	adds	r3, #50	; 0x32
 8002e3c:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <UART_SetConfig+0x118>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	440a      	add	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40013800 	.word	0x40013800
 8002e5c:	51eb851f 	.word	0x51eb851f

08002e60 <__errno>:
 8002e60:	4b01      	ldr	r3, [pc, #4]	; (8002e68 <__errno+0x8>)
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2000002c 	.word	0x2000002c

08002e6c <__libc_init_array>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	2600      	movs	r6, #0
 8002e70:	4d0c      	ldr	r5, [pc, #48]	; (8002ea4 <__libc_init_array+0x38>)
 8002e72:	4c0d      	ldr	r4, [pc, #52]	; (8002ea8 <__libc_init_array+0x3c>)
 8002e74:	1b64      	subs	r4, r4, r5
 8002e76:	10a4      	asrs	r4, r4, #2
 8002e78:	42a6      	cmp	r6, r4
 8002e7a:	d109      	bne.n	8002e90 <__libc_init_array+0x24>
 8002e7c:	f002 fefc 	bl	8005c78 <_init>
 8002e80:	2600      	movs	r6, #0
 8002e82:	4d0a      	ldr	r5, [pc, #40]	; (8002eac <__libc_init_array+0x40>)
 8002e84:	4c0a      	ldr	r4, [pc, #40]	; (8002eb0 <__libc_init_array+0x44>)
 8002e86:	1b64      	subs	r4, r4, r5
 8002e88:	10a4      	asrs	r4, r4, #2
 8002e8a:	42a6      	cmp	r6, r4
 8002e8c:	d105      	bne.n	8002e9a <__libc_init_array+0x2e>
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e94:	4798      	blx	r3
 8002e96:	3601      	adds	r6, #1
 8002e98:	e7ee      	b.n	8002e78 <__libc_init_array+0xc>
 8002e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9e:	4798      	blx	r3
 8002ea0:	3601      	adds	r6, #1
 8002ea2:	e7f2      	b.n	8002e8a <__libc_init_array+0x1e>
 8002ea4:	080060ac 	.word	0x080060ac
 8002ea8:	080060ac 	.word	0x080060ac
 8002eac:	080060ac 	.word	0x080060ac
 8002eb0:	080060b0 	.word	0x080060b0

08002eb4 <memset>:
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4402      	add	r2, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <__cvt>:
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eca:	461f      	mov	r7, r3
 8002ecc:	bfbb      	ittet	lt
 8002ece:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002ed2:	461f      	movlt	r7, r3
 8002ed4:	2300      	movge	r3, #0
 8002ed6:	232d      	movlt	r3, #45	; 0x2d
 8002ed8:	b088      	sub	sp, #32
 8002eda:	4614      	mov	r4, r2
 8002edc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ede:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002ee0:	7013      	strb	r3, [r2, #0]
 8002ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ee4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002ee8:	f023 0820 	bic.w	r8, r3, #32
 8002eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ef0:	d005      	beq.n	8002efe <__cvt+0x3a>
 8002ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ef6:	d100      	bne.n	8002efa <__cvt+0x36>
 8002ef8:	3501      	adds	r5, #1
 8002efa:	2302      	movs	r3, #2
 8002efc:	e000      	b.n	8002f00 <__cvt+0x3c>
 8002efe:	2303      	movs	r3, #3
 8002f00:	aa07      	add	r2, sp, #28
 8002f02:	9204      	str	r2, [sp, #16]
 8002f04:	aa06      	add	r2, sp, #24
 8002f06:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002f0a:	e9cd 3500 	strd	r3, r5, [sp]
 8002f0e:	4622      	mov	r2, r4
 8002f10:	463b      	mov	r3, r7
 8002f12:	f000 fce5 	bl	80038e0 <_dtoa_r>
 8002f16:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f1a:	4606      	mov	r6, r0
 8002f1c:	d102      	bne.n	8002f24 <__cvt+0x60>
 8002f1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f20:	07db      	lsls	r3, r3, #31
 8002f22:	d522      	bpl.n	8002f6a <__cvt+0xa6>
 8002f24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f28:	eb06 0905 	add.w	r9, r6, r5
 8002f2c:	d110      	bne.n	8002f50 <__cvt+0x8c>
 8002f2e:	7833      	ldrb	r3, [r6, #0]
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d10a      	bne.n	8002f4a <__cvt+0x86>
 8002f34:	2200      	movs	r2, #0
 8002f36:	2300      	movs	r3, #0
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4639      	mov	r1, r7
 8002f3c:	f7fd fd34 	bl	80009a8 <__aeabi_dcmpeq>
 8002f40:	b918      	cbnz	r0, 8002f4a <__cvt+0x86>
 8002f42:	f1c5 0501 	rsb	r5, r5, #1
 8002f46:	f8ca 5000 	str.w	r5, [sl]
 8002f4a:	f8da 3000 	ldr.w	r3, [sl]
 8002f4e:	4499      	add	r9, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	2300      	movs	r3, #0
 8002f54:	4620      	mov	r0, r4
 8002f56:	4639      	mov	r1, r7
 8002f58:	f7fd fd26 	bl	80009a8 <__aeabi_dcmpeq>
 8002f5c:	b108      	cbz	r0, 8002f62 <__cvt+0x9e>
 8002f5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f62:	2230      	movs	r2, #48	; 0x30
 8002f64:	9b07      	ldr	r3, [sp, #28]
 8002f66:	454b      	cmp	r3, r9
 8002f68:	d307      	bcc.n	8002f7a <__cvt+0xb6>
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	9b07      	ldr	r3, [sp, #28]
 8002f6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f70:	1b9b      	subs	r3, r3, r6
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	b008      	add	sp, #32
 8002f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	9107      	str	r1, [sp, #28]
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e7f0      	b.n	8002f64 <__cvt+0xa0>

08002f82 <__exponent>:
 8002f82:	4603      	mov	r3, r0
 8002f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f86:	2900      	cmp	r1, #0
 8002f88:	f803 2b02 	strb.w	r2, [r3], #2
 8002f8c:	bfb6      	itet	lt
 8002f8e:	222d      	movlt	r2, #45	; 0x2d
 8002f90:	222b      	movge	r2, #43	; 0x2b
 8002f92:	4249      	neglt	r1, r1
 8002f94:	2909      	cmp	r1, #9
 8002f96:	7042      	strb	r2, [r0, #1]
 8002f98:	dd2b      	ble.n	8002ff2 <__exponent+0x70>
 8002f9a:	f10d 0407 	add.w	r4, sp, #7
 8002f9e:	46a4      	mov	ip, r4
 8002fa0:	270a      	movs	r7, #10
 8002fa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	46a6      	mov	lr, r4
 8002faa:	fb07 1516 	mls	r5, r7, r6, r1
 8002fae:	2a63      	cmp	r2, #99	; 0x63
 8002fb0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8002fba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002fbe:	dcf0      	bgt.n	8002fa2 <__exponent+0x20>
 8002fc0:	3130      	adds	r1, #48	; 0x30
 8002fc2:	f1ae 0502 	sub.w	r5, lr, #2
 8002fc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	1c44      	adds	r4, r0, #1
 8002fce:	4561      	cmp	r1, ip
 8002fd0:	d30a      	bcc.n	8002fe8 <__exponent+0x66>
 8002fd2:	f10d 0209 	add.w	r2, sp, #9
 8002fd6:	eba2 020e 	sub.w	r2, r2, lr
 8002fda:	4565      	cmp	r5, ip
 8002fdc:	bf88      	it	hi
 8002fde:	2200      	movhi	r2, #0
 8002fe0:	4413      	add	r3, r2
 8002fe2:	1a18      	subs	r0, r3, r0
 8002fe4:	b003      	add	sp, #12
 8002fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fec:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002ff0:	e7ed      	b.n	8002fce <__exponent+0x4c>
 8002ff2:	2330      	movs	r3, #48	; 0x30
 8002ff4:	3130      	adds	r1, #48	; 0x30
 8002ff6:	7083      	strb	r3, [r0, #2]
 8002ff8:	70c1      	strb	r1, [r0, #3]
 8002ffa:	1d03      	adds	r3, r0, #4
 8002ffc:	e7f1      	b.n	8002fe2 <__exponent+0x60>
	...

08003000 <_printf_float>:
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	b091      	sub	sp, #68	; 0x44
 8003006:	460c      	mov	r4, r1
 8003008:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800300c:	4616      	mov	r6, r2
 800300e:	461f      	mov	r7, r3
 8003010:	4605      	mov	r5, r0
 8003012:	f001 fa53 	bl	80044bc <_localeconv_r>
 8003016:	6803      	ldr	r3, [r0, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	9309      	str	r3, [sp, #36]	; 0x24
 800301c:	f7fd f898 	bl	8000150 <strlen>
 8003020:	2300      	movs	r3, #0
 8003022:	930e      	str	r3, [sp, #56]	; 0x38
 8003024:	f8d8 3000 	ldr.w	r3, [r8]
 8003028:	900a      	str	r0, [sp, #40]	; 0x28
 800302a:	3307      	adds	r3, #7
 800302c:	f023 0307 	bic.w	r3, r3, #7
 8003030:	f103 0208 	add.w	r2, r3, #8
 8003034:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003038:	f8d4 b000 	ldr.w	fp, [r4]
 800303c:	f8c8 2000 	str.w	r2, [r8]
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003048:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800304c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003050:	930b      	str	r3, [sp, #44]	; 0x2c
 8003052:	f04f 32ff 	mov.w	r2, #4294967295
 8003056:	4640      	mov	r0, r8
 8003058:	4b9c      	ldr	r3, [pc, #624]	; (80032cc <_printf_float+0x2cc>)
 800305a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800305c:	f7fd fcd6 	bl	8000a0c <__aeabi_dcmpun>
 8003060:	bb70      	cbnz	r0, 80030c0 <_printf_float+0xc0>
 8003062:	f04f 32ff 	mov.w	r2, #4294967295
 8003066:	4640      	mov	r0, r8
 8003068:	4b98      	ldr	r3, [pc, #608]	; (80032cc <_printf_float+0x2cc>)
 800306a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800306c:	f7fd fcb0 	bl	80009d0 <__aeabi_dcmple>
 8003070:	bb30      	cbnz	r0, 80030c0 <_printf_float+0xc0>
 8003072:	2200      	movs	r2, #0
 8003074:	2300      	movs	r3, #0
 8003076:	4640      	mov	r0, r8
 8003078:	4651      	mov	r1, sl
 800307a:	f7fd fc9f 	bl	80009bc <__aeabi_dcmplt>
 800307e:	b110      	cbz	r0, 8003086 <_printf_float+0x86>
 8003080:	232d      	movs	r3, #45	; 0x2d
 8003082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003086:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <_printf_float+0x2d0>)
 8003088:	4892      	ldr	r0, [pc, #584]	; (80032d4 <_printf_float+0x2d4>)
 800308a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800308e:	bf94      	ite	ls
 8003090:	4698      	movls	r8, r3
 8003092:	4680      	movhi	r8, r0
 8003094:	2303      	movs	r3, #3
 8003096:	f04f 0a00 	mov.w	sl, #0
 800309a:	6123      	str	r3, [r4, #16]
 800309c:	f02b 0304 	bic.w	r3, fp, #4
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	4633      	mov	r3, r6
 80030a4:	4621      	mov	r1, r4
 80030a6:	4628      	mov	r0, r5
 80030a8:	9700      	str	r7, [sp, #0]
 80030aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80030ac:	f000 f9d4 	bl	8003458 <_printf_common>
 80030b0:	3001      	adds	r0, #1
 80030b2:	f040 8090 	bne.w	80031d6 <_printf_float+0x1d6>
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	b011      	add	sp, #68	; 0x44
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	4642      	mov	r2, r8
 80030c2:	4653      	mov	r3, sl
 80030c4:	4640      	mov	r0, r8
 80030c6:	4651      	mov	r1, sl
 80030c8:	f7fd fca0 	bl	8000a0c <__aeabi_dcmpun>
 80030cc:	b148      	cbz	r0, 80030e2 <_printf_float+0xe2>
 80030ce:	f1ba 0f00 	cmp.w	sl, #0
 80030d2:	bfb8      	it	lt
 80030d4:	232d      	movlt	r3, #45	; 0x2d
 80030d6:	4880      	ldr	r0, [pc, #512]	; (80032d8 <_printf_float+0x2d8>)
 80030d8:	bfb8      	it	lt
 80030da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80030de:	4b7f      	ldr	r3, [pc, #508]	; (80032dc <_printf_float+0x2dc>)
 80030e0:	e7d3      	b.n	800308a <_printf_float+0x8a>
 80030e2:	6863      	ldr	r3, [r4, #4]
 80030e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	d142      	bne.n	8003172 <_printf_float+0x172>
 80030ec:	2306      	movs	r3, #6
 80030ee:	6063      	str	r3, [r4, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	9206      	str	r2, [sp, #24]
 80030f4:	aa0e      	add	r2, sp, #56	; 0x38
 80030f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80030fa:	aa0d      	add	r2, sp, #52	; 0x34
 80030fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003100:	9203      	str	r2, [sp, #12]
 8003102:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003106:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	6863      	ldr	r3, [r4, #4]
 800310e:	4642      	mov	r2, r8
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4628      	mov	r0, r5
 8003114:	4653      	mov	r3, sl
 8003116:	910b      	str	r1, [sp, #44]	; 0x2c
 8003118:	f7ff fed4 	bl	8002ec4 <__cvt>
 800311c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800311e:	4680      	mov	r8, r0
 8003120:	2947      	cmp	r1, #71	; 0x47
 8003122:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003124:	d108      	bne.n	8003138 <_printf_float+0x138>
 8003126:	1cc8      	adds	r0, r1, #3
 8003128:	db02      	blt.n	8003130 <_printf_float+0x130>
 800312a:	6863      	ldr	r3, [r4, #4]
 800312c:	4299      	cmp	r1, r3
 800312e:	dd40      	ble.n	80031b2 <_printf_float+0x1b2>
 8003130:	f1a9 0902 	sub.w	r9, r9, #2
 8003134:	fa5f f989 	uxtb.w	r9, r9
 8003138:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800313c:	d81f      	bhi.n	800317e <_printf_float+0x17e>
 800313e:	464a      	mov	r2, r9
 8003140:	3901      	subs	r1, #1
 8003142:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003146:	910d      	str	r1, [sp, #52]	; 0x34
 8003148:	f7ff ff1b 	bl	8002f82 <__exponent>
 800314c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800314e:	4682      	mov	sl, r0
 8003150:	1813      	adds	r3, r2, r0
 8003152:	2a01      	cmp	r2, #1
 8003154:	6123      	str	r3, [r4, #16]
 8003156:	dc02      	bgt.n	800315e <_printf_float+0x15e>
 8003158:	6822      	ldr	r2, [r4, #0]
 800315a:	07d2      	lsls	r2, r2, #31
 800315c:	d501      	bpl.n	8003162 <_printf_float+0x162>
 800315e:	3301      	adds	r3, #1
 8003160:	6123      	str	r3, [r4, #16]
 8003162:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003166:	2b00      	cmp	r3, #0
 8003168:	d09b      	beq.n	80030a2 <_printf_float+0xa2>
 800316a:	232d      	movs	r3, #45	; 0x2d
 800316c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003170:	e797      	b.n	80030a2 <_printf_float+0xa2>
 8003172:	2947      	cmp	r1, #71	; 0x47
 8003174:	d1bc      	bne.n	80030f0 <_printf_float+0xf0>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ba      	bne.n	80030f0 <_printf_float+0xf0>
 800317a:	2301      	movs	r3, #1
 800317c:	e7b7      	b.n	80030ee <_printf_float+0xee>
 800317e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003182:	d118      	bne.n	80031b6 <_printf_float+0x1b6>
 8003184:	2900      	cmp	r1, #0
 8003186:	6863      	ldr	r3, [r4, #4]
 8003188:	dd0b      	ble.n	80031a2 <_printf_float+0x1a2>
 800318a:	6121      	str	r1, [r4, #16]
 800318c:	b913      	cbnz	r3, 8003194 <_printf_float+0x194>
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	07d0      	lsls	r0, r2, #31
 8003192:	d502      	bpl.n	800319a <_printf_float+0x19a>
 8003194:	3301      	adds	r3, #1
 8003196:	440b      	add	r3, r1
 8003198:	6123      	str	r3, [r4, #16]
 800319a:	f04f 0a00 	mov.w	sl, #0
 800319e:	65a1      	str	r1, [r4, #88]	; 0x58
 80031a0:	e7df      	b.n	8003162 <_printf_float+0x162>
 80031a2:	b913      	cbnz	r3, 80031aa <_printf_float+0x1aa>
 80031a4:	6822      	ldr	r2, [r4, #0]
 80031a6:	07d2      	lsls	r2, r2, #31
 80031a8:	d501      	bpl.n	80031ae <_printf_float+0x1ae>
 80031aa:	3302      	adds	r3, #2
 80031ac:	e7f4      	b.n	8003198 <_printf_float+0x198>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e7f2      	b.n	8003198 <_printf_float+0x198>
 80031b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80031b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031b8:	4299      	cmp	r1, r3
 80031ba:	db05      	blt.n	80031c8 <_printf_float+0x1c8>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	6121      	str	r1, [r4, #16]
 80031c0:	07d8      	lsls	r0, r3, #31
 80031c2:	d5ea      	bpl.n	800319a <_printf_float+0x19a>
 80031c4:	1c4b      	adds	r3, r1, #1
 80031c6:	e7e7      	b.n	8003198 <_printf_float+0x198>
 80031c8:	2900      	cmp	r1, #0
 80031ca:	bfcc      	ite	gt
 80031cc:	2201      	movgt	r2, #1
 80031ce:	f1c1 0202 	rsble	r2, r1, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	e7e0      	b.n	8003198 <_printf_float+0x198>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	055a      	lsls	r2, r3, #21
 80031da:	d407      	bmi.n	80031ec <_printf_float+0x1ec>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	4642      	mov	r2, r8
 80031e0:	4631      	mov	r1, r6
 80031e2:	4628      	mov	r0, r5
 80031e4:	47b8      	blx	r7
 80031e6:	3001      	adds	r0, #1
 80031e8:	d12b      	bne.n	8003242 <_printf_float+0x242>
 80031ea:	e764      	b.n	80030b6 <_printf_float+0xb6>
 80031ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80031f0:	f240 80dd 	bls.w	80033ae <_printf_float+0x3ae>
 80031f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031f8:	2200      	movs	r2, #0
 80031fa:	2300      	movs	r3, #0
 80031fc:	f7fd fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8003200:	2800      	cmp	r0, #0
 8003202:	d033      	beq.n	800326c <_printf_float+0x26c>
 8003204:	2301      	movs	r3, #1
 8003206:	4631      	mov	r1, r6
 8003208:	4628      	mov	r0, r5
 800320a:	4a35      	ldr	r2, [pc, #212]	; (80032e0 <_printf_float+0x2e0>)
 800320c:	47b8      	blx	r7
 800320e:	3001      	adds	r0, #1
 8003210:	f43f af51 	beq.w	80030b6 <_printf_float+0xb6>
 8003214:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003218:	429a      	cmp	r2, r3
 800321a:	db02      	blt.n	8003222 <_printf_float+0x222>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	07d8      	lsls	r0, r3, #31
 8003220:	d50f      	bpl.n	8003242 <_printf_float+0x242>
 8003222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003226:	4631      	mov	r1, r6
 8003228:	4628      	mov	r0, r5
 800322a:	47b8      	blx	r7
 800322c:	3001      	adds	r0, #1
 800322e:	f43f af42 	beq.w	80030b6 <_printf_float+0xb6>
 8003232:	f04f 0800 	mov.w	r8, #0
 8003236:	f104 091a 	add.w	r9, r4, #26
 800323a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800323c:	3b01      	subs	r3, #1
 800323e:	4543      	cmp	r3, r8
 8003240:	dc09      	bgt.n	8003256 <_printf_float+0x256>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	079b      	lsls	r3, r3, #30
 8003246:	f100 8102 	bmi.w	800344e <_printf_float+0x44e>
 800324a:	68e0      	ldr	r0, [r4, #12]
 800324c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800324e:	4298      	cmp	r0, r3
 8003250:	bfb8      	it	lt
 8003252:	4618      	movlt	r0, r3
 8003254:	e731      	b.n	80030ba <_printf_float+0xba>
 8003256:	2301      	movs	r3, #1
 8003258:	464a      	mov	r2, r9
 800325a:	4631      	mov	r1, r6
 800325c:	4628      	mov	r0, r5
 800325e:	47b8      	blx	r7
 8003260:	3001      	adds	r0, #1
 8003262:	f43f af28 	beq.w	80030b6 <_printf_float+0xb6>
 8003266:	f108 0801 	add.w	r8, r8, #1
 800326a:	e7e6      	b.n	800323a <_printf_float+0x23a>
 800326c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800326e:	2b00      	cmp	r3, #0
 8003270:	dc38      	bgt.n	80032e4 <_printf_float+0x2e4>
 8003272:	2301      	movs	r3, #1
 8003274:	4631      	mov	r1, r6
 8003276:	4628      	mov	r0, r5
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <_printf_float+0x2e0>)
 800327a:	47b8      	blx	r7
 800327c:	3001      	adds	r0, #1
 800327e:	f43f af1a 	beq.w	80030b6 <_printf_float+0xb6>
 8003282:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003286:	4313      	orrs	r3, r2
 8003288:	d102      	bne.n	8003290 <_printf_float+0x290>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	07d9      	lsls	r1, r3, #31
 800328e:	d5d8      	bpl.n	8003242 <_printf_float+0x242>
 8003290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003294:	4631      	mov	r1, r6
 8003296:	4628      	mov	r0, r5
 8003298:	47b8      	blx	r7
 800329a:	3001      	adds	r0, #1
 800329c:	f43f af0b 	beq.w	80030b6 <_printf_float+0xb6>
 80032a0:	f04f 0900 	mov.w	r9, #0
 80032a4:	f104 0a1a 	add.w	sl, r4, #26
 80032a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032aa:	425b      	negs	r3, r3
 80032ac:	454b      	cmp	r3, r9
 80032ae:	dc01      	bgt.n	80032b4 <_printf_float+0x2b4>
 80032b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b2:	e794      	b.n	80031de <_printf_float+0x1de>
 80032b4:	2301      	movs	r3, #1
 80032b6:	4652      	mov	r2, sl
 80032b8:	4631      	mov	r1, r6
 80032ba:	4628      	mov	r0, r5
 80032bc:	47b8      	blx	r7
 80032be:	3001      	adds	r0, #1
 80032c0:	f43f aef9 	beq.w	80030b6 <_printf_float+0xb6>
 80032c4:	f109 0901 	add.w	r9, r9, #1
 80032c8:	e7ee      	b.n	80032a8 <_printf_float+0x2a8>
 80032ca:	bf00      	nop
 80032cc:	7fefffff 	.word	0x7fefffff
 80032d0:	08005cd4 	.word	0x08005cd4
 80032d4:	08005cd8 	.word	0x08005cd8
 80032d8:	08005ce0 	.word	0x08005ce0
 80032dc:	08005cdc 	.word	0x08005cdc
 80032e0:	08005ce4 	.word	0x08005ce4
 80032e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032e8:	429a      	cmp	r2, r3
 80032ea:	bfa8      	it	ge
 80032ec:	461a      	movge	r2, r3
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	4691      	mov	r9, r2
 80032f2:	dc37      	bgt.n	8003364 <_printf_float+0x364>
 80032f4:	f04f 0b00 	mov.w	fp, #0
 80032f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032fc:	f104 021a 	add.w	r2, r4, #26
 8003300:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003304:	ebaa 0309 	sub.w	r3, sl, r9
 8003308:	455b      	cmp	r3, fp
 800330a:	dc33      	bgt.n	8003374 <_printf_float+0x374>
 800330c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003310:	429a      	cmp	r2, r3
 8003312:	db3b      	blt.n	800338c <_printf_float+0x38c>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	07da      	lsls	r2, r3, #31
 8003318:	d438      	bmi.n	800338c <_printf_float+0x38c>
 800331a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800331c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800331e:	eba3 020a 	sub.w	r2, r3, sl
 8003322:	eba3 0901 	sub.w	r9, r3, r1
 8003326:	4591      	cmp	r9, r2
 8003328:	bfa8      	it	ge
 800332a:	4691      	movge	r9, r2
 800332c:	f1b9 0f00 	cmp.w	r9, #0
 8003330:	dc34      	bgt.n	800339c <_printf_float+0x39c>
 8003332:	f04f 0800 	mov.w	r8, #0
 8003336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800333a:	f104 0a1a 	add.w	sl, r4, #26
 800333e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	eba3 0309 	sub.w	r3, r3, r9
 8003348:	4543      	cmp	r3, r8
 800334a:	f77f af7a 	ble.w	8003242 <_printf_float+0x242>
 800334e:	2301      	movs	r3, #1
 8003350:	4652      	mov	r2, sl
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	47b8      	blx	r7
 8003358:	3001      	adds	r0, #1
 800335a:	f43f aeac 	beq.w	80030b6 <_printf_float+0xb6>
 800335e:	f108 0801 	add.w	r8, r8, #1
 8003362:	e7ec      	b.n	800333e <_printf_float+0x33e>
 8003364:	4613      	mov	r3, r2
 8003366:	4631      	mov	r1, r6
 8003368:	4642      	mov	r2, r8
 800336a:	4628      	mov	r0, r5
 800336c:	47b8      	blx	r7
 800336e:	3001      	adds	r0, #1
 8003370:	d1c0      	bne.n	80032f4 <_printf_float+0x2f4>
 8003372:	e6a0      	b.n	80030b6 <_printf_float+0xb6>
 8003374:	2301      	movs	r3, #1
 8003376:	4631      	mov	r1, r6
 8003378:	4628      	mov	r0, r5
 800337a:	920b      	str	r2, [sp, #44]	; 0x2c
 800337c:	47b8      	blx	r7
 800337e:	3001      	adds	r0, #1
 8003380:	f43f ae99 	beq.w	80030b6 <_printf_float+0xb6>
 8003384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003386:	f10b 0b01 	add.w	fp, fp, #1
 800338a:	e7b9      	b.n	8003300 <_printf_float+0x300>
 800338c:	4631      	mov	r1, r6
 800338e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003392:	4628      	mov	r0, r5
 8003394:	47b8      	blx	r7
 8003396:	3001      	adds	r0, #1
 8003398:	d1bf      	bne.n	800331a <_printf_float+0x31a>
 800339a:	e68c      	b.n	80030b6 <_printf_float+0xb6>
 800339c:	464b      	mov	r3, r9
 800339e:	4631      	mov	r1, r6
 80033a0:	4628      	mov	r0, r5
 80033a2:	eb08 020a 	add.w	r2, r8, sl
 80033a6:	47b8      	blx	r7
 80033a8:	3001      	adds	r0, #1
 80033aa:	d1c2      	bne.n	8003332 <_printf_float+0x332>
 80033ac:	e683      	b.n	80030b6 <_printf_float+0xb6>
 80033ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033b0:	2a01      	cmp	r2, #1
 80033b2:	dc01      	bgt.n	80033b8 <_printf_float+0x3b8>
 80033b4:	07db      	lsls	r3, r3, #31
 80033b6:	d537      	bpl.n	8003428 <_printf_float+0x428>
 80033b8:	2301      	movs	r3, #1
 80033ba:	4642      	mov	r2, r8
 80033bc:	4631      	mov	r1, r6
 80033be:	4628      	mov	r0, r5
 80033c0:	47b8      	blx	r7
 80033c2:	3001      	adds	r0, #1
 80033c4:	f43f ae77 	beq.w	80030b6 <_printf_float+0xb6>
 80033c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033cc:	4631      	mov	r1, r6
 80033ce:	4628      	mov	r0, r5
 80033d0:	47b8      	blx	r7
 80033d2:	3001      	adds	r0, #1
 80033d4:	f43f ae6f 	beq.w	80030b6 <_printf_float+0xb6>
 80033d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033dc:	2200      	movs	r2, #0
 80033de:	2300      	movs	r3, #0
 80033e0:	f7fd fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80033e4:	b9d8      	cbnz	r0, 800341e <_printf_float+0x41e>
 80033e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033e8:	f108 0201 	add.w	r2, r8, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	47b8      	blx	r7
 80033f4:	3001      	adds	r0, #1
 80033f6:	d10e      	bne.n	8003416 <_printf_float+0x416>
 80033f8:	e65d      	b.n	80030b6 <_printf_float+0xb6>
 80033fa:	2301      	movs	r3, #1
 80033fc:	464a      	mov	r2, r9
 80033fe:	4631      	mov	r1, r6
 8003400:	4628      	mov	r0, r5
 8003402:	47b8      	blx	r7
 8003404:	3001      	adds	r0, #1
 8003406:	f43f ae56 	beq.w	80030b6 <_printf_float+0xb6>
 800340a:	f108 0801 	add.w	r8, r8, #1
 800340e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003410:	3b01      	subs	r3, #1
 8003412:	4543      	cmp	r3, r8
 8003414:	dcf1      	bgt.n	80033fa <_printf_float+0x3fa>
 8003416:	4653      	mov	r3, sl
 8003418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800341c:	e6e0      	b.n	80031e0 <_printf_float+0x1e0>
 800341e:	f04f 0800 	mov.w	r8, #0
 8003422:	f104 091a 	add.w	r9, r4, #26
 8003426:	e7f2      	b.n	800340e <_printf_float+0x40e>
 8003428:	2301      	movs	r3, #1
 800342a:	4642      	mov	r2, r8
 800342c:	e7df      	b.n	80033ee <_printf_float+0x3ee>
 800342e:	2301      	movs	r3, #1
 8003430:	464a      	mov	r2, r9
 8003432:	4631      	mov	r1, r6
 8003434:	4628      	mov	r0, r5
 8003436:	47b8      	blx	r7
 8003438:	3001      	adds	r0, #1
 800343a:	f43f ae3c 	beq.w	80030b6 <_printf_float+0xb6>
 800343e:	f108 0801 	add.w	r8, r8, #1
 8003442:	68e3      	ldr	r3, [r4, #12]
 8003444:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003446:	1a5b      	subs	r3, r3, r1
 8003448:	4543      	cmp	r3, r8
 800344a:	dcf0      	bgt.n	800342e <_printf_float+0x42e>
 800344c:	e6fd      	b.n	800324a <_printf_float+0x24a>
 800344e:	f04f 0800 	mov.w	r8, #0
 8003452:	f104 0919 	add.w	r9, r4, #25
 8003456:	e7f4      	b.n	8003442 <_printf_float+0x442>

08003458 <_printf_common>:
 8003458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800345c:	4616      	mov	r6, r2
 800345e:	4699      	mov	r9, r3
 8003460:	688a      	ldr	r2, [r1, #8]
 8003462:	690b      	ldr	r3, [r1, #16]
 8003464:	4607      	mov	r7, r0
 8003466:	4293      	cmp	r3, r2
 8003468:	bfb8      	it	lt
 800346a:	4613      	movlt	r3, r2
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003472:	460c      	mov	r4, r1
 8003474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003478:	b10a      	cbz	r2, 800347e <_printf_common+0x26>
 800347a:	3301      	adds	r3, #1
 800347c:	6033      	str	r3, [r6, #0]
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	0699      	lsls	r1, r3, #26
 8003482:	bf42      	ittt	mi
 8003484:	6833      	ldrmi	r3, [r6, #0]
 8003486:	3302      	addmi	r3, #2
 8003488:	6033      	strmi	r3, [r6, #0]
 800348a:	6825      	ldr	r5, [r4, #0]
 800348c:	f015 0506 	ands.w	r5, r5, #6
 8003490:	d106      	bne.n	80034a0 <_printf_common+0x48>
 8003492:	f104 0a19 	add.w	sl, r4, #25
 8003496:	68e3      	ldr	r3, [r4, #12]
 8003498:	6832      	ldr	r2, [r6, #0]
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	42ab      	cmp	r3, r5
 800349e:	dc28      	bgt.n	80034f2 <_printf_common+0x9a>
 80034a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034a4:	1e13      	subs	r3, r2, #0
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	bf18      	it	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	0692      	lsls	r2, r2, #26
 80034ae:	d42d      	bmi.n	800350c <_printf_common+0xb4>
 80034b0:	4649      	mov	r1, r9
 80034b2:	4638      	mov	r0, r7
 80034b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034b8:	47c0      	blx	r8
 80034ba:	3001      	adds	r0, #1
 80034bc:	d020      	beq.n	8003500 <_printf_common+0xa8>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	68e5      	ldr	r5, [r4, #12]
 80034c2:	f003 0306 	and.w	r3, r3, #6
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf18      	it	ne
 80034ca:	2500      	movne	r5, #0
 80034cc:	6832      	ldr	r2, [r6, #0]
 80034ce:	f04f 0600 	mov.w	r6, #0
 80034d2:	68a3      	ldr	r3, [r4, #8]
 80034d4:	bf08      	it	eq
 80034d6:	1aad      	subeq	r5, r5, r2
 80034d8:	6922      	ldr	r2, [r4, #16]
 80034da:	bf08      	it	eq
 80034dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bfc4      	itt	gt
 80034e4:	1a9b      	subgt	r3, r3, r2
 80034e6:	18ed      	addgt	r5, r5, r3
 80034e8:	341a      	adds	r4, #26
 80034ea:	42b5      	cmp	r5, r6
 80034ec:	d11a      	bne.n	8003524 <_printf_common+0xcc>
 80034ee:	2000      	movs	r0, #0
 80034f0:	e008      	b.n	8003504 <_printf_common+0xac>
 80034f2:	2301      	movs	r3, #1
 80034f4:	4652      	mov	r2, sl
 80034f6:	4649      	mov	r1, r9
 80034f8:	4638      	mov	r0, r7
 80034fa:	47c0      	blx	r8
 80034fc:	3001      	adds	r0, #1
 80034fe:	d103      	bne.n	8003508 <_printf_common+0xb0>
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003508:	3501      	adds	r5, #1
 800350a:	e7c4      	b.n	8003496 <_printf_common+0x3e>
 800350c:	2030      	movs	r0, #48	; 0x30
 800350e:	18e1      	adds	r1, r4, r3
 8003510:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800351a:	4422      	add	r2, r4
 800351c:	3302      	adds	r3, #2
 800351e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003522:	e7c5      	b.n	80034b0 <_printf_common+0x58>
 8003524:	2301      	movs	r3, #1
 8003526:	4622      	mov	r2, r4
 8003528:	4649      	mov	r1, r9
 800352a:	4638      	mov	r0, r7
 800352c:	47c0      	blx	r8
 800352e:	3001      	adds	r0, #1
 8003530:	d0e6      	beq.n	8003500 <_printf_common+0xa8>
 8003532:	3601      	adds	r6, #1
 8003534:	e7d9      	b.n	80034ea <_printf_common+0x92>
	...

08003538 <_printf_i>:
 8003538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	7e0f      	ldrb	r7, [r1, #24]
 800353e:	4691      	mov	r9, r2
 8003540:	2f78      	cmp	r7, #120	; 0x78
 8003542:	4680      	mov	r8, r0
 8003544:	460c      	mov	r4, r1
 8003546:	469a      	mov	sl, r3
 8003548:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800354a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800354e:	d807      	bhi.n	8003560 <_printf_i+0x28>
 8003550:	2f62      	cmp	r7, #98	; 0x62
 8003552:	d80a      	bhi.n	800356a <_printf_i+0x32>
 8003554:	2f00      	cmp	r7, #0
 8003556:	f000 80d9 	beq.w	800370c <_printf_i+0x1d4>
 800355a:	2f58      	cmp	r7, #88	; 0x58
 800355c:	f000 80a4 	beq.w	80036a8 <_printf_i+0x170>
 8003560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003568:	e03a      	b.n	80035e0 <_printf_i+0xa8>
 800356a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800356e:	2b15      	cmp	r3, #21
 8003570:	d8f6      	bhi.n	8003560 <_printf_i+0x28>
 8003572:	a101      	add	r1, pc, #4	; (adr r1, 8003578 <_printf_i+0x40>)
 8003574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035e5 	.word	0x080035e5
 8003580:	08003561 	.word	0x08003561
 8003584:	08003561 	.word	0x08003561
 8003588:	08003561 	.word	0x08003561
 800358c:	08003561 	.word	0x08003561
 8003590:	080035e5 	.word	0x080035e5
 8003594:	08003561 	.word	0x08003561
 8003598:	08003561 	.word	0x08003561
 800359c:	08003561 	.word	0x08003561
 80035a0:	08003561 	.word	0x08003561
 80035a4:	080036f3 	.word	0x080036f3
 80035a8:	08003615 	.word	0x08003615
 80035ac:	080036d5 	.word	0x080036d5
 80035b0:	08003561 	.word	0x08003561
 80035b4:	08003561 	.word	0x08003561
 80035b8:	08003715 	.word	0x08003715
 80035bc:	08003561 	.word	0x08003561
 80035c0:	08003615 	.word	0x08003615
 80035c4:	08003561 	.word	0x08003561
 80035c8:	08003561 	.word	0x08003561
 80035cc:	080036dd 	.word	0x080036dd
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	602a      	str	r2, [r5, #0]
 80035d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0a4      	b.n	800372e <_printf_i+0x1f6>
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	6829      	ldr	r1, [r5, #0]
 80035e8:	0606      	lsls	r6, r0, #24
 80035ea:	f101 0304 	add.w	r3, r1, #4
 80035ee:	d50a      	bpl.n	8003606 <_printf_i+0xce>
 80035f0:	680e      	ldr	r6, [r1, #0]
 80035f2:	602b      	str	r3, [r5, #0]
 80035f4:	2e00      	cmp	r6, #0
 80035f6:	da03      	bge.n	8003600 <_printf_i+0xc8>
 80035f8:	232d      	movs	r3, #45	; 0x2d
 80035fa:	4276      	negs	r6, r6
 80035fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003600:	230a      	movs	r3, #10
 8003602:	485e      	ldr	r0, [pc, #376]	; (800377c <_printf_i+0x244>)
 8003604:	e019      	b.n	800363a <_printf_i+0x102>
 8003606:	680e      	ldr	r6, [r1, #0]
 8003608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800360c:	602b      	str	r3, [r5, #0]
 800360e:	bf18      	it	ne
 8003610:	b236      	sxthne	r6, r6
 8003612:	e7ef      	b.n	80035f4 <_printf_i+0xbc>
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	1d19      	adds	r1, r3, #4
 800361a:	6029      	str	r1, [r5, #0]
 800361c:	0601      	lsls	r1, r0, #24
 800361e:	d501      	bpl.n	8003624 <_printf_i+0xec>
 8003620:	681e      	ldr	r6, [r3, #0]
 8003622:	e002      	b.n	800362a <_printf_i+0xf2>
 8003624:	0646      	lsls	r6, r0, #25
 8003626:	d5fb      	bpl.n	8003620 <_printf_i+0xe8>
 8003628:	881e      	ldrh	r6, [r3, #0]
 800362a:	2f6f      	cmp	r7, #111	; 0x6f
 800362c:	bf0c      	ite	eq
 800362e:	2308      	moveq	r3, #8
 8003630:	230a      	movne	r3, #10
 8003632:	4852      	ldr	r0, [pc, #328]	; (800377c <_printf_i+0x244>)
 8003634:	2100      	movs	r1, #0
 8003636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800363a:	6865      	ldr	r5, [r4, #4]
 800363c:	2d00      	cmp	r5, #0
 800363e:	bfa8      	it	ge
 8003640:	6821      	ldrge	r1, [r4, #0]
 8003642:	60a5      	str	r5, [r4, #8]
 8003644:	bfa4      	itt	ge
 8003646:	f021 0104 	bicge.w	r1, r1, #4
 800364a:	6021      	strge	r1, [r4, #0]
 800364c:	b90e      	cbnz	r6, 8003652 <_printf_i+0x11a>
 800364e:	2d00      	cmp	r5, #0
 8003650:	d04d      	beq.n	80036ee <_printf_i+0x1b6>
 8003652:	4615      	mov	r5, r2
 8003654:	fbb6 f1f3 	udiv	r1, r6, r3
 8003658:	fb03 6711 	mls	r7, r3, r1, r6
 800365c:	5dc7      	ldrb	r7, [r0, r7]
 800365e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003662:	4637      	mov	r7, r6
 8003664:	42bb      	cmp	r3, r7
 8003666:	460e      	mov	r6, r1
 8003668:	d9f4      	bls.n	8003654 <_printf_i+0x11c>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d10b      	bne.n	8003686 <_printf_i+0x14e>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	07de      	lsls	r6, r3, #31
 8003672:	d508      	bpl.n	8003686 <_printf_i+0x14e>
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	6861      	ldr	r1, [r4, #4]
 8003678:	4299      	cmp	r1, r3
 800367a:	bfde      	ittt	le
 800367c:	2330      	movle	r3, #48	; 0x30
 800367e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003682:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003686:	1b52      	subs	r2, r2, r5
 8003688:	6122      	str	r2, [r4, #16]
 800368a:	464b      	mov	r3, r9
 800368c:	4621      	mov	r1, r4
 800368e:	4640      	mov	r0, r8
 8003690:	f8cd a000 	str.w	sl, [sp]
 8003694:	aa03      	add	r2, sp, #12
 8003696:	f7ff fedf 	bl	8003458 <_printf_common>
 800369a:	3001      	adds	r0, #1
 800369c:	d14c      	bne.n	8003738 <_printf_i+0x200>
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	b004      	add	sp, #16
 80036a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a8:	4834      	ldr	r0, [pc, #208]	; (800377c <_printf_i+0x244>)
 80036aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036ae:	6829      	ldr	r1, [r5, #0]
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80036b6:	6029      	str	r1, [r5, #0]
 80036b8:	061d      	lsls	r5, r3, #24
 80036ba:	d514      	bpl.n	80036e6 <_printf_i+0x1ae>
 80036bc:	07df      	lsls	r7, r3, #31
 80036be:	bf44      	itt	mi
 80036c0:	f043 0320 	orrmi.w	r3, r3, #32
 80036c4:	6023      	strmi	r3, [r4, #0]
 80036c6:	b91e      	cbnz	r6, 80036d0 <_printf_i+0x198>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	f023 0320 	bic.w	r3, r3, #32
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	2310      	movs	r3, #16
 80036d2:	e7af      	b.n	8003634 <_printf_i+0xfc>
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	f043 0320 	orr.w	r3, r3, #32
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	2378      	movs	r3, #120	; 0x78
 80036de:	4828      	ldr	r0, [pc, #160]	; (8003780 <_printf_i+0x248>)
 80036e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036e4:	e7e3      	b.n	80036ae <_printf_i+0x176>
 80036e6:	0659      	lsls	r1, r3, #25
 80036e8:	bf48      	it	mi
 80036ea:	b2b6      	uxthmi	r6, r6
 80036ec:	e7e6      	b.n	80036bc <_printf_i+0x184>
 80036ee:	4615      	mov	r5, r2
 80036f0:	e7bb      	b.n	800366a <_printf_i+0x132>
 80036f2:	682b      	ldr	r3, [r5, #0]
 80036f4:	6826      	ldr	r6, [r4, #0]
 80036f6:	1d18      	adds	r0, r3, #4
 80036f8:	6961      	ldr	r1, [r4, #20]
 80036fa:	6028      	str	r0, [r5, #0]
 80036fc:	0635      	lsls	r5, r6, #24
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	d501      	bpl.n	8003706 <_printf_i+0x1ce>
 8003702:	6019      	str	r1, [r3, #0]
 8003704:	e002      	b.n	800370c <_printf_i+0x1d4>
 8003706:	0670      	lsls	r0, r6, #25
 8003708:	d5fb      	bpl.n	8003702 <_printf_i+0x1ca>
 800370a:	8019      	strh	r1, [r3, #0]
 800370c:	2300      	movs	r3, #0
 800370e:	4615      	mov	r5, r2
 8003710:	6123      	str	r3, [r4, #16]
 8003712:	e7ba      	b.n	800368a <_printf_i+0x152>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	2100      	movs	r1, #0
 8003718:	1d1a      	adds	r2, r3, #4
 800371a:	602a      	str	r2, [r5, #0]
 800371c:	681d      	ldr	r5, [r3, #0]
 800371e:	6862      	ldr	r2, [r4, #4]
 8003720:	4628      	mov	r0, r5
 8003722:	f000 fed7 	bl	80044d4 <memchr>
 8003726:	b108      	cbz	r0, 800372c <_printf_i+0x1f4>
 8003728:	1b40      	subs	r0, r0, r5
 800372a:	6060      	str	r0, [r4, #4]
 800372c:	6863      	ldr	r3, [r4, #4]
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	2300      	movs	r3, #0
 8003732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003736:	e7a8      	b.n	800368a <_printf_i+0x152>
 8003738:	462a      	mov	r2, r5
 800373a:	4649      	mov	r1, r9
 800373c:	4640      	mov	r0, r8
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	47d0      	blx	sl
 8003742:	3001      	adds	r0, #1
 8003744:	d0ab      	beq.n	800369e <_printf_i+0x166>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	079b      	lsls	r3, r3, #30
 800374a:	d413      	bmi.n	8003774 <_printf_i+0x23c>
 800374c:	68e0      	ldr	r0, [r4, #12]
 800374e:	9b03      	ldr	r3, [sp, #12]
 8003750:	4298      	cmp	r0, r3
 8003752:	bfb8      	it	lt
 8003754:	4618      	movlt	r0, r3
 8003756:	e7a4      	b.n	80036a2 <_printf_i+0x16a>
 8003758:	2301      	movs	r3, #1
 800375a:	4632      	mov	r2, r6
 800375c:	4649      	mov	r1, r9
 800375e:	4640      	mov	r0, r8
 8003760:	47d0      	blx	sl
 8003762:	3001      	adds	r0, #1
 8003764:	d09b      	beq.n	800369e <_printf_i+0x166>
 8003766:	3501      	adds	r5, #1
 8003768:	68e3      	ldr	r3, [r4, #12]
 800376a:	9903      	ldr	r1, [sp, #12]
 800376c:	1a5b      	subs	r3, r3, r1
 800376e:	42ab      	cmp	r3, r5
 8003770:	dcf2      	bgt.n	8003758 <_printf_i+0x220>
 8003772:	e7eb      	b.n	800374c <_printf_i+0x214>
 8003774:	2500      	movs	r5, #0
 8003776:	f104 0619 	add.w	r6, r4, #25
 800377a:	e7f5      	b.n	8003768 <_printf_i+0x230>
 800377c:	08005ce6 	.word	0x08005ce6
 8003780:	08005cf7 	.word	0x08005cf7

08003784 <siprintf>:
 8003784:	b40e      	push	{r1, r2, r3}
 8003786:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800378a:	b500      	push	{lr}
 800378c:	b09c      	sub	sp, #112	; 0x70
 800378e:	ab1d      	add	r3, sp, #116	; 0x74
 8003790:	9002      	str	r0, [sp, #8]
 8003792:	9006      	str	r0, [sp, #24]
 8003794:	9107      	str	r1, [sp, #28]
 8003796:	9104      	str	r1, [sp, #16]
 8003798:	4808      	ldr	r0, [pc, #32]	; (80037bc <siprintf+0x38>)
 800379a:	4909      	ldr	r1, [pc, #36]	; (80037c0 <siprintf+0x3c>)
 800379c:	f853 2b04 	ldr.w	r2, [r3], #4
 80037a0:	9105      	str	r1, [sp, #20]
 80037a2:	6800      	ldr	r0, [r0, #0]
 80037a4:	a902      	add	r1, sp, #8
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	f001 fb7e 	bl	8004ea8 <_svfiprintf_r>
 80037ac:	2200      	movs	r2, #0
 80037ae:	9b02      	ldr	r3, [sp, #8]
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	b01c      	add	sp, #112	; 0x70
 80037b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b8:	b003      	add	sp, #12
 80037ba:	4770      	bx	lr
 80037bc:	2000002c 	.word	0x2000002c
 80037c0:	ffff0208 	.word	0xffff0208

080037c4 <quorem>:
 80037c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	6903      	ldr	r3, [r0, #16]
 80037ca:	690c      	ldr	r4, [r1, #16]
 80037cc:	4607      	mov	r7, r0
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	f2c0 8082 	blt.w	80038d8 <quorem+0x114>
 80037d4:	3c01      	subs	r4, #1
 80037d6:	f100 0514 	add.w	r5, r0, #20
 80037da:	f101 0814 	add.w	r8, r1, #20
 80037de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80037e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037ec:	3301      	adds	r3, #1
 80037ee:	429a      	cmp	r2, r3
 80037f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80037f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80037f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80037fc:	d331      	bcc.n	8003862 <quorem+0x9e>
 80037fe:	f04f 0e00 	mov.w	lr, #0
 8003802:	4640      	mov	r0, r8
 8003804:	46ac      	mov	ip, r5
 8003806:	46f2      	mov	sl, lr
 8003808:	f850 2b04 	ldr.w	r2, [r0], #4
 800380c:	b293      	uxth	r3, r2
 800380e:	fb06 e303 	mla	r3, r6, r3, lr
 8003812:	0c12      	lsrs	r2, r2, #16
 8003814:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003818:	b29b      	uxth	r3, r3
 800381a:	fb06 e202 	mla	r2, r6, r2, lr
 800381e:	ebaa 0303 	sub.w	r3, sl, r3
 8003822:	f8dc a000 	ldr.w	sl, [ip]
 8003826:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800382a:	fa1f fa8a 	uxth.w	sl, sl
 800382e:	4453      	add	r3, sl
 8003830:	f8dc a000 	ldr.w	sl, [ip]
 8003834:	b292      	uxth	r2, r2
 8003836:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800383a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800383e:	b29b      	uxth	r3, r3
 8003840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003844:	4581      	cmp	r9, r0
 8003846:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800384a:	f84c 3b04 	str.w	r3, [ip], #4
 800384e:	d2db      	bcs.n	8003808 <quorem+0x44>
 8003850:	f855 300b 	ldr.w	r3, [r5, fp]
 8003854:	b92b      	cbnz	r3, 8003862 <quorem+0x9e>
 8003856:	9b01      	ldr	r3, [sp, #4]
 8003858:	3b04      	subs	r3, #4
 800385a:	429d      	cmp	r5, r3
 800385c:	461a      	mov	r2, r3
 800385e:	d32f      	bcc.n	80038c0 <quorem+0xfc>
 8003860:	613c      	str	r4, [r7, #16]
 8003862:	4638      	mov	r0, r7
 8003864:	f001 f8d0 	bl	8004a08 <__mcmp>
 8003868:	2800      	cmp	r0, #0
 800386a:	db25      	blt.n	80038b8 <quorem+0xf4>
 800386c:	4628      	mov	r0, r5
 800386e:	f04f 0c00 	mov.w	ip, #0
 8003872:	3601      	adds	r6, #1
 8003874:	f858 1b04 	ldr.w	r1, [r8], #4
 8003878:	f8d0 e000 	ldr.w	lr, [r0]
 800387c:	b28b      	uxth	r3, r1
 800387e:	ebac 0303 	sub.w	r3, ip, r3
 8003882:	fa1f f28e 	uxth.w	r2, lr
 8003886:	4413      	add	r3, r2
 8003888:	0c0a      	lsrs	r2, r1, #16
 800388a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800388e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003892:	b29b      	uxth	r3, r3
 8003894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003898:	45c1      	cmp	r9, r8
 800389a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800389e:	f840 3b04 	str.w	r3, [r0], #4
 80038a2:	d2e7      	bcs.n	8003874 <quorem+0xb0>
 80038a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038ac:	b922      	cbnz	r2, 80038b8 <quorem+0xf4>
 80038ae:	3b04      	subs	r3, #4
 80038b0:	429d      	cmp	r5, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	d30a      	bcc.n	80038cc <quorem+0x108>
 80038b6:	613c      	str	r4, [r7, #16]
 80038b8:	4630      	mov	r0, r6
 80038ba:	b003      	add	sp, #12
 80038bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	3b04      	subs	r3, #4
 80038c4:	2a00      	cmp	r2, #0
 80038c6:	d1cb      	bne.n	8003860 <quorem+0x9c>
 80038c8:	3c01      	subs	r4, #1
 80038ca:	e7c6      	b.n	800385a <quorem+0x96>
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	3b04      	subs	r3, #4
 80038d0:	2a00      	cmp	r2, #0
 80038d2:	d1f0      	bne.n	80038b6 <quorem+0xf2>
 80038d4:	3c01      	subs	r4, #1
 80038d6:	e7eb      	b.n	80038b0 <quorem+0xec>
 80038d8:	2000      	movs	r0, #0
 80038da:	e7ee      	b.n	80038ba <quorem+0xf6>
 80038dc:	0000      	movs	r0, r0
	...

080038e0 <_dtoa_r>:
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	4616      	mov	r6, r2
 80038e6:	461f      	mov	r7, r3
 80038e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80038ea:	b099      	sub	sp, #100	; 0x64
 80038ec:	4605      	mov	r5, r0
 80038ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80038f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80038f6:	b974      	cbnz	r4, 8003916 <_dtoa_r+0x36>
 80038f8:	2010      	movs	r0, #16
 80038fa:	f000 fde3 	bl	80044c4 <malloc>
 80038fe:	4602      	mov	r2, r0
 8003900:	6268      	str	r0, [r5, #36]	; 0x24
 8003902:	b920      	cbnz	r0, 800390e <_dtoa_r+0x2e>
 8003904:	21ea      	movs	r1, #234	; 0xea
 8003906:	4ba8      	ldr	r3, [pc, #672]	; (8003ba8 <_dtoa_r+0x2c8>)
 8003908:	48a8      	ldr	r0, [pc, #672]	; (8003bac <_dtoa_r+0x2cc>)
 800390a:	f001 fbdd 	bl	80050c8 <__assert_func>
 800390e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003912:	6004      	str	r4, [r0, #0]
 8003914:	60c4      	str	r4, [r0, #12]
 8003916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	b151      	cbz	r1, 8003932 <_dtoa_r+0x52>
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	2301      	movs	r3, #1
 8003920:	4093      	lsls	r3, r2
 8003922:	604a      	str	r2, [r1, #4]
 8003924:	608b      	str	r3, [r1, #8]
 8003926:	4628      	mov	r0, r5
 8003928:	f000 fe30 	bl	800458c <_Bfree>
 800392c:	2200      	movs	r2, #0
 800392e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	1e3b      	subs	r3, r7, #0
 8003934:	bfaf      	iteee	ge
 8003936:	2300      	movge	r3, #0
 8003938:	2201      	movlt	r2, #1
 800393a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800393e:	9305      	strlt	r3, [sp, #20]
 8003940:	bfa8      	it	ge
 8003942:	f8c8 3000 	strge.w	r3, [r8]
 8003946:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800394a:	4b99      	ldr	r3, [pc, #612]	; (8003bb0 <_dtoa_r+0x2d0>)
 800394c:	bfb8      	it	lt
 800394e:	f8c8 2000 	strlt.w	r2, [r8]
 8003952:	ea33 0309 	bics.w	r3, r3, r9
 8003956:	d119      	bne.n	800398c <_dtoa_r+0xac>
 8003958:	f242 730f 	movw	r3, #9999	; 0x270f
 800395c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003964:	4333      	orrs	r3, r6
 8003966:	f000 857f 	beq.w	8004468 <_dtoa_r+0xb88>
 800396a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800396c:	b953      	cbnz	r3, 8003984 <_dtoa_r+0xa4>
 800396e:	4b91      	ldr	r3, [pc, #580]	; (8003bb4 <_dtoa_r+0x2d4>)
 8003970:	e022      	b.n	80039b8 <_dtoa_r+0xd8>
 8003972:	4b91      	ldr	r3, [pc, #580]	; (8003bb8 <_dtoa_r+0x2d8>)
 8003974:	9303      	str	r3, [sp, #12]
 8003976:	3308      	adds	r3, #8
 8003978:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	9803      	ldr	r0, [sp, #12]
 800397e:	b019      	add	sp, #100	; 0x64
 8003980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003984:	4b8b      	ldr	r3, [pc, #556]	; (8003bb4 <_dtoa_r+0x2d4>)
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	3303      	adds	r3, #3
 800398a:	e7f5      	b.n	8003978 <_dtoa_r+0x98>
 800398c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003990:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003998:	2200      	movs	r2, #0
 800399a:	2300      	movs	r3, #0
 800399c:	f7fd f804 	bl	80009a8 <__aeabi_dcmpeq>
 80039a0:	4680      	mov	r8, r0
 80039a2:	b158      	cbz	r0, 80039bc <_dtoa_r+0xdc>
 80039a4:	2301      	movs	r3, #1
 80039a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8558 	beq.w	8004462 <_dtoa_r+0xb82>
 80039b2:	4882      	ldr	r0, [pc, #520]	; (8003bbc <_dtoa_r+0x2dc>)
 80039b4:	6018      	str	r0, [r3, #0]
 80039b6:	1e43      	subs	r3, r0, #1
 80039b8:	9303      	str	r3, [sp, #12]
 80039ba:	e7df      	b.n	800397c <_dtoa_r+0x9c>
 80039bc:	ab16      	add	r3, sp, #88	; 0x58
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	ab17      	add	r3, sp, #92	; 0x5c
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4628      	mov	r0, r5
 80039c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80039ca:	f001 f8c5 	bl	8004b58 <__d2b>
 80039ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80039d2:	4683      	mov	fp, r0
 80039d4:	2c00      	cmp	r4, #0
 80039d6:	d07f      	beq.n	8003ad8 <_dtoa_r+0x1f8>
 80039d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80039e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80039ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80039ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80039f2:	2200      	movs	r2, #0
 80039f4:	4b72      	ldr	r3, [pc, #456]	; (8003bc0 <_dtoa_r+0x2e0>)
 80039f6:	f7fc fbb7 	bl	8000168 <__aeabi_dsub>
 80039fa:	a365      	add	r3, pc, #404	; (adr r3, 8003b90 <_dtoa_r+0x2b0>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fc fd6a 	bl	80004d8 <__aeabi_dmul>
 8003a04:	a364      	add	r3, pc, #400	; (adr r3, 8003b98 <_dtoa_r+0x2b8>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc fbaf 	bl	800016c <__adddf3>
 8003a0e:	4606      	mov	r6, r0
 8003a10:	4620      	mov	r0, r4
 8003a12:	460f      	mov	r7, r1
 8003a14:	f7fc fcf6 	bl	8000404 <__aeabi_i2d>
 8003a18:	a361      	add	r3, pc, #388	; (adr r3, 8003ba0 <_dtoa_r+0x2c0>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fd5b 	bl	80004d8 <__aeabi_dmul>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4630      	mov	r0, r6
 8003a28:	4639      	mov	r1, r7
 8003a2a:	f7fc fb9f 	bl	800016c <__adddf3>
 8003a2e:	4606      	mov	r6, r0
 8003a30:	460f      	mov	r7, r1
 8003a32:	f7fd f801 	bl	8000a38 <__aeabi_d2iz>
 8003a36:	2200      	movs	r2, #0
 8003a38:	4682      	mov	sl, r0
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	4639      	mov	r1, r7
 8003a40:	f7fc ffbc 	bl	80009bc <__aeabi_dcmplt>
 8003a44:	b148      	cbz	r0, 8003a5a <_dtoa_r+0x17a>
 8003a46:	4650      	mov	r0, sl
 8003a48:	f7fc fcdc 	bl	8000404 <__aeabi_i2d>
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	463b      	mov	r3, r7
 8003a50:	f7fc ffaa 	bl	80009a8 <__aeabi_dcmpeq>
 8003a54:	b908      	cbnz	r0, 8003a5a <_dtoa_r+0x17a>
 8003a56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a5a:	f1ba 0f16 	cmp.w	sl, #22
 8003a5e:	d858      	bhi.n	8003b12 <_dtoa_r+0x232>
 8003a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a64:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <_dtoa_r+0x2e4>)
 8003a66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc ffa5 	bl	80009bc <__aeabi_dcmplt>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d04f      	beq.n	8003b16 <_dtoa_r+0x236>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a80:	1b1c      	subs	r4, r3, r4
 8003a82:	1e63      	subs	r3, r4, #1
 8003a84:	9309      	str	r3, [sp, #36]	; 0x24
 8003a86:	bf49      	itett	mi
 8003a88:	f1c4 0301 	rsbmi	r3, r4, #1
 8003a8c:	2300      	movpl	r3, #0
 8003a8e:	9306      	strmi	r3, [sp, #24]
 8003a90:	2300      	movmi	r3, #0
 8003a92:	bf54      	ite	pl
 8003a94:	9306      	strpl	r3, [sp, #24]
 8003a96:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003a98:	f1ba 0f00 	cmp.w	sl, #0
 8003a9c:	db3d      	blt.n	8003b1a <_dtoa_r+0x23a>
 8003a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003aa4:	4453      	add	r3, sl
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8003aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	f200 808c 	bhi.w	8003bcc <_dtoa_r+0x2ec>
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	bfc4      	itt	gt
 8003ab8:	3b04      	subgt	r3, #4
 8003aba:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003abe:	bfc8      	it	gt
 8003ac0:	2400      	movgt	r4, #0
 8003ac2:	f1a3 0302 	sub.w	r3, r3, #2
 8003ac6:	bfd8      	it	le
 8003ac8:	2401      	movle	r4, #1
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	f200 808a 	bhi.w	8003be4 <_dtoa_r+0x304>
 8003ad0:	e8df f003 	tbb	[pc, r3]
 8003ad4:	5b4d4f2d 	.word	0x5b4d4f2d
 8003ad8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003adc:	441c      	add	r4, r3
 8003ade:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	bfc3      	ittte	gt
 8003ae6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003aea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003aee:	fa09 f303 	lslgt.w	r3, r9, r3
 8003af2:	f1c3 0320 	rsble	r3, r3, #32
 8003af6:	bfc6      	itte	gt
 8003af8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003afc:	4318      	orrgt	r0, r3
 8003afe:	fa06 f003 	lslle.w	r0, r6, r3
 8003b02:	f7fc fc6f 	bl	80003e4 <__aeabi_ui2d>
 8003b06:	2301      	movs	r3, #1
 8003b08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003b0c:	3c01      	subs	r4, #1
 8003b0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b10:	e76f      	b.n	80039f2 <_dtoa_r+0x112>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e7b2      	b.n	8003a7c <_dtoa_r+0x19c>
 8003b16:	900f      	str	r0, [sp, #60]	; 0x3c
 8003b18:	e7b1      	b.n	8003a7e <_dtoa_r+0x19e>
 8003b1a:	9b06      	ldr	r3, [sp, #24]
 8003b1c:	eba3 030a 	sub.w	r3, r3, sl
 8003b20:	9306      	str	r3, [sp, #24]
 8003b22:	f1ca 0300 	rsb	r3, sl, #0
 8003b26:	930a      	str	r3, [sp, #40]	; 0x28
 8003b28:	2300      	movs	r3, #0
 8003b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8003b2c:	e7be      	b.n	8003aac <_dtoa_r+0x1cc>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	dc58      	bgt.n	8003bea <_dtoa_r+0x30a>
 8003b38:	f04f 0901 	mov.w	r9, #1
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003b42:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003b46:	2200      	movs	r2, #0
 8003b48:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003b4a:	6042      	str	r2, [r0, #4]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	f102 0614 	add.w	r6, r2, #20
 8003b52:	429e      	cmp	r6, r3
 8003b54:	6841      	ldr	r1, [r0, #4]
 8003b56:	d94e      	bls.n	8003bf6 <_dtoa_r+0x316>
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f000 fcd7 	bl	800450c <_Balloc>
 8003b5e:	9003      	str	r0, [sp, #12]
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d14c      	bne.n	8003bfe <_dtoa_r+0x31e>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <_dtoa_r+0x2e8>)
 8003b6c:	e6cc      	b.n	8003908 <_dtoa_r+0x28>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e7de      	b.n	8003b30 <_dtoa_r+0x250>
 8003b72:	2300      	movs	r3, #0
 8003b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b78:	eb0a 0903 	add.w	r9, sl, r3
 8003b7c:	f109 0301 	add.w	r3, r9, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	9308      	str	r3, [sp, #32]
 8003b84:	bfb8      	it	lt
 8003b86:	2301      	movlt	r3, #1
 8003b88:	e7dd      	b.n	8003b46 <_dtoa_r+0x266>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e7f2      	b.n	8003b74 <_dtoa_r+0x294>
 8003b8e:	bf00      	nop
 8003b90:	636f4361 	.word	0x636f4361
 8003b94:	3fd287a7 	.word	0x3fd287a7
 8003b98:	8b60c8b3 	.word	0x8b60c8b3
 8003b9c:	3fc68a28 	.word	0x3fc68a28
 8003ba0:	509f79fb 	.word	0x509f79fb
 8003ba4:	3fd34413 	.word	0x3fd34413
 8003ba8:	08005d15 	.word	0x08005d15
 8003bac:	08005d2c 	.word	0x08005d2c
 8003bb0:	7ff00000 	.word	0x7ff00000
 8003bb4:	08005d11 	.word	0x08005d11
 8003bb8:	08005d08 	.word	0x08005d08
 8003bbc:	08005ce5 	.word	0x08005ce5
 8003bc0:	3ff80000 	.word	0x3ff80000
 8003bc4:	08005e20 	.word	0x08005e20
 8003bc8:	08005d87 	.word	0x08005d87
 8003bcc:	2401      	movs	r4, #1
 8003bce:	2300      	movs	r3, #0
 8003bd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8003bd2:	9322      	str	r3, [sp, #136]	; 0x88
 8003bd4:	f04f 39ff 	mov.w	r9, #4294967295
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2312      	movs	r3, #18
 8003bdc:	f8cd 9020 	str.w	r9, [sp, #32]
 8003be0:	9223      	str	r2, [sp, #140]	; 0x8c
 8003be2:	e7b0      	b.n	8003b46 <_dtoa_r+0x266>
 8003be4:	2301      	movs	r3, #1
 8003be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003be8:	e7f4      	b.n	8003bd4 <_dtoa_r+0x2f4>
 8003bea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003bee:	464b      	mov	r3, r9
 8003bf0:	f8cd 9020 	str.w	r9, [sp, #32]
 8003bf4:	e7a7      	b.n	8003b46 <_dtoa_r+0x266>
 8003bf6:	3101      	adds	r1, #1
 8003bf8:	6041      	str	r1, [r0, #4]
 8003bfa:	0052      	lsls	r2, r2, #1
 8003bfc:	e7a7      	b.n	8003b4e <_dtoa_r+0x26e>
 8003bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c00:	9a03      	ldr	r2, [sp, #12]
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	9b08      	ldr	r3, [sp, #32]
 8003c06:	2b0e      	cmp	r3, #14
 8003c08:	f200 80a8 	bhi.w	8003d5c <_dtoa_r+0x47c>
 8003c0c:	2c00      	cmp	r4, #0
 8003c0e:	f000 80a5 	beq.w	8003d5c <_dtoa_r+0x47c>
 8003c12:	f1ba 0f00 	cmp.w	sl, #0
 8003c16:	dd34      	ble.n	8003c82 <_dtoa_r+0x3a2>
 8003c18:	4a9a      	ldr	r2, [pc, #616]	; (8003e84 <_dtoa_r+0x5a4>)
 8003c1a:	f00a 030f 	and.w	r3, sl, #15
 8003c1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c22:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003c26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003c2e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003c32:	d016      	beq.n	8003c62 <_dtoa_r+0x382>
 8003c34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c38:	4b93      	ldr	r3, [pc, #588]	; (8003e88 <_dtoa_r+0x5a8>)
 8003c3a:	2703      	movs	r7, #3
 8003c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c40:	f7fc fd74 	bl	800072c <__aeabi_ddiv>
 8003c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c48:	f004 040f 	and.w	r4, r4, #15
 8003c4c:	4e8e      	ldr	r6, [pc, #568]	; (8003e88 <_dtoa_r+0x5a8>)
 8003c4e:	b954      	cbnz	r4, 8003c66 <_dtoa_r+0x386>
 8003c50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c58:	f7fc fd68 	bl	800072c <__aeabi_ddiv>
 8003c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c60:	e029      	b.n	8003cb6 <_dtoa_r+0x3d6>
 8003c62:	2702      	movs	r7, #2
 8003c64:	e7f2      	b.n	8003c4c <_dtoa_r+0x36c>
 8003c66:	07e1      	lsls	r1, r4, #31
 8003c68:	d508      	bpl.n	8003c7c <_dtoa_r+0x39c>
 8003c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c72:	f7fc fc31 	bl	80004d8 <__aeabi_dmul>
 8003c76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c7a:	3701      	adds	r7, #1
 8003c7c:	1064      	asrs	r4, r4, #1
 8003c7e:	3608      	adds	r6, #8
 8003c80:	e7e5      	b.n	8003c4e <_dtoa_r+0x36e>
 8003c82:	f000 80a5 	beq.w	8003dd0 <_dtoa_r+0x4f0>
 8003c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c8a:	f1ca 0400 	rsb	r4, sl, #0
 8003c8e:	4b7d      	ldr	r3, [pc, #500]	; (8003e84 <_dtoa_r+0x5a4>)
 8003c90:	f004 020f 	and.w	r2, r4, #15
 8003c94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f7fc fc1c 	bl	80004d8 <__aeabi_dmul>
 8003ca0:	2702      	movs	r7, #2
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ca8:	4e77      	ldr	r6, [pc, #476]	; (8003e88 <_dtoa_r+0x5a8>)
 8003caa:	1124      	asrs	r4, r4, #4
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	f040 8084 	bne.w	8003dba <_dtoa_r+0x4da>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1d2      	bne.n	8003c5c <_dtoa_r+0x37c>
 8003cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 808b 	beq.w	8003dd4 <_dtoa_r+0x4f4>
 8003cbe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003cc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003cc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4b6f      	ldr	r3, [pc, #444]	; (8003e8c <_dtoa_r+0x5ac>)
 8003cce:	f7fc fe75 	bl	80009bc <__aeabi_dcmplt>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d07e      	beq.n	8003dd4 <_dtoa_r+0x4f4>
 8003cd6:	9b08      	ldr	r3, [sp, #32]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d07b      	beq.n	8003dd4 <_dtoa_r+0x4f4>
 8003cdc:	f1b9 0f00 	cmp.w	r9, #0
 8003ce0:	dd38      	ble.n	8003d54 <_dtoa_r+0x474>
 8003ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <_dtoa_r+0x5b0>)
 8003cea:	f7fc fbf5 	bl	80004d8 <__aeabi_dmul>
 8003cee:	464c      	mov	r4, r9
 8003cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003cf4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003cf8:	3701      	adds	r7, #1
 8003cfa:	4638      	mov	r0, r7
 8003cfc:	f7fc fb82 	bl	8000404 <__aeabi_i2d>
 8003d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d04:	f7fc fbe8 	bl	80004d8 <__aeabi_dmul>
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4b62      	ldr	r3, [pc, #392]	; (8003e94 <_dtoa_r+0x5b4>)
 8003d0c:	f7fc fa2e 	bl	800016c <__adddf3>
 8003d10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003d14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d18:	9611      	str	r6, [sp, #68]	; 0x44
 8003d1a:	2c00      	cmp	r4, #0
 8003d1c:	d15d      	bne.n	8003dda <_dtoa_r+0x4fa>
 8003d1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d22:	2200      	movs	r2, #0
 8003d24:	4b5c      	ldr	r3, [pc, #368]	; (8003e98 <_dtoa_r+0x5b8>)
 8003d26:	f7fc fa1f 	bl	8000168 <__aeabi_dsub>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d32:	4633      	mov	r3, r6
 8003d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d36:	f7fc fe5f 	bl	80009f8 <__aeabi_dcmpgt>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	f040 829c 	bne.w	8004278 <_dtoa_r+0x998>
 8003d40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003d4a:	f7fc fe37 	bl	80009bc <__aeabi_dcmplt>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	f040 8290 	bne.w	8004274 <_dtoa_r+0x994>
 8003d54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003d58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f2c0 8152 	blt.w	8004008 <_dtoa_r+0x728>
 8003d64:	f1ba 0f0e 	cmp.w	sl, #14
 8003d68:	f300 814e 	bgt.w	8004008 <_dtoa_r+0x728>
 8003d6c:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <_dtoa_r+0x5a4>)
 8003d6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003d7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f280 80db 	bge.w	8003f38 <_dtoa_r+0x658>
 8003d82:	9b08      	ldr	r3, [sp, #32]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f300 80d7 	bgt.w	8003f38 <_dtoa_r+0x658>
 8003d8a:	f040 8272 	bne.w	8004272 <_dtoa_r+0x992>
 8003d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d92:	2200      	movs	r2, #0
 8003d94:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <_dtoa_r+0x5b8>)
 8003d96:	f7fc fb9f 	bl	80004d8 <__aeabi_dmul>
 8003d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d9e:	f7fc fe21 	bl	80009e4 <__aeabi_dcmpge>
 8003da2:	9c08      	ldr	r4, [sp, #32]
 8003da4:	4626      	mov	r6, r4
 8003da6:	2800      	cmp	r0, #0
 8003da8:	f040 8248 	bne.w	800423c <_dtoa_r+0x95c>
 8003dac:	2331      	movs	r3, #49	; 0x31
 8003dae:	9f03      	ldr	r7, [sp, #12]
 8003db0:	f10a 0a01 	add.w	sl, sl, #1
 8003db4:	f807 3b01 	strb.w	r3, [r7], #1
 8003db8:	e244      	b.n	8004244 <_dtoa_r+0x964>
 8003dba:	07e2      	lsls	r2, r4, #31
 8003dbc:	d505      	bpl.n	8003dca <_dtoa_r+0x4ea>
 8003dbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003dc2:	f7fc fb89 	bl	80004d8 <__aeabi_dmul>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	3701      	adds	r7, #1
 8003dca:	1064      	asrs	r4, r4, #1
 8003dcc:	3608      	adds	r6, #8
 8003dce:	e76d      	b.n	8003cac <_dtoa_r+0x3cc>
 8003dd0:	2702      	movs	r7, #2
 8003dd2:	e770      	b.n	8003cb6 <_dtoa_r+0x3d6>
 8003dd4:	46d0      	mov	r8, sl
 8003dd6:	9c08      	ldr	r4, [sp, #32]
 8003dd8:	e78f      	b.n	8003cfa <_dtoa_r+0x41a>
 8003dda:	9903      	ldr	r1, [sp, #12]
 8003ddc:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <_dtoa_r+0x5a4>)
 8003dde:	4421      	add	r1, r4
 8003de0:	9112      	str	r1, [sp, #72]	; 0x48
 8003de2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003de4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003de8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003dec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003df0:	2900      	cmp	r1, #0
 8003df2:	d055      	beq.n	8003ea0 <_dtoa_r+0x5c0>
 8003df4:	2000      	movs	r0, #0
 8003df6:	4929      	ldr	r1, [pc, #164]	; (8003e9c <_dtoa_r+0x5bc>)
 8003df8:	f7fc fc98 	bl	800072c <__aeabi_ddiv>
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	4632      	mov	r2, r6
 8003e00:	f7fc f9b2 	bl	8000168 <__aeabi_dsub>
 8003e04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e08:	9f03      	ldr	r7, [sp, #12]
 8003e0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e0e:	f7fc fe13 	bl	8000a38 <__aeabi_d2iz>
 8003e12:	4604      	mov	r4, r0
 8003e14:	f7fc faf6 	bl	8000404 <__aeabi_i2d>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e20:	f7fc f9a2 	bl	8000168 <__aeabi_dsub>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	3430      	adds	r4, #48	; 0x30
 8003e2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e32:	f807 4b01 	strb.w	r4, [r7], #1
 8003e36:	f7fc fdc1 	bl	80009bc <__aeabi_dcmplt>
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d174      	bne.n	8003f28 <_dtoa_r+0x648>
 8003e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e42:	2000      	movs	r0, #0
 8003e44:	4911      	ldr	r1, [pc, #68]	; (8003e8c <_dtoa_r+0x5ac>)
 8003e46:	f7fc f98f 	bl	8000168 <__aeabi_dsub>
 8003e4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e4e:	f7fc fdb5 	bl	80009bc <__aeabi_dcmplt>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	f040 80b7 	bne.w	8003fc6 <_dtoa_r+0x6e6>
 8003e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e5a:	429f      	cmp	r7, r3
 8003e5c:	f43f af7a 	beq.w	8003d54 <_dtoa_r+0x474>
 8003e60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e64:	2200      	movs	r2, #0
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <_dtoa_r+0x5b0>)
 8003e68:	f7fc fb36 	bl	80004d8 <__aeabi_dmul>
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <_dtoa_r+0x5b0>)
 8003e78:	f7fc fb2e 	bl	80004d8 <__aeabi_dmul>
 8003e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e80:	e7c3      	b.n	8003e0a <_dtoa_r+0x52a>
 8003e82:	bf00      	nop
 8003e84:	08005e20 	.word	0x08005e20
 8003e88:	08005df8 	.word	0x08005df8
 8003e8c:	3ff00000 	.word	0x3ff00000
 8003e90:	40240000 	.word	0x40240000
 8003e94:	401c0000 	.word	0x401c0000
 8003e98:	40140000 	.word	0x40140000
 8003e9c:	3fe00000 	.word	0x3fe00000
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	4639      	mov	r1, r7
 8003ea4:	f7fc fb18 	bl	80004d8 <__aeabi_dmul>
 8003ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003eaa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003eae:	9c03      	ldr	r4, [sp, #12]
 8003eb0:	9314      	str	r3, [sp, #80]	; 0x50
 8003eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eb6:	f7fc fdbf 	bl	8000a38 <__aeabi_d2iz>
 8003eba:	9015      	str	r0, [sp, #84]	; 0x54
 8003ebc:	f7fc faa2 	bl	8000404 <__aeabi_i2d>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ec8:	f7fc f94e 	bl	8000168 <__aeabi_dsub>
 8003ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ece:	4606      	mov	r6, r0
 8003ed0:	3330      	adds	r3, #48	; 0x30
 8003ed2:	f804 3b01 	strb.w	r3, [r4], #1
 8003ed6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ed8:	460f      	mov	r7, r1
 8003eda:	429c      	cmp	r4, r3
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	d124      	bne.n	8003f2c <_dtoa_r+0x64c>
 8003ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ee6:	4bb0      	ldr	r3, [pc, #704]	; (80041a8 <_dtoa_r+0x8c8>)
 8003ee8:	f7fc f940 	bl	800016c <__adddf3>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	f7fc fd80 	bl	80009f8 <__aeabi_dcmpgt>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d163      	bne.n	8003fc4 <_dtoa_r+0x6e4>
 8003efc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f00:	2000      	movs	r0, #0
 8003f02:	49a9      	ldr	r1, [pc, #676]	; (80041a8 <_dtoa_r+0x8c8>)
 8003f04:	f7fc f930 	bl	8000168 <__aeabi_dsub>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	4639      	mov	r1, r7
 8003f10:	f7fc fd54 	bl	80009bc <__aeabi_dcmplt>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	f43f af1d 	beq.w	8003d54 <_dtoa_r+0x474>
 8003f1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f1c:	1e7b      	subs	r3, r7, #1
 8003f1e:	9314      	str	r3, [sp, #80]	; 0x50
 8003f20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d0f8      	beq.n	8003f1a <_dtoa_r+0x63a>
 8003f28:	46c2      	mov	sl, r8
 8003f2a:	e03b      	b.n	8003fa4 <_dtoa_r+0x6c4>
 8003f2c:	4b9f      	ldr	r3, [pc, #636]	; (80041ac <_dtoa_r+0x8cc>)
 8003f2e:	f7fc fad3 	bl	80004d8 <__aeabi_dmul>
 8003f32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f36:	e7bc      	b.n	8003eb2 <_dtoa_r+0x5d2>
 8003f38:	9f03      	ldr	r7, [sp, #12]
 8003f3a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003f3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f42:	4640      	mov	r0, r8
 8003f44:	4649      	mov	r1, r9
 8003f46:	f7fc fbf1 	bl	800072c <__aeabi_ddiv>
 8003f4a:	f7fc fd75 	bl	8000a38 <__aeabi_d2iz>
 8003f4e:	4604      	mov	r4, r0
 8003f50:	f7fc fa58 	bl	8000404 <__aeabi_i2d>
 8003f54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f58:	f7fc fabe 	bl	80004d8 <__aeabi_dmul>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4640      	mov	r0, r8
 8003f62:	4649      	mov	r1, r9
 8003f64:	f7fc f900 	bl	8000168 <__aeabi_dsub>
 8003f68:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003f6c:	f807 6b01 	strb.w	r6, [r7], #1
 8003f70:	9e03      	ldr	r6, [sp, #12]
 8003f72:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003f76:	1bbe      	subs	r6, r7, r6
 8003f78:	45b4      	cmp	ip, r6
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	d136      	bne.n	8003fee <_dtoa_r+0x70e>
 8003f80:	f7fc f8f4 	bl	800016c <__adddf3>
 8003f84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f88:	4680      	mov	r8, r0
 8003f8a:	4689      	mov	r9, r1
 8003f8c:	f7fc fd34 	bl	80009f8 <__aeabi_dcmpgt>
 8003f90:	bb58      	cbnz	r0, 8003fea <_dtoa_r+0x70a>
 8003f92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f96:	4640      	mov	r0, r8
 8003f98:	4649      	mov	r1, r9
 8003f9a:	f7fc fd05 	bl	80009a8 <__aeabi_dcmpeq>
 8003f9e:	b108      	cbz	r0, 8003fa4 <_dtoa_r+0x6c4>
 8003fa0:	07e1      	lsls	r1, r4, #31
 8003fa2:	d422      	bmi.n	8003fea <_dtoa_r+0x70a>
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	f000 faf0 	bl	800458c <_Bfree>
 8003fac:	2300      	movs	r3, #0
 8003fae:	703b      	strb	r3, [r7, #0]
 8003fb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003fb2:	f10a 0001 	add.w	r0, sl, #1
 8003fb6:	6018      	str	r0, [r3, #0]
 8003fb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f43f acde 	beq.w	800397c <_dtoa_r+0x9c>
 8003fc0:	601f      	str	r7, [r3, #0]
 8003fc2:	e4db      	b.n	800397c <_dtoa_r+0x9c>
 8003fc4:	4627      	mov	r7, r4
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	461f      	mov	r7, r3
 8003fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fce:	2a39      	cmp	r2, #57	; 0x39
 8003fd0:	d107      	bne.n	8003fe2 <_dtoa_r+0x702>
 8003fd2:	9a03      	ldr	r2, [sp, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d1f7      	bne.n	8003fc8 <_dtoa_r+0x6e8>
 8003fd8:	2230      	movs	r2, #48	; 0x30
 8003fda:	9903      	ldr	r1, [sp, #12]
 8003fdc:	f108 0801 	add.w	r8, r8, #1
 8003fe0:	700a      	strb	r2, [r1, #0]
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	3201      	adds	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e79e      	b.n	8003f28 <_dtoa_r+0x648>
 8003fea:	46d0      	mov	r8, sl
 8003fec:	e7eb      	b.n	8003fc6 <_dtoa_r+0x6e6>
 8003fee:	2200      	movs	r2, #0
 8003ff0:	4b6e      	ldr	r3, [pc, #440]	; (80041ac <_dtoa_r+0x8cc>)
 8003ff2:	f7fc fa71 	bl	80004d8 <__aeabi_dmul>
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4680      	mov	r8, r0
 8003ffc:	4689      	mov	r9, r1
 8003ffe:	f7fc fcd3 	bl	80009a8 <__aeabi_dcmpeq>
 8004002:	2800      	cmp	r0, #0
 8004004:	d09b      	beq.n	8003f3e <_dtoa_r+0x65e>
 8004006:	e7cd      	b.n	8003fa4 <_dtoa_r+0x6c4>
 8004008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800400a:	2a00      	cmp	r2, #0
 800400c:	f000 80d0 	beq.w	80041b0 <_dtoa_r+0x8d0>
 8004010:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004012:	2a01      	cmp	r2, #1
 8004014:	f300 80ae 	bgt.w	8004174 <_dtoa_r+0x894>
 8004018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800401a:	2a00      	cmp	r2, #0
 800401c:	f000 80a6 	beq.w	800416c <_dtoa_r+0x88c>
 8004020:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004026:	9f06      	ldr	r7, [sp, #24]
 8004028:	9a06      	ldr	r2, [sp, #24]
 800402a:	2101      	movs	r1, #1
 800402c:	441a      	add	r2, r3
 800402e:	9206      	str	r2, [sp, #24]
 8004030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004032:	4628      	mov	r0, r5
 8004034:	441a      	add	r2, r3
 8004036:	9209      	str	r2, [sp, #36]	; 0x24
 8004038:	f000 fb5e 	bl	80046f8 <__i2b>
 800403c:	4606      	mov	r6, r0
 800403e:	2f00      	cmp	r7, #0
 8004040:	dd0c      	ble.n	800405c <_dtoa_r+0x77c>
 8004042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	dd09      	ble.n	800405c <_dtoa_r+0x77c>
 8004048:	42bb      	cmp	r3, r7
 800404a:	bfa8      	it	ge
 800404c:	463b      	movge	r3, r7
 800404e:	9a06      	ldr	r2, [sp, #24]
 8004050:	1aff      	subs	r7, r7, r3
 8004052:	1ad2      	subs	r2, r2, r3
 8004054:	9206      	str	r2, [sp, #24]
 8004056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	9309      	str	r3, [sp, #36]	; 0x24
 800405c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800405e:	b1f3      	cbz	r3, 800409e <_dtoa_r+0x7be>
 8004060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80a8 	beq.w	80041b8 <_dtoa_r+0x8d8>
 8004068:	2c00      	cmp	r4, #0
 800406a:	dd10      	ble.n	800408e <_dtoa_r+0x7ae>
 800406c:	4631      	mov	r1, r6
 800406e:	4622      	mov	r2, r4
 8004070:	4628      	mov	r0, r5
 8004072:	f000 fbff 	bl	8004874 <__pow5mult>
 8004076:	465a      	mov	r2, fp
 8004078:	4601      	mov	r1, r0
 800407a:	4606      	mov	r6, r0
 800407c:	4628      	mov	r0, r5
 800407e:	f000 fb51 	bl	8004724 <__multiply>
 8004082:	4680      	mov	r8, r0
 8004084:	4659      	mov	r1, fp
 8004086:	4628      	mov	r0, r5
 8004088:	f000 fa80 	bl	800458c <_Bfree>
 800408c:	46c3      	mov	fp, r8
 800408e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004090:	1b1a      	subs	r2, r3, r4
 8004092:	d004      	beq.n	800409e <_dtoa_r+0x7be>
 8004094:	4659      	mov	r1, fp
 8004096:	4628      	mov	r0, r5
 8004098:	f000 fbec 	bl	8004874 <__pow5mult>
 800409c:	4683      	mov	fp, r0
 800409e:	2101      	movs	r1, #1
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 fb29 	bl	80046f8 <__i2b>
 80040a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040a8:	4604      	mov	r4, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f340 8086 	ble.w	80041bc <_dtoa_r+0x8dc>
 80040b0:	461a      	mov	r2, r3
 80040b2:	4601      	mov	r1, r0
 80040b4:	4628      	mov	r0, r5
 80040b6:	f000 fbdd 	bl	8004874 <__pow5mult>
 80040ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040bc:	4604      	mov	r4, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	dd7f      	ble.n	80041c2 <_dtoa_r+0x8e2>
 80040c2:	f04f 0800 	mov.w	r8, #0
 80040c6:	6923      	ldr	r3, [r4, #16]
 80040c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80040cc:	6918      	ldr	r0, [r3, #16]
 80040ce:	f000 fac5 	bl	800465c <__hi0bits>
 80040d2:	f1c0 0020 	rsb	r0, r0, #32
 80040d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d8:	4418      	add	r0, r3
 80040da:	f010 001f 	ands.w	r0, r0, #31
 80040de:	f000 8092 	beq.w	8004206 <_dtoa_r+0x926>
 80040e2:	f1c0 0320 	rsb	r3, r0, #32
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	f340 808a 	ble.w	8004200 <_dtoa_r+0x920>
 80040ec:	f1c0 001c 	rsb	r0, r0, #28
 80040f0:	9b06      	ldr	r3, [sp, #24]
 80040f2:	4407      	add	r7, r0
 80040f4:	4403      	add	r3, r0
 80040f6:	9306      	str	r3, [sp, #24]
 80040f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040fa:	4403      	add	r3, r0
 80040fc:	9309      	str	r3, [sp, #36]	; 0x24
 80040fe:	9b06      	ldr	r3, [sp, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	dd05      	ble.n	8004110 <_dtoa_r+0x830>
 8004104:	4659      	mov	r1, fp
 8004106:	461a      	mov	r2, r3
 8004108:	4628      	mov	r0, r5
 800410a:	f000 fc0d 	bl	8004928 <__lshift>
 800410e:	4683      	mov	fp, r0
 8004110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	dd05      	ble.n	8004122 <_dtoa_r+0x842>
 8004116:	4621      	mov	r1, r4
 8004118:	461a      	mov	r2, r3
 800411a:	4628      	mov	r0, r5
 800411c:	f000 fc04 	bl	8004928 <__lshift>
 8004120:	4604      	mov	r4, r0
 8004122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d070      	beq.n	800420a <_dtoa_r+0x92a>
 8004128:	4621      	mov	r1, r4
 800412a:	4658      	mov	r0, fp
 800412c:	f000 fc6c 	bl	8004a08 <__mcmp>
 8004130:	2800      	cmp	r0, #0
 8004132:	da6a      	bge.n	800420a <_dtoa_r+0x92a>
 8004134:	2300      	movs	r3, #0
 8004136:	4659      	mov	r1, fp
 8004138:	220a      	movs	r2, #10
 800413a:	4628      	mov	r0, r5
 800413c:	f000 fa48 	bl	80045d0 <__multadd>
 8004140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004142:	4683      	mov	fp, r0
 8004144:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8194 	beq.w	8004476 <_dtoa_r+0xb96>
 800414e:	4631      	mov	r1, r6
 8004150:	2300      	movs	r3, #0
 8004152:	220a      	movs	r2, #10
 8004154:	4628      	mov	r0, r5
 8004156:	f000 fa3b 	bl	80045d0 <__multadd>
 800415a:	f1b9 0f00 	cmp.w	r9, #0
 800415e:	4606      	mov	r6, r0
 8004160:	f300 8093 	bgt.w	800428a <_dtoa_r+0x9aa>
 8004164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004166:	2b02      	cmp	r3, #2
 8004168:	dc57      	bgt.n	800421a <_dtoa_r+0x93a>
 800416a:	e08e      	b.n	800428a <_dtoa_r+0x9aa>
 800416c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800416e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004172:	e757      	b.n	8004024 <_dtoa_r+0x744>
 8004174:	9b08      	ldr	r3, [sp, #32]
 8004176:	1e5c      	subs	r4, r3, #1
 8004178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800417a:	42a3      	cmp	r3, r4
 800417c:	bfb7      	itett	lt
 800417e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004180:	1b1c      	subge	r4, r3, r4
 8004182:	1ae2      	sublt	r2, r4, r3
 8004184:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004186:	bfbe      	ittt	lt
 8004188:	940a      	strlt	r4, [sp, #40]	; 0x28
 800418a:	189b      	addlt	r3, r3, r2
 800418c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800418e:	9b08      	ldr	r3, [sp, #32]
 8004190:	bfb8      	it	lt
 8004192:	2400      	movlt	r4, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	bfbb      	ittet	lt
 8004198:	9b06      	ldrlt	r3, [sp, #24]
 800419a:	9a08      	ldrlt	r2, [sp, #32]
 800419c:	9f06      	ldrge	r7, [sp, #24]
 800419e:	1a9f      	sublt	r7, r3, r2
 80041a0:	bfac      	ite	ge
 80041a2:	9b08      	ldrge	r3, [sp, #32]
 80041a4:	2300      	movlt	r3, #0
 80041a6:	e73f      	b.n	8004028 <_dtoa_r+0x748>
 80041a8:	3fe00000 	.word	0x3fe00000
 80041ac:	40240000 	.word	0x40240000
 80041b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80041b2:	9f06      	ldr	r7, [sp, #24]
 80041b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80041b6:	e742      	b.n	800403e <_dtoa_r+0x75e>
 80041b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041ba:	e76b      	b.n	8004094 <_dtoa_r+0x7b4>
 80041bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041be:	2b01      	cmp	r3, #1
 80041c0:	dc19      	bgt.n	80041f6 <_dtoa_r+0x916>
 80041c2:	9b04      	ldr	r3, [sp, #16]
 80041c4:	b9bb      	cbnz	r3, 80041f6 <_dtoa_r+0x916>
 80041c6:	9b05      	ldr	r3, [sp, #20]
 80041c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041cc:	b99b      	cbnz	r3, 80041f6 <_dtoa_r+0x916>
 80041ce:	9b05      	ldr	r3, [sp, #20]
 80041d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041d4:	0d1b      	lsrs	r3, r3, #20
 80041d6:	051b      	lsls	r3, r3, #20
 80041d8:	b183      	cbz	r3, 80041fc <_dtoa_r+0x91c>
 80041da:	f04f 0801 	mov.w	r8, #1
 80041de:	9b06      	ldr	r3, [sp, #24]
 80041e0:	3301      	adds	r3, #1
 80041e2:	9306      	str	r3, [sp, #24]
 80041e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e6:	3301      	adds	r3, #1
 80041e8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f47f af6a 	bne.w	80040c6 <_dtoa_r+0x7e6>
 80041f2:	2001      	movs	r0, #1
 80041f4:	e76f      	b.n	80040d6 <_dtoa_r+0x7f6>
 80041f6:	f04f 0800 	mov.w	r8, #0
 80041fa:	e7f6      	b.n	80041ea <_dtoa_r+0x90a>
 80041fc:	4698      	mov	r8, r3
 80041fe:	e7f4      	b.n	80041ea <_dtoa_r+0x90a>
 8004200:	f43f af7d 	beq.w	80040fe <_dtoa_r+0x81e>
 8004204:	4618      	mov	r0, r3
 8004206:	301c      	adds	r0, #28
 8004208:	e772      	b.n	80040f0 <_dtoa_r+0x810>
 800420a:	9b08      	ldr	r3, [sp, #32]
 800420c:	2b00      	cmp	r3, #0
 800420e:	dc36      	bgt.n	800427e <_dtoa_r+0x99e>
 8004210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004212:	2b02      	cmp	r3, #2
 8004214:	dd33      	ble.n	800427e <_dtoa_r+0x99e>
 8004216:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800421a:	f1b9 0f00 	cmp.w	r9, #0
 800421e:	d10d      	bne.n	800423c <_dtoa_r+0x95c>
 8004220:	4621      	mov	r1, r4
 8004222:	464b      	mov	r3, r9
 8004224:	2205      	movs	r2, #5
 8004226:	4628      	mov	r0, r5
 8004228:	f000 f9d2 	bl	80045d0 <__multadd>
 800422c:	4601      	mov	r1, r0
 800422e:	4604      	mov	r4, r0
 8004230:	4658      	mov	r0, fp
 8004232:	f000 fbe9 	bl	8004a08 <__mcmp>
 8004236:	2800      	cmp	r0, #0
 8004238:	f73f adb8 	bgt.w	8003dac <_dtoa_r+0x4cc>
 800423c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800423e:	9f03      	ldr	r7, [sp, #12]
 8004240:	ea6f 0a03 	mvn.w	sl, r3
 8004244:	f04f 0800 	mov.w	r8, #0
 8004248:	4621      	mov	r1, r4
 800424a:	4628      	mov	r0, r5
 800424c:	f000 f99e 	bl	800458c <_Bfree>
 8004250:	2e00      	cmp	r6, #0
 8004252:	f43f aea7 	beq.w	8003fa4 <_dtoa_r+0x6c4>
 8004256:	f1b8 0f00 	cmp.w	r8, #0
 800425a:	d005      	beq.n	8004268 <_dtoa_r+0x988>
 800425c:	45b0      	cmp	r8, r6
 800425e:	d003      	beq.n	8004268 <_dtoa_r+0x988>
 8004260:	4641      	mov	r1, r8
 8004262:	4628      	mov	r0, r5
 8004264:	f000 f992 	bl	800458c <_Bfree>
 8004268:	4631      	mov	r1, r6
 800426a:	4628      	mov	r0, r5
 800426c:	f000 f98e 	bl	800458c <_Bfree>
 8004270:	e698      	b.n	8003fa4 <_dtoa_r+0x6c4>
 8004272:	2400      	movs	r4, #0
 8004274:	4626      	mov	r6, r4
 8004276:	e7e1      	b.n	800423c <_dtoa_r+0x95c>
 8004278:	46c2      	mov	sl, r8
 800427a:	4626      	mov	r6, r4
 800427c:	e596      	b.n	8003dac <_dtoa_r+0x4cc>
 800427e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80fd 	beq.w	8004484 <_dtoa_r+0xba4>
 800428a:	2f00      	cmp	r7, #0
 800428c:	dd05      	ble.n	800429a <_dtoa_r+0x9ba>
 800428e:	4631      	mov	r1, r6
 8004290:	463a      	mov	r2, r7
 8004292:	4628      	mov	r0, r5
 8004294:	f000 fb48 	bl	8004928 <__lshift>
 8004298:	4606      	mov	r6, r0
 800429a:	f1b8 0f00 	cmp.w	r8, #0
 800429e:	d05c      	beq.n	800435a <_dtoa_r+0xa7a>
 80042a0:	4628      	mov	r0, r5
 80042a2:	6871      	ldr	r1, [r6, #4]
 80042a4:	f000 f932 	bl	800450c <_Balloc>
 80042a8:	4607      	mov	r7, r0
 80042aa:	b928      	cbnz	r0, 80042b8 <_dtoa_r+0x9d8>
 80042ac:	4602      	mov	r2, r0
 80042ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80042b2:	4b7f      	ldr	r3, [pc, #508]	; (80044b0 <_dtoa_r+0xbd0>)
 80042b4:	f7ff bb28 	b.w	8003908 <_dtoa_r+0x28>
 80042b8:	6932      	ldr	r2, [r6, #16]
 80042ba:	f106 010c 	add.w	r1, r6, #12
 80042be:	3202      	adds	r2, #2
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	300c      	adds	r0, #12
 80042c4:	f000 f914 	bl	80044f0 <memcpy>
 80042c8:	2201      	movs	r2, #1
 80042ca:	4639      	mov	r1, r7
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 fb2b 	bl	8004928 <__lshift>
 80042d2:	46b0      	mov	r8, r6
 80042d4:	4606      	mov	r6, r0
 80042d6:	9b03      	ldr	r3, [sp, #12]
 80042d8:	3301      	adds	r3, #1
 80042da:	9308      	str	r3, [sp, #32]
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	444b      	add	r3, r9
 80042e0:	930a      	str	r3, [sp, #40]	; 0x28
 80042e2:	9b04      	ldr	r3, [sp, #16]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ea:	9b08      	ldr	r3, [sp, #32]
 80042ec:	4621      	mov	r1, r4
 80042ee:	3b01      	subs	r3, #1
 80042f0:	4658      	mov	r0, fp
 80042f2:	9304      	str	r3, [sp, #16]
 80042f4:	f7ff fa66 	bl	80037c4 <quorem>
 80042f8:	4603      	mov	r3, r0
 80042fa:	4641      	mov	r1, r8
 80042fc:	3330      	adds	r3, #48	; 0x30
 80042fe:	9006      	str	r0, [sp, #24]
 8004300:	4658      	mov	r0, fp
 8004302:	930b      	str	r3, [sp, #44]	; 0x2c
 8004304:	f000 fb80 	bl	8004a08 <__mcmp>
 8004308:	4632      	mov	r2, r6
 800430a:	4681      	mov	r9, r0
 800430c:	4621      	mov	r1, r4
 800430e:	4628      	mov	r0, r5
 8004310:	f000 fb96 	bl	8004a40 <__mdiff>
 8004314:	68c2      	ldr	r2, [r0, #12]
 8004316:	4607      	mov	r7, r0
 8004318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800431a:	bb02      	cbnz	r2, 800435e <_dtoa_r+0xa7e>
 800431c:	4601      	mov	r1, r0
 800431e:	4658      	mov	r0, fp
 8004320:	f000 fb72 	bl	8004a08 <__mcmp>
 8004324:	4602      	mov	r2, r0
 8004326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004328:	4639      	mov	r1, r7
 800432a:	4628      	mov	r0, r5
 800432c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004330:	f000 f92c 	bl	800458c <_Bfree>
 8004334:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004338:	9f08      	ldr	r7, [sp, #32]
 800433a:	ea43 0102 	orr.w	r1, r3, r2
 800433e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004340:	430b      	orrs	r3, r1
 8004342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004344:	d10d      	bne.n	8004362 <_dtoa_r+0xa82>
 8004346:	2b39      	cmp	r3, #57	; 0x39
 8004348:	d029      	beq.n	800439e <_dtoa_r+0xabe>
 800434a:	f1b9 0f00 	cmp.w	r9, #0
 800434e:	dd01      	ble.n	8004354 <_dtoa_r+0xa74>
 8004350:	9b06      	ldr	r3, [sp, #24]
 8004352:	3331      	adds	r3, #49	; 0x31
 8004354:	9a04      	ldr	r2, [sp, #16]
 8004356:	7013      	strb	r3, [r2, #0]
 8004358:	e776      	b.n	8004248 <_dtoa_r+0x968>
 800435a:	4630      	mov	r0, r6
 800435c:	e7b9      	b.n	80042d2 <_dtoa_r+0x9f2>
 800435e:	2201      	movs	r2, #1
 8004360:	e7e2      	b.n	8004328 <_dtoa_r+0xa48>
 8004362:	f1b9 0f00 	cmp.w	r9, #0
 8004366:	db06      	blt.n	8004376 <_dtoa_r+0xa96>
 8004368:	9922      	ldr	r1, [sp, #136]	; 0x88
 800436a:	ea41 0909 	orr.w	r9, r1, r9
 800436e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004370:	ea59 0101 	orrs.w	r1, r9, r1
 8004374:	d120      	bne.n	80043b8 <_dtoa_r+0xad8>
 8004376:	2a00      	cmp	r2, #0
 8004378:	ddec      	ble.n	8004354 <_dtoa_r+0xa74>
 800437a:	4659      	mov	r1, fp
 800437c:	2201      	movs	r2, #1
 800437e:	4628      	mov	r0, r5
 8004380:	9308      	str	r3, [sp, #32]
 8004382:	f000 fad1 	bl	8004928 <__lshift>
 8004386:	4621      	mov	r1, r4
 8004388:	4683      	mov	fp, r0
 800438a:	f000 fb3d 	bl	8004a08 <__mcmp>
 800438e:	2800      	cmp	r0, #0
 8004390:	9b08      	ldr	r3, [sp, #32]
 8004392:	dc02      	bgt.n	800439a <_dtoa_r+0xaba>
 8004394:	d1de      	bne.n	8004354 <_dtoa_r+0xa74>
 8004396:	07da      	lsls	r2, r3, #31
 8004398:	d5dc      	bpl.n	8004354 <_dtoa_r+0xa74>
 800439a:	2b39      	cmp	r3, #57	; 0x39
 800439c:	d1d8      	bne.n	8004350 <_dtoa_r+0xa70>
 800439e:	2339      	movs	r3, #57	; 0x39
 80043a0:	9a04      	ldr	r2, [sp, #16]
 80043a2:	7013      	strb	r3, [r2, #0]
 80043a4:	463b      	mov	r3, r7
 80043a6:	461f      	mov	r7, r3
 80043a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	2a39      	cmp	r2, #57	; 0x39
 80043b0:	d050      	beq.n	8004454 <_dtoa_r+0xb74>
 80043b2:	3201      	adds	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e747      	b.n	8004248 <_dtoa_r+0x968>
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	dd03      	ble.n	80043c4 <_dtoa_r+0xae4>
 80043bc:	2b39      	cmp	r3, #57	; 0x39
 80043be:	d0ee      	beq.n	800439e <_dtoa_r+0xabe>
 80043c0:	3301      	adds	r3, #1
 80043c2:	e7c7      	b.n	8004354 <_dtoa_r+0xa74>
 80043c4:	9a08      	ldr	r2, [sp, #32]
 80043c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80043cc:	428a      	cmp	r2, r1
 80043ce:	d02a      	beq.n	8004426 <_dtoa_r+0xb46>
 80043d0:	4659      	mov	r1, fp
 80043d2:	2300      	movs	r3, #0
 80043d4:	220a      	movs	r2, #10
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 f8fa 	bl	80045d0 <__multadd>
 80043dc:	45b0      	cmp	r8, r6
 80043de:	4683      	mov	fp, r0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	f04f 020a 	mov.w	r2, #10
 80043e8:	4641      	mov	r1, r8
 80043ea:	4628      	mov	r0, r5
 80043ec:	d107      	bne.n	80043fe <_dtoa_r+0xb1e>
 80043ee:	f000 f8ef 	bl	80045d0 <__multadd>
 80043f2:	4680      	mov	r8, r0
 80043f4:	4606      	mov	r6, r0
 80043f6:	9b08      	ldr	r3, [sp, #32]
 80043f8:	3301      	adds	r3, #1
 80043fa:	9308      	str	r3, [sp, #32]
 80043fc:	e775      	b.n	80042ea <_dtoa_r+0xa0a>
 80043fe:	f000 f8e7 	bl	80045d0 <__multadd>
 8004402:	4631      	mov	r1, r6
 8004404:	4680      	mov	r8, r0
 8004406:	2300      	movs	r3, #0
 8004408:	220a      	movs	r2, #10
 800440a:	4628      	mov	r0, r5
 800440c:	f000 f8e0 	bl	80045d0 <__multadd>
 8004410:	4606      	mov	r6, r0
 8004412:	e7f0      	b.n	80043f6 <_dtoa_r+0xb16>
 8004414:	f1b9 0f00 	cmp.w	r9, #0
 8004418:	bfcc      	ite	gt
 800441a:	464f      	movgt	r7, r9
 800441c:	2701      	movle	r7, #1
 800441e:	f04f 0800 	mov.w	r8, #0
 8004422:	9a03      	ldr	r2, [sp, #12]
 8004424:	4417      	add	r7, r2
 8004426:	4659      	mov	r1, fp
 8004428:	2201      	movs	r2, #1
 800442a:	4628      	mov	r0, r5
 800442c:	9308      	str	r3, [sp, #32]
 800442e:	f000 fa7b 	bl	8004928 <__lshift>
 8004432:	4621      	mov	r1, r4
 8004434:	4683      	mov	fp, r0
 8004436:	f000 fae7 	bl	8004a08 <__mcmp>
 800443a:	2800      	cmp	r0, #0
 800443c:	dcb2      	bgt.n	80043a4 <_dtoa_r+0xac4>
 800443e:	d102      	bne.n	8004446 <_dtoa_r+0xb66>
 8004440:	9b08      	ldr	r3, [sp, #32]
 8004442:	07db      	lsls	r3, r3, #31
 8004444:	d4ae      	bmi.n	80043a4 <_dtoa_r+0xac4>
 8004446:	463b      	mov	r3, r7
 8004448:	461f      	mov	r7, r3
 800444a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800444e:	2a30      	cmp	r2, #48	; 0x30
 8004450:	d0fa      	beq.n	8004448 <_dtoa_r+0xb68>
 8004452:	e6f9      	b.n	8004248 <_dtoa_r+0x968>
 8004454:	9a03      	ldr	r2, [sp, #12]
 8004456:	429a      	cmp	r2, r3
 8004458:	d1a5      	bne.n	80043a6 <_dtoa_r+0xac6>
 800445a:	2331      	movs	r3, #49	; 0x31
 800445c:	f10a 0a01 	add.w	sl, sl, #1
 8004460:	e779      	b.n	8004356 <_dtoa_r+0xa76>
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <_dtoa_r+0xbd4>)
 8004464:	f7ff baa8 	b.w	80039b8 <_dtoa_r+0xd8>
 8004468:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800446a:	2b00      	cmp	r3, #0
 800446c:	f47f aa81 	bne.w	8003972 <_dtoa_r+0x92>
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <_dtoa_r+0xbd8>)
 8004472:	f7ff baa1 	b.w	80039b8 <_dtoa_r+0xd8>
 8004476:	f1b9 0f00 	cmp.w	r9, #0
 800447a:	dc03      	bgt.n	8004484 <_dtoa_r+0xba4>
 800447c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800447e:	2b02      	cmp	r3, #2
 8004480:	f73f aecb 	bgt.w	800421a <_dtoa_r+0x93a>
 8004484:	9f03      	ldr	r7, [sp, #12]
 8004486:	4621      	mov	r1, r4
 8004488:	4658      	mov	r0, fp
 800448a:	f7ff f99b 	bl	80037c4 <quorem>
 800448e:	9a03      	ldr	r2, [sp, #12]
 8004490:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004494:	f807 3b01 	strb.w	r3, [r7], #1
 8004498:	1aba      	subs	r2, r7, r2
 800449a:	4591      	cmp	r9, r2
 800449c:	ddba      	ble.n	8004414 <_dtoa_r+0xb34>
 800449e:	4659      	mov	r1, fp
 80044a0:	2300      	movs	r3, #0
 80044a2:	220a      	movs	r2, #10
 80044a4:	4628      	mov	r0, r5
 80044a6:	f000 f893 	bl	80045d0 <__multadd>
 80044aa:	4683      	mov	fp, r0
 80044ac:	e7eb      	b.n	8004486 <_dtoa_r+0xba6>
 80044ae:	bf00      	nop
 80044b0:	08005d87 	.word	0x08005d87
 80044b4:	08005ce4 	.word	0x08005ce4
 80044b8:	08005d08 	.word	0x08005d08

080044bc <_localeconv_r>:
 80044bc:	4800      	ldr	r0, [pc, #0]	; (80044c0 <_localeconv_r+0x4>)
 80044be:	4770      	bx	lr
 80044c0:	20000180 	.word	0x20000180

080044c4 <malloc>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	; (80044d0 <malloc+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f000 bc1d 	b.w	8004d08 <_malloc_r>
 80044ce:	bf00      	nop
 80044d0:	2000002c 	.word	0x2000002c

080044d4 <memchr>:
 80044d4:	4603      	mov	r3, r0
 80044d6:	b510      	push	{r4, lr}
 80044d8:	b2c9      	uxtb	r1, r1
 80044da:	4402      	add	r2, r0
 80044dc:	4293      	cmp	r3, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	d101      	bne.n	80044e6 <memchr+0x12>
 80044e2:	2000      	movs	r0, #0
 80044e4:	e003      	b.n	80044ee <memchr+0x1a>
 80044e6:	7804      	ldrb	r4, [r0, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	428c      	cmp	r4, r1
 80044ec:	d1f6      	bne.n	80044dc <memchr+0x8>
 80044ee:	bd10      	pop	{r4, pc}

080044f0 <memcpy>:
 80044f0:	440a      	add	r2, r1
 80044f2:	4291      	cmp	r1, r2
 80044f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044f8:	d100      	bne.n	80044fc <memcpy+0xc>
 80044fa:	4770      	bx	lr
 80044fc:	b510      	push	{r4, lr}
 80044fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004502:	4291      	cmp	r1, r2
 8004504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004508:	d1f9      	bne.n	80044fe <memcpy+0xe>
 800450a:	bd10      	pop	{r4, pc}

0800450c <_Balloc>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004510:	4604      	mov	r4, r0
 8004512:	460d      	mov	r5, r1
 8004514:	b976      	cbnz	r6, 8004534 <_Balloc+0x28>
 8004516:	2010      	movs	r0, #16
 8004518:	f7ff ffd4 	bl	80044c4 <malloc>
 800451c:	4602      	mov	r2, r0
 800451e:	6260      	str	r0, [r4, #36]	; 0x24
 8004520:	b920      	cbnz	r0, 800452c <_Balloc+0x20>
 8004522:	2166      	movs	r1, #102	; 0x66
 8004524:	4b17      	ldr	r3, [pc, #92]	; (8004584 <_Balloc+0x78>)
 8004526:	4818      	ldr	r0, [pc, #96]	; (8004588 <_Balloc+0x7c>)
 8004528:	f000 fdce 	bl	80050c8 <__assert_func>
 800452c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004530:	6006      	str	r6, [r0, #0]
 8004532:	60c6      	str	r6, [r0, #12]
 8004534:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004536:	68f3      	ldr	r3, [r6, #12]
 8004538:	b183      	cbz	r3, 800455c <_Balloc+0x50>
 800453a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004542:	b9b8      	cbnz	r0, 8004574 <_Balloc+0x68>
 8004544:	2101      	movs	r1, #1
 8004546:	fa01 f605 	lsl.w	r6, r1, r5
 800454a:	1d72      	adds	r2, r6, #5
 800454c:	4620      	mov	r0, r4
 800454e:	0092      	lsls	r2, r2, #2
 8004550:	f000 fb5e 	bl	8004c10 <_calloc_r>
 8004554:	b160      	cbz	r0, 8004570 <_Balloc+0x64>
 8004556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800455a:	e00e      	b.n	800457a <_Balloc+0x6e>
 800455c:	2221      	movs	r2, #33	; 0x21
 800455e:	2104      	movs	r1, #4
 8004560:	4620      	mov	r0, r4
 8004562:	f000 fb55 	bl	8004c10 <_calloc_r>
 8004566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004568:	60f0      	str	r0, [r6, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e4      	bne.n	800453a <_Balloc+0x2e>
 8004570:	2000      	movs	r0, #0
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	6802      	ldr	r2, [r0, #0]
 8004576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800457a:	2300      	movs	r3, #0
 800457c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004580:	e7f7      	b.n	8004572 <_Balloc+0x66>
 8004582:	bf00      	nop
 8004584:	08005d15 	.word	0x08005d15
 8004588:	08005d98 	.word	0x08005d98

0800458c <_Bfree>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004590:	4605      	mov	r5, r0
 8004592:	460c      	mov	r4, r1
 8004594:	b976      	cbnz	r6, 80045b4 <_Bfree+0x28>
 8004596:	2010      	movs	r0, #16
 8004598:	f7ff ff94 	bl	80044c4 <malloc>
 800459c:	4602      	mov	r2, r0
 800459e:	6268      	str	r0, [r5, #36]	; 0x24
 80045a0:	b920      	cbnz	r0, 80045ac <_Bfree+0x20>
 80045a2:	218a      	movs	r1, #138	; 0x8a
 80045a4:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <_Bfree+0x3c>)
 80045a6:	4809      	ldr	r0, [pc, #36]	; (80045cc <_Bfree+0x40>)
 80045a8:	f000 fd8e 	bl	80050c8 <__assert_func>
 80045ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045b0:	6006      	str	r6, [r0, #0]
 80045b2:	60c6      	str	r6, [r0, #12]
 80045b4:	b13c      	cbz	r4, 80045c6 <_Bfree+0x3a>
 80045b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045b8:	6862      	ldr	r2, [r4, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045c0:	6021      	str	r1, [r4, #0]
 80045c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	08005d15 	.word	0x08005d15
 80045cc:	08005d98 	.word	0x08005d98

080045d0 <__multadd>:
 80045d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d4:	4607      	mov	r7, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	461e      	mov	r6, r3
 80045da:	2000      	movs	r0, #0
 80045dc:	690d      	ldr	r5, [r1, #16]
 80045de:	f101 0c14 	add.w	ip, r1, #20
 80045e2:	f8dc 3000 	ldr.w	r3, [ip]
 80045e6:	3001      	adds	r0, #1
 80045e8:	b299      	uxth	r1, r3
 80045ea:	fb02 6101 	mla	r1, r2, r1, r6
 80045ee:	0c1e      	lsrs	r6, r3, #16
 80045f0:	0c0b      	lsrs	r3, r1, #16
 80045f2:	fb02 3306 	mla	r3, r2, r6, r3
 80045f6:	b289      	uxth	r1, r1
 80045f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80045fc:	4285      	cmp	r5, r0
 80045fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004602:	f84c 1b04 	str.w	r1, [ip], #4
 8004606:	dcec      	bgt.n	80045e2 <__multadd+0x12>
 8004608:	b30e      	cbz	r6, 800464e <__multadd+0x7e>
 800460a:	68a3      	ldr	r3, [r4, #8]
 800460c:	42ab      	cmp	r3, r5
 800460e:	dc19      	bgt.n	8004644 <__multadd+0x74>
 8004610:	6861      	ldr	r1, [r4, #4]
 8004612:	4638      	mov	r0, r7
 8004614:	3101      	adds	r1, #1
 8004616:	f7ff ff79 	bl	800450c <_Balloc>
 800461a:	4680      	mov	r8, r0
 800461c:	b928      	cbnz	r0, 800462a <__multadd+0x5a>
 800461e:	4602      	mov	r2, r0
 8004620:	21b5      	movs	r1, #181	; 0xb5
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <__multadd+0x84>)
 8004624:	480c      	ldr	r0, [pc, #48]	; (8004658 <__multadd+0x88>)
 8004626:	f000 fd4f 	bl	80050c8 <__assert_func>
 800462a:	6922      	ldr	r2, [r4, #16]
 800462c:	f104 010c 	add.w	r1, r4, #12
 8004630:	3202      	adds	r2, #2
 8004632:	0092      	lsls	r2, r2, #2
 8004634:	300c      	adds	r0, #12
 8004636:	f7ff ff5b 	bl	80044f0 <memcpy>
 800463a:	4621      	mov	r1, r4
 800463c:	4638      	mov	r0, r7
 800463e:	f7ff ffa5 	bl	800458c <_Bfree>
 8004642:	4644      	mov	r4, r8
 8004644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004648:	3501      	adds	r5, #1
 800464a:	615e      	str	r6, [r3, #20]
 800464c:	6125      	str	r5, [r4, #16]
 800464e:	4620      	mov	r0, r4
 8004650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004654:	08005d87 	.word	0x08005d87
 8004658:	08005d98 	.word	0x08005d98

0800465c <__hi0bits>:
 800465c:	0c02      	lsrs	r2, r0, #16
 800465e:	0412      	lsls	r2, r2, #16
 8004660:	4603      	mov	r3, r0
 8004662:	b9ca      	cbnz	r2, 8004698 <__hi0bits+0x3c>
 8004664:	0403      	lsls	r3, r0, #16
 8004666:	2010      	movs	r0, #16
 8004668:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800466c:	bf04      	itt	eq
 800466e:	021b      	lsleq	r3, r3, #8
 8004670:	3008      	addeq	r0, #8
 8004672:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004676:	bf04      	itt	eq
 8004678:	011b      	lsleq	r3, r3, #4
 800467a:	3004      	addeq	r0, #4
 800467c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004680:	bf04      	itt	eq
 8004682:	009b      	lsleq	r3, r3, #2
 8004684:	3002      	addeq	r0, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	db05      	blt.n	8004696 <__hi0bits+0x3a>
 800468a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800468e:	f100 0001 	add.w	r0, r0, #1
 8004692:	bf08      	it	eq
 8004694:	2020      	moveq	r0, #32
 8004696:	4770      	bx	lr
 8004698:	2000      	movs	r0, #0
 800469a:	e7e5      	b.n	8004668 <__hi0bits+0xc>

0800469c <__lo0bits>:
 800469c:	6803      	ldr	r3, [r0, #0]
 800469e:	4602      	mov	r2, r0
 80046a0:	f013 0007 	ands.w	r0, r3, #7
 80046a4:	d00b      	beq.n	80046be <__lo0bits+0x22>
 80046a6:	07d9      	lsls	r1, r3, #31
 80046a8:	d421      	bmi.n	80046ee <__lo0bits+0x52>
 80046aa:	0798      	lsls	r0, r3, #30
 80046ac:	bf49      	itett	mi
 80046ae:	085b      	lsrmi	r3, r3, #1
 80046b0:	089b      	lsrpl	r3, r3, #2
 80046b2:	2001      	movmi	r0, #1
 80046b4:	6013      	strmi	r3, [r2, #0]
 80046b6:	bf5c      	itt	pl
 80046b8:	2002      	movpl	r0, #2
 80046ba:	6013      	strpl	r3, [r2, #0]
 80046bc:	4770      	bx	lr
 80046be:	b299      	uxth	r1, r3
 80046c0:	b909      	cbnz	r1, 80046c6 <__lo0bits+0x2a>
 80046c2:	2010      	movs	r0, #16
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	b2d9      	uxtb	r1, r3
 80046c8:	b909      	cbnz	r1, 80046ce <__lo0bits+0x32>
 80046ca:	3008      	adds	r0, #8
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	0719      	lsls	r1, r3, #28
 80046d0:	bf04      	itt	eq
 80046d2:	091b      	lsreq	r3, r3, #4
 80046d4:	3004      	addeq	r0, #4
 80046d6:	0799      	lsls	r1, r3, #30
 80046d8:	bf04      	itt	eq
 80046da:	089b      	lsreq	r3, r3, #2
 80046dc:	3002      	addeq	r0, #2
 80046de:	07d9      	lsls	r1, r3, #31
 80046e0:	d403      	bmi.n	80046ea <__lo0bits+0x4e>
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	f100 0001 	add.w	r0, r0, #1
 80046e8:	d003      	beq.n	80046f2 <__lo0bits+0x56>
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4770      	bx	lr
 80046ee:	2000      	movs	r0, #0
 80046f0:	4770      	bx	lr
 80046f2:	2020      	movs	r0, #32
 80046f4:	4770      	bx	lr
	...

080046f8 <__i2b>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	460c      	mov	r4, r1
 80046fc:	2101      	movs	r1, #1
 80046fe:	f7ff ff05 	bl	800450c <_Balloc>
 8004702:	4602      	mov	r2, r0
 8004704:	b928      	cbnz	r0, 8004712 <__i2b+0x1a>
 8004706:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <__i2b+0x24>)
 800470c:	4804      	ldr	r0, [pc, #16]	; (8004720 <__i2b+0x28>)
 800470e:	f000 fcdb 	bl	80050c8 <__assert_func>
 8004712:	2301      	movs	r3, #1
 8004714:	6144      	str	r4, [r0, #20]
 8004716:	6103      	str	r3, [r0, #16]
 8004718:	bd10      	pop	{r4, pc}
 800471a:	bf00      	nop
 800471c:	08005d87 	.word	0x08005d87
 8004720:	08005d98 	.word	0x08005d98

08004724 <__multiply>:
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	4691      	mov	r9, r2
 800472a:	690a      	ldr	r2, [r1, #16]
 800472c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004730:	460c      	mov	r4, r1
 8004732:	429a      	cmp	r2, r3
 8004734:	bfbe      	ittt	lt
 8004736:	460b      	movlt	r3, r1
 8004738:	464c      	movlt	r4, r9
 800473a:	4699      	movlt	r9, r3
 800473c:	6927      	ldr	r7, [r4, #16]
 800473e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004742:	68a3      	ldr	r3, [r4, #8]
 8004744:	6861      	ldr	r1, [r4, #4]
 8004746:	eb07 060a 	add.w	r6, r7, sl
 800474a:	42b3      	cmp	r3, r6
 800474c:	b085      	sub	sp, #20
 800474e:	bfb8      	it	lt
 8004750:	3101      	addlt	r1, #1
 8004752:	f7ff fedb 	bl	800450c <_Balloc>
 8004756:	b930      	cbnz	r0, 8004766 <__multiply+0x42>
 8004758:	4602      	mov	r2, r0
 800475a:	f240 115d 	movw	r1, #349	; 0x15d
 800475e:	4b43      	ldr	r3, [pc, #268]	; (800486c <__multiply+0x148>)
 8004760:	4843      	ldr	r0, [pc, #268]	; (8004870 <__multiply+0x14c>)
 8004762:	f000 fcb1 	bl	80050c8 <__assert_func>
 8004766:	f100 0514 	add.w	r5, r0, #20
 800476a:	462b      	mov	r3, r5
 800476c:	2200      	movs	r2, #0
 800476e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004772:	4543      	cmp	r3, r8
 8004774:	d321      	bcc.n	80047ba <__multiply+0x96>
 8004776:	f104 0314 	add.w	r3, r4, #20
 800477a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800477e:	f109 0314 	add.w	r3, r9, #20
 8004782:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004786:	9202      	str	r2, [sp, #8]
 8004788:	1b3a      	subs	r2, r7, r4
 800478a:	3a15      	subs	r2, #21
 800478c:	f022 0203 	bic.w	r2, r2, #3
 8004790:	3204      	adds	r2, #4
 8004792:	f104 0115 	add.w	r1, r4, #21
 8004796:	428f      	cmp	r7, r1
 8004798:	bf38      	it	cc
 800479a:	2204      	movcc	r2, #4
 800479c:	9201      	str	r2, [sp, #4]
 800479e:	9a02      	ldr	r2, [sp, #8]
 80047a0:	9303      	str	r3, [sp, #12]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d80c      	bhi.n	80047c0 <__multiply+0x9c>
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	dd03      	ble.n	80047b2 <__multiply+0x8e>
 80047aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d059      	beq.n	8004866 <__multiply+0x142>
 80047b2:	6106      	str	r6, [r0, #16]
 80047b4:	b005      	add	sp, #20
 80047b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ba:	f843 2b04 	str.w	r2, [r3], #4
 80047be:	e7d8      	b.n	8004772 <__multiply+0x4e>
 80047c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80047c4:	f1ba 0f00 	cmp.w	sl, #0
 80047c8:	d023      	beq.n	8004812 <__multiply+0xee>
 80047ca:	46a9      	mov	r9, r5
 80047cc:	f04f 0c00 	mov.w	ip, #0
 80047d0:	f104 0e14 	add.w	lr, r4, #20
 80047d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80047d8:	f8d9 1000 	ldr.w	r1, [r9]
 80047dc:	fa1f fb82 	uxth.w	fp, r2
 80047e0:	b289      	uxth	r1, r1
 80047e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80047e6:	4461      	add	r1, ip
 80047e8:	f8d9 c000 	ldr.w	ip, [r9]
 80047ec:	0c12      	lsrs	r2, r2, #16
 80047ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80047f2:	fb0a c202 	mla	r2, sl, r2, ip
 80047f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80047fa:	b289      	uxth	r1, r1
 80047fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004800:	4577      	cmp	r7, lr
 8004802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004806:	f849 1b04 	str.w	r1, [r9], #4
 800480a:	d8e3      	bhi.n	80047d4 <__multiply+0xb0>
 800480c:	9a01      	ldr	r2, [sp, #4]
 800480e:	f845 c002 	str.w	ip, [r5, r2]
 8004812:	9a03      	ldr	r2, [sp, #12]
 8004814:	3304      	adds	r3, #4
 8004816:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800481a:	f1b9 0f00 	cmp.w	r9, #0
 800481e:	d020      	beq.n	8004862 <__multiply+0x13e>
 8004820:	46ae      	mov	lr, r5
 8004822:	f04f 0a00 	mov.w	sl, #0
 8004826:	6829      	ldr	r1, [r5, #0]
 8004828:	f104 0c14 	add.w	ip, r4, #20
 800482c:	f8bc b000 	ldrh.w	fp, [ip]
 8004830:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004834:	b289      	uxth	r1, r1
 8004836:	fb09 220b 	mla	r2, r9, fp, r2
 800483a:	4492      	add	sl, r2
 800483c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004840:	f84e 1b04 	str.w	r1, [lr], #4
 8004844:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004848:	f8be 1000 	ldrh.w	r1, [lr]
 800484c:	0c12      	lsrs	r2, r2, #16
 800484e:	fb09 1102 	mla	r1, r9, r2, r1
 8004852:	4567      	cmp	r7, ip
 8004854:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004858:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800485c:	d8e6      	bhi.n	800482c <__multiply+0x108>
 800485e:	9a01      	ldr	r2, [sp, #4]
 8004860:	50a9      	str	r1, [r5, r2]
 8004862:	3504      	adds	r5, #4
 8004864:	e79b      	b.n	800479e <__multiply+0x7a>
 8004866:	3e01      	subs	r6, #1
 8004868:	e79d      	b.n	80047a6 <__multiply+0x82>
 800486a:	bf00      	nop
 800486c:	08005d87 	.word	0x08005d87
 8004870:	08005d98 	.word	0x08005d98

08004874 <__pow5mult>:
 8004874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004878:	4615      	mov	r5, r2
 800487a:	f012 0203 	ands.w	r2, r2, #3
 800487e:	4606      	mov	r6, r0
 8004880:	460f      	mov	r7, r1
 8004882:	d007      	beq.n	8004894 <__pow5mult+0x20>
 8004884:	4c25      	ldr	r4, [pc, #148]	; (800491c <__pow5mult+0xa8>)
 8004886:	3a01      	subs	r2, #1
 8004888:	2300      	movs	r3, #0
 800488a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800488e:	f7ff fe9f 	bl	80045d0 <__multadd>
 8004892:	4607      	mov	r7, r0
 8004894:	10ad      	asrs	r5, r5, #2
 8004896:	d03d      	beq.n	8004914 <__pow5mult+0xa0>
 8004898:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800489a:	b97c      	cbnz	r4, 80048bc <__pow5mult+0x48>
 800489c:	2010      	movs	r0, #16
 800489e:	f7ff fe11 	bl	80044c4 <malloc>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6270      	str	r0, [r6, #36]	; 0x24
 80048a6:	b928      	cbnz	r0, 80048b4 <__pow5mult+0x40>
 80048a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80048ac:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <__pow5mult+0xac>)
 80048ae:	481d      	ldr	r0, [pc, #116]	; (8004924 <__pow5mult+0xb0>)
 80048b0:	f000 fc0a 	bl	80050c8 <__assert_func>
 80048b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048b8:	6004      	str	r4, [r0, #0]
 80048ba:	60c4      	str	r4, [r0, #12]
 80048bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80048c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048c4:	b94c      	cbnz	r4, 80048da <__pow5mult+0x66>
 80048c6:	f240 2171 	movw	r1, #625	; 0x271
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff ff14 	bl	80046f8 <__i2b>
 80048d0:	2300      	movs	r3, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80048d8:	6003      	str	r3, [r0, #0]
 80048da:	f04f 0900 	mov.w	r9, #0
 80048de:	07eb      	lsls	r3, r5, #31
 80048e0:	d50a      	bpl.n	80048f8 <__pow5mult+0x84>
 80048e2:	4639      	mov	r1, r7
 80048e4:	4622      	mov	r2, r4
 80048e6:	4630      	mov	r0, r6
 80048e8:	f7ff ff1c 	bl	8004724 <__multiply>
 80048ec:	4680      	mov	r8, r0
 80048ee:	4639      	mov	r1, r7
 80048f0:	4630      	mov	r0, r6
 80048f2:	f7ff fe4b 	bl	800458c <_Bfree>
 80048f6:	4647      	mov	r7, r8
 80048f8:	106d      	asrs	r5, r5, #1
 80048fa:	d00b      	beq.n	8004914 <__pow5mult+0xa0>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	b938      	cbnz	r0, 8004910 <__pow5mult+0x9c>
 8004900:	4622      	mov	r2, r4
 8004902:	4621      	mov	r1, r4
 8004904:	4630      	mov	r0, r6
 8004906:	f7ff ff0d 	bl	8004724 <__multiply>
 800490a:	6020      	str	r0, [r4, #0]
 800490c:	f8c0 9000 	str.w	r9, [r0]
 8004910:	4604      	mov	r4, r0
 8004912:	e7e4      	b.n	80048de <__pow5mult+0x6a>
 8004914:	4638      	mov	r0, r7
 8004916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491a:	bf00      	nop
 800491c:	08005ee8 	.word	0x08005ee8
 8004920:	08005d15 	.word	0x08005d15
 8004924:	08005d98 	.word	0x08005d98

08004928 <__lshift>:
 8004928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	460c      	mov	r4, r1
 800492e:	4607      	mov	r7, r0
 8004930:	4691      	mov	r9, r2
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	6849      	ldr	r1, [r1, #4]
 8004936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800493a:	68a3      	ldr	r3, [r4, #8]
 800493c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004940:	f108 0601 	add.w	r6, r8, #1
 8004944:	42b3      	cmp	r3, r6
 8004946:	db0b      	blt.n	8004960 <__lshift+0x38>
 8004948:	4638      	mov	r0, r7
 800494a:	f7ff fddf 	bl	800450c <_Balloc>
 800494e:	4605      	mov	r5, r0
 8004950:	b948      	cbnz	r0, 8004966 <__lshift+0x3e>
 8004952:	4602      	mov	r2, r0
 8004954:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004958:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <__lshift+0xd8>)
 800495a:	482a      	ldr	r0, [pc, #168]	; (8004a04 <__lshift+0xdc>)
 800495c:	f000 fbb4 	bl	80050c8 <__assert_func>
 8004960:	3101      	adds	r1, #1
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	e7ee      	b.n	8004944 <__lshift+0x1c>
 8004966:	2300      	movs	r3, #0
 8004968:	f100 0114 	add.w	r1, r0, #20
 800496c:	f100 0210 	add.w	r2, r0, #16
 8004970:	4618      	mov	r0, r3
 8004972:	4553      	cmp	r3, sl
 8004974:	db37      	blt.n	80049e6 <__lshift+0xbe>
 8004976:	6920      	ldr	r0, [r4, #16]
 8004978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800497c:	f104 0314 	add.w	r3, r4, #20
 8004980:	f019 091f 	ands.w	r9, r9, #31
 8004984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004988:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800498c:	d02f      	beq.n	80049ee <__lshift+0xc6>
 800498e:	468a      	mov	sl, r1
 8004990:	f04f 0c00 	mov.w	ip, #0
 8004994:	f1c9 0e20 	rsb	lr, r9, #32
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	fa02 f209 	lsl.w	r2, r2, r9
 800499e:	ea42 020c 	orr.w	r2, r2, ip
 80049a2:	f84a 2b04 	str.w	r2, [sl], #4
 80049a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80049aa:	4298      	cmp	r0, r3
 80049ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80049b0:	d8f2      	bhi.n	8004998 <__lshift+0x70>
 80049b2:	1b03      	subs	r3, r0, r4
 80049b4:	3b15      	subs	r3, #21
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	3304      	adds	r3, #4
 80049bc:	f104 0215 	add.w	r2, r4, #21
 80049c0:	4290      	cmp	r0, r2
 80049c2:	bf38      	it	cc
 80049c4:	2304      	movcc	r3, #4
 80049c6:	f841 c003 	str.w	ip, [r1, r3]
 80049ca:	f1bc 0f00 	cmp.w	ip, #0
 80049ce:	d001      	beq.n	80049d4 <__lshift+0xac>
 80049d0:	f108 0602 	add.w	r6, r8, #2
 80049d4:	3e01      	subs	r6, #1
 80049d6:	4638      	mov	r0, r7
 80049d8:	4621      	mov	r1, r4
 80049da:	612e      	str	r6, [r5, #16]
 80049dc:	f7ff fdd6 	bl	800458c <_Bfree>
 80049e0:	4628      	mov	r0, r5
 80049e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80049ea:	3301      	adds	r3, #1
 80049ec:	e7c1      	b.n	8004972 <__lshift+0x4a>
 80049ee:	3904      	subs	r1, #4
 80049f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f4:	4298      	cmp	r0, r3
 80049f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80049fa:	d8f9      	bhi.n	80049f0 <__lshift+0xc8>
 80049fc:	e7ea      	b.n	80049d4 <__lshift+0xac>
 80049fe:	bf00      	nop
 8004a00:	08005d87 	.word	0x08005d87
 8004a04:	08005d98 	.word	0x08005d98

08004a08 <__mcmp>:
 8004a08:	4603      	mov	r3, r0
 8004a0a:	690a      	ldr	r2, [r1, #16]
 8004a0c:	6900      	ldr	r0, [r0, #16]
 8004a0e:	b530      	push	{r4, r5, lr}
 8004a10:	1a80      	subs	r0, r0, r2
 8004a12:	d10d      	bne.n	8004a30 <__mcmp+0x28>
 8004a14:	3314      	adds	r3, #20
 8004a16:	3114      	adds	r1, #20
 8004a18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004a1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004a20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a28:	4295      	cmp	r5, r2
 8004a2a:	d002      	beq.n	8004a32 <__mcmp+0x2a>
 8004a2c:	d304      	bcc.n	8004a38 <__mcmp+0x30>
 8004a2e:	2001      	movs	r0, #1
 8004a30:	bd30      	pop	{r4, r5, pc}
 8004a32:	42a3      	cmp	r3, r4
 8004a34:	d3f4      	bcc.n	8004a20 <__mcmp+0x18>
 8004a36:	e7fb      	b.n	8004a30 <__mcmp+0x28>
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	e7f8      	b.n	8004a30 <__mcmp+0x28>
	...

08004a40 <__mdiff>:
 8004a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	460d      	mov	r5, r1
 8004a46:	4607      	mov	r7, r0
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4614      	mov	r4, r2
 8004a4e:	f7ff ffdb 	bl	8004a08 <__mcmp>
 8004a52:	1e06      	subs	r6, r0, #0
 8004a54:	d111      	bne.n	8004a7a <__mdiff+0x3a>
 8004a56:	4631      	mov	r1, r6
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f7ff fd57 	bl	800450c <_Balloc>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	b928      	cbnz	r0, 8004a6e <__mdiff+0x2e>
 8004a62:	f240 2132 	movw	r1, #562	; 0x232
 8004a66:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <__mdiff+0x110>)
 8004a68:	483a      	ldr	r0, [pc, #232]	; (8004b54 <__mdiff+0x114>)
 8004a6a:	f000 fb2d 	bl	80050c8 <__assert_func>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004a74:	4610      	mov	r0, r2
 8004a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7a:	bfa4      	itt	ge
 8004a7c:	4623      	movge	r3, r4
 8004a7e:	462c      	movge	r4, r5
 8004a80:	4638      	mov	r0, r7
 8004a82:	6861      	ldr	r1, [r4, #4]
 8004a84:	bfa6      	itte	ge
 8004a86:	461d      	movge	r5, r3
 8004a88:	2600      	movge	r6, #0
 8004a8a:	2601      	movlt	r6, #1
 8004a8c:	f7ff fd3e 	bl	800450c <_Balloc>
 8004a90:	4602      	mov	r2, r0
 8004a92:	b918      	cbnz	r0, 8004a9c <__mdiff+0x5c>
 8004a94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a98:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <__mdiff+0x110>)
 8004a9a:	e7e5      	b.n	8004a68 <__mdiff+0x28>
 8004a9c:	f102 0814 	add.w	r8, r2, #20
 8004aa0:	46c2      	mov	sl, r8
 8004aa2:	f04f 0c00 	mov.w	ip, #0
 8004aa6:	6927      	ldr	r7, [r4, #16]
 8004aa8:	60c6      	str	r6, [r0, #12]
 8004aaa:	692e      	ldr	r6, [r5, #16]
 8004aac:	f104 0014 	add.w	r0, r4, #20
 8004ab0:	f105 0914 	add.w	r9, r5, #20
 8004ab4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004ab8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004abc:	3410      	adds	r4, #16
 8004abe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004ac2:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ac6:	fa1f f18b 	uxth.w	r1, fp
 8004aca:	448c      	add	ip, r1
 8004acc:	b299      	uxth	r1, r3
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	ebac 0101 	sub.w	r1, ip, r1
 8004ad4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ad8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004adc:	b289      	uxth	r1, r1
 8004ade:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ae2:	454e      	cmp	r6, r9
 8004ae4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004ae8:	f84a 3b04 	str.w	r3, [sl], #4
 8004aec:	d8e7      	bhi.n	8004abe <__mdiff+0x7e>
 8004aee:	1b73      	subs	r3, r6, r5
 8004af0:	3b15      	subs	r3, #21
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	3515      	adds	r5, #21
 8004af8:	3304      	adds	r3, #4
 8004afa:	42ae      	cmp	r6, r5
 8004afc:	bf38      	it	cc
 8004afe:	2304      	movcc	r3, #4
 8004b00:	4418      	add	r0, r3
 8004b02:	4443      	add	r3, r8
 8004b04:	461e      	mov	r6, r3
 8004b06:	4605      	mov	r5, r0
 8004b08:	4575      	cmp	r5, lr
 8004b0a:	d30e      	bcc.n	8004b2a <__mdiff+0xea>
 8004b0c:	f10e 0103 	add.w	r1, lr, #3
 8004b10:	1a09      	subs	r1, r1, r0
 8004b12:	f021 0103 	bic.w	r1, r1, #3
 8004b16:	3803      	subs	r0, #3
 8004b18:	4586      	cmp	lr, r0
 8004b1a:	bf38      	it	cc
 8004b1c:	2100      	movcc	r1, #0
 8004b1e:	4419      	add	r1, r3
 8004b20:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004b24:	b18b      	cbz	r3, 8004b4a <__mdiff+0x10a>
 8004b26:	6117      	str	r7, [r2, #16]
 8004b28:	e7a4      	b.n	8004a74 <__mdiff+0x34>
 8004b2a:	f855 8b04 	ldr.w	r8, [r5], #4
 8004b2e:	fa1f f188 	uxth.w	r1, r8
 8004b32:	4461      	add	r1, ip
 8004b34:	140c      	asrs	r4, r1, #16
 8004b36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004b3a:	b289      	uxth	r1, r1
 8004b3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004b40:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004b44:	f846 1b04 	str.w	r1, [r6], #4
 8004b48:	e7de      	b.n	8004b08 <__mdiff+0xc8>
 8004b4a:	3f01      	subs	r7, #1
 8004b4c:	e7e8      	b.n	8004b20 <__mdiff+0xe0>
 8004b4e:	bf00      	nop
 8004b50:	08005d87 	.word	0x08005d87
 8004b54:	08005d98 	.word	0x08005d98

08004b58 <__d2b>:
 8004b58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004b62:	4690      	mov	r8, r2
 8004b64:	461d      	mov	r5, r3
 8004b66:	f7ff fcd1 	bl	800450c <_Balloc>
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	b930      	cbnz	r0, 8004b7c <__d2b+0x24>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	f240 310a 	movw	r1, #778	; 0x30a
 8004b74:	4b24      	ldr	r3, [pc, #144]	; (8004c08 <__d2b+0xb0>)
 8004b76:	4825      	ldr	r0, [pc, #148]	; (8004c0c <__d2b+0xb4>)
 8004b78:	f000 faa6 	bl	80050c8 <__assert_func>
 8004b7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004b80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004b84:	bb2d      	cbnz	r5, 8004bd2 <__d2b+0x7a>
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	f1b8 0300 	subs.w	r3, r8, #0
 8004b8c:	d026      	beq.n	8004bdc <__d2b+0x84>
 8004b8e:	4668      	mov	r0, sp
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	f7ff fd83 	bl	800469c <__lo0bits>
 8004b96:	9900      	ldr	r1, [sp, #0]
 8004b98:	b1f0      	cbz	r0, 8004bd8 <__d2b+0x80>
 8004b9a:	9a01      	ldr	r2, [sp, #4]
 8004b9c:	f1c0 0320 	rsb	r3, r0, #32
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	40c2      	lsrs	r2, r0
 8004ba8:	6163      	str	r3, [r4, #20]
 8004baa:	9201      	str	r2, [sp, #4]
 8004bac:	9b01      	ldr	r3, [sp, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf14      	ite	ne
 8004bb2:	2102      	movne	r1, #2
 8004bb4:	2101      	moveq	r1, #1
 8004bb6:	61a3      	str	r3, [r4, #24]
 8004bb8:	6121      	str	r1, [r4, #16]
 8004bba:	b1c5      	cbz	r5, 8004bee <__d2b+0x96>
 8004bbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004bc0:	4405      	add	r5, r0
 8004bc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004bc6:	603d      	str	r5, [r7, #0]
 8004bc8:	6030      	str	r0, [r6, #0]
 8004bca:	4620      	mov	r0, r4
 8004bcc:	b002      	add	sp, #8
 8004bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd6:	e7d6      	b.n	8004b86 <__d2b+0x2e>
 8004bd8:	6161      	str	r1, [r4, #20]
 8004bda:	e7e7      	b.n	8004bac <__d2b+0x54>
 8004bdc:	a801      	add	r0, sp, #4
 8004bde:	f7ff fd5d 	bl	800469c <__lo0bits>
 8004be2:	2101      	movs	r1, #1
 8004be4:	9b01      	ldr	r3, [sp, #4]
 8004be6:	6121      	str	r1, [r4, #16]
 8004be8:	6163      	str	r3, [r4, #20]
 8004bea:	3020      	adds	r0, #32
 8004bec:	e7e5      	b.n	8004bba <__d2b+0x62>
 8004bee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004bf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004bf6:	6038      	str	r0, [r7, #0]
 8004bf8:	6918      	ldr	r0, [r3, #16]
 8004bfa:	f7ff fd2f 	bl	800465c <__hi0bits>
 8004bfe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004c02:	6031      	str	r1, [r6, #0]
 8004c04:	e7e1      	b.n	8004bca <__d2b+0x72>
 8004c06:	bf00      	nop
 8004c08:	08005d87 	.word	0x08005d87
 8004c0c:	08005d98 	.word	0x08005d98

08004c10 <_calloc_r>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	fba1 5402 	umull	r5, r4, r1, r2
 8004c16:	b934      	cbnz	r4, 8004c26 <_calloc_r+0x16>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	f000 f875 	bl	8004d08 <_malloc_r>
 8004c1e:	4606      	mov	r6, r0
 8004c20:	b928      	cbnz	r0, 8004c2e <_calloc_r+0x1e>
 8004c22:	4630      	mov	r0, r6
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
 8004c26:	220c      	movs	r2, #12
 8004c28:	2600      	movs	r6, #0
 8004c2a:	6002      	str	r2, [r0, #0]
 8004c2c:	e7f9      	b.n	8004c22 <_calloc_r+0x12>
 8004c2e:	462a      	mov	r2, r5
 8004c30:	4621      	mov	r1, r4
 8004c32:	f7fe f93f 	bl	8002eb4 <memset>
 8004c36:	e7f4      	b.n	8004c22 <_calloc_r+0x12>

08004c38 <_free_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	d040      	beq.n	8004cc2 <_free_r+0x8a>
 8004c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c44:	1f0c      	subs	r4, r1, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfb8      	it	lt
 8004c4a:	18e4      	addlt	r4, r4, r3
 8004c4c:	f000 fa98 	bl	8005180 <__malloc_lock>
 8004c50:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <_free_r+0x8c>)
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	b933      	cbnz	r3, 8004c64 <_free_r+0x2c>
 8004c56:	6063      	str	r3, [r4, #4]
 8004c58:	6014      	str	r4, [r2, #0]
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c60:	f000 ba94 	b.w	800518c <__malloc_unlock>
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	d908      	bls.n	8004c7a <_free_r+0x42>
 8004c68:	6820      	ldr	r0, [r4, #0]
 8004c6a:	1821      	adds	r1, r4, r0
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	bf01      	itttt	eq
 8004c70:	6819      	ldreq	r1, [r3, #0]
 8004c72:	685b      	ldreq	r3, [r3, #4]
 8004c74:	1809      	addeq	r1, r1, r0
 8004c76:	6021      	streq	r1, [r4, #0]
 8004c78:	e7ed      	b.n	8004c56 <_free_r+0x1e>
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b10b      	cbz	r3, 8004c84 <_free_r+0x4c>
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	d9fa      	bls.n	8004c7a <_free_r+0x42>
 8004c84:	6811      	ldr	r1, [r2, #0]
 8004c86:	1850      	adds	r0, r2, r1
 8004c88:	42a0      	cmp	r0, r4
 8004c8a:	d10b      	bne.n	8004ca4 <_free_r+0x6c>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	4401      	add	r1, r0
 8004c90:	1850      	adds	r0, r2, r1
 8004c92:	4283      	cmp	r3, r0
 8004c94:	6011      	str	r1, [r2, #0]
 8004c96:	d1e0      	bne.n	8004c5a <_free_r+0x22>
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4401      	add	r1, r0
 8004c9e:	6011      	str	r1, [r2, #0]
 8004ca0:	6053      	str	r3, [r2, #4]
 8004ca2:	e7da      	b.n	8004c5a <_free_r+0x22>
 8004ca4:	d902      	bls.n	8004cac <_free_r+0x74>
 8004ca6:	230c      	movs	r3, #12
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	e7d6      	b.n	8004c5a <_free_r+0x22>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	1821      	adds	r1, r4, r0
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	bf01      	itttt	eq
 8004cb4:	6819      	ldreq	r1, [r3, #0]
 8004cb6:	685b      	ldreq	r3, [r3, #4]
 8004cb8:	1809      	addeq	r1, r1, r0
 8004cba:	6021      	streq	r1, [r4, #0]
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	6054      	str	r4, [r2, #4]
 8004cc0:	e7cb      	b.n	8004c5a <_free_r+0x22>
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	2000029c 	.word	0x2000029c

08004cc8 <sbrk_aligned>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4e0e      	ldr	r6, [pc, #56]	; (8004d04 <sbrk_aligned+0x3c>)
 8004ccc:	460c      	mov	r4, r1
 8004cce:	6831      	ldr	r1, [r6, #0]
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	b911      	cbnz	r1, 8004cda <sbrk_aligned+0x12>
 8004cd4:	f000 f9e8 	bl	80050a8 <_sbrk_r>
 8004cd8:	6030      	str	r0, [r6, #0]
 8004cda:	4621      	mov	r1, r4
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f000 f9e3 	bl	80050a8 <_sbrk_r>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	d00a      	beq.n	8004cfc <sbrk_aligned+0x34>
 8004ce6:	1cc4      	adds	r4, r0, #3
 8004ce8:	f024 0403 	bic.w	r4, r4, #3
 8004cec:	42a0      	cmp	r0, r4
 8004cee:	d007      	beq.n	8004d00 <sbrk_aligned+0x38>
 8004cf0:	1a21      	subs	r1, r4, r0
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 f9d8 	bl	80050a8 <_sbrk_r>
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d101      	bne.n	8004d00 <sbrk_aligned+0x38>
 8004cfc:	f04f 34ff 	mov.w	r4, #4294967295
 8004d00:	4620      	mov	r0, r4
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	200002a0 	.word	0x200002a0

08004d08 <_malloc_r>:
 8004d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0c:	1ccd      	adds	r5, r1, #3
 8004d0e:	f025 0503 	bic.w	r5, r5, #3
 8004d12:	3508      	adds	r5, #8
 8004d14:	2d0c      	cmp	r5, #12
 8004d16:	bf38      	it	cc
 8004d18:	250c      	movcc	r5, #12
 8004d1a:	2d00      	cmp	r5, #0
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	db01      	blt.n	8004d24 <_malloc_r+0x1c>
 8004d20:	42a9      	cmp	r1, r5
 8004d22:	d905      	bls.n	8004d30 <_malloc_r+0x28>
 8004d24:	230c      	movs	r3, #12
 8004d26:	2600      	movs	r6, #0
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d30:	4e2e      	ldr	r6, [pc, #184]	; (8004dec <_malloc_r+0xe4>)
 8004d32:	f000 fa25 	bl	8005180 <__malloc_lock>
 8004d36:	6833      	ldr	r3, [r6, #0]
 8004d38:	461c      	mov	r4, r3
 8004d3a:	bb34      	cbnz	r4, 8004d8a <_malloc_r+0x82>
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f7ff ffc2 	bl	8004cc8 <sbrk_aligned>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	4604      	mov	r4, r0
 8004d48:	d14d      	bne.n	8004de6 <_malloc_r+0xde>
 8004d4a:	6834      	ldr	r4, [r6, #0]
 8004d4c:	4626      	mov	r6, r4
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	d140      	bne.n	8004dd4 <_malloc_r+0xcc>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	4631      	mov	r1, r6
 8004d56:	4638      	mov	r0, r7
 8004d58:	eb04 0803 	add.w	r8, r4, r3
 8004d5c:	f000 f9a4 	bl	80050a8 <_sbrk_r>
 8004d60:	4580      	cmp	r8, r0
 8004d62:	d13a      	bne.n	8004dda <_malloc_r+0xd2>
 8004d64:	6821      	ldr	r1, [r4, #0]
 8004d66:	3503      	adds	r5, #3
 8004d68:	1a6d      	subs	r5, r5, r1
 8004d6a:	f025 0503 	bic.w	r5, r5, #3
 8004d6e:	3508      	adds	r5, #8
 8004d70:	2d0c      	cmp	r5, #12
 8004d72:	bf38      	it	cc
 8004d74:	250c      	movcc	r5, #12
 8004d76:	4638      	mov	r0, r7
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f7ff ffa5 	bl	8004cc8 <sbrk_aligned>
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d02b      	beq.n	8004dda <_malloc_r+0xd2>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	442b      	add	r3, r5
 8004d86:	6023      	str	r3, [r4, #0]
 8004d88:	e00e      	b.n	8004da8 <_malloc_r+0xa0>
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	1b52      	subs	r2, r2, r5
 8004d8e:	d41e      	bmi.n	8004dce <_malloc_r+0xc6>
 8004d90:	2a0b      	cmp	r2, #11
 8004d92:	d916      	bls.n	8004dc2 <_malloc_r+0xba>
 8004d94:	1961      	adds	r1, r4, r5
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	6025      	str	r5, [r4, #0]
 8004d9a:	bf18      	it	ne
 8004d9c:	6059      	strne	r1, [r3, #4]
 8004d9e:	6863      	ldr	r3, [r4, #4]
 8004da0:	bf08      	it	eq
 8004da2:	6031      	streq	r1, [r6, #0]
 8004da4:	5162      	str	r2, [r4, r5]
 8004da6:	604b      	str	r3, [r1, #4]
 8004da8:	4638      	mov	r0, r7
 8004daa:	f104 060b 	add.w	r6, r4, #11
 8004dae:	f000 f9ed 	bl	800518c <__malloc_unlock>
 8004db2:	f026 0607 	bic.w	r6, r6, #7
 8004db6:	1d23      	adds	r3, r4, #4
 8004db8:	1af2      	subs	r2, r6, r3
 8004dba:	d0b6      	beq.n	8004d2a <_malloc_r+0x22>
 8004dbc:	1b9b      	subs	r3, r3, r6
 8004dbe:	50a3      	str	r3, [r4, r2]
 8004dc0:	e7b3      	b.n	8004d2a <_malloc_r+0x22>
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	bf0c      	ite	eq
 8004dc8:	6032      	streq	r2, [r6, #0]
 8004dca:	605a      	strne	r2, [r3, #4]
 8004dcc:	e7ec      	b.n	8004da8 <_malloc_r+0xa0>
 8004dce:	4623      	mov	r3, r4
 8004dd0:	6864      	ldr	r4, [r4, #4]
 8004dd2:	e7b2      	b.n	8004d3a <_malloc_r+0x32>
 8004dd4:	4634      	mov	r4, r6
 8004dd6:	6876      	ldr	r6, [r6, #4]
 8004dd8:	e7b9      	b.n	8004d4e <_malloc_r+0x46>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	4638      	mov	r0, r7
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	f000 f9d4 	bl	800518c <__malloc_unlock>
 8004de4:	e7a1      	b.n	8004d2a <_malloc_r+0x22>
 8004de6:	6025      	str	r5, [r4, #0]
 8004de8:	e7de      	b.n	8004da8 <_malloc_r+0xa0>
 8004dea:	bf00      	nop
 8004dec:	2000029c 	.word	0x2000029c

08004df0 <__ssputs_r>:
 8004df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df4:	688e      	ldr	r6, [r1, #8]
 8004df6:	4682      	mov	sl, r0
 8004df8:	429e      	cmp	r6, r3
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	4690      	mov	r8, r2
 8004dfe:	461f      	mov	r7, r3
 8004e00:	d838      	bhi.n	8004e74 <__ssputs_r+0x84>
 8004e02:	898a      	ldrh	r2, [r1, #12]
 8004e04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e08:	d032      	beq.n	8004e70 <__ssputs_r+0x80>
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	6909      	ldr	r1, [r1, #16]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	eba5 0901 	sub.w	r9, r5, r1
 8004e14:	6965      	ldr	r5, [r4, #20]
 8004e16:	444b      	add	r3, r9
 8004e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e20:	106d      	asrs	r5, r5, #1
 8004e22:	429d      	cmp	r5, r3
 8004e24:	bf38      	it	cc
 8004e26:	461d      	movcc	r5, r3
 8004e28:	0553      	lsls	r3, r2, #21
 8004e2a:	d531      	bpl.n	8004e90 <__ssputs_r+0xa0>
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	f7ff ff6b 	bl	8004d08 <_malloc_r>
 8004e32:	4606      	mov	r6, r0
 8004e34:	b950      	cbnz	r0, 8004e4c <__ssputs_r+0x5c>
 8004e36:	230c      	movs	r3, #12
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	f8ca 3000 	str.w	r3, [sl]
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4c:	464a      	mov	r2, r9
 8004e4e:	6921      	ldr	r1, [r4, #16]
 8004e50:	f7ff fb4e 	bl	80044f0 <memcpy>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	6126      	str	r6, [r4, #16]
 8004e62:	444e      	add	r6, r9
 8004e64:	6026      	str	r6, [r4, #0]
 8004e66:	463e      	mov	r6, r7
 8004e68:	6165      	str	r5, [r4, #20]
 8004e6a:	eba5 0509 	sub.w	r5, r5, r9
 8004e6e:	60a5      	str	r5, [r4, #8]
 8004e70:	42be      	cmp	r6, r7
 8004e72:	d900      	bls.n	8004e76 <__ssputs_r+0x86>
 8004e74:	463e      	mov	r6, r7
 8004e76:	4632      	mov	r2, r6
 8004e78:	4641      	mov	r1, r8
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	f000 f966 	bl	800514c <memmove>
 8004e80:	68a3      	ldr	r3, [r4, #8]
 8004e82:	2000      	movs	r0, #0
 8004e84:	1b9b      	subs	r3, r3, r6
 8004e86:	60a3      	str	r3, [r4, #8]
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	4433      	add	r3, r6
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	e7db      	b.n	8004e48 <__ssputs_r+0x58>
 8004e90:	462a      	mov	r2, r5
 8004e92:	f000 f981 	bl	8005198 <_realloc_r>
 8004e96:	4606      	mov	r6, r0
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d1e1      	bne.n	8004e60 <__ssputs_r+0x70>
 8004e9c:	4650      	mov	r0, sl
 8004e9e:	6921      	ldr	r1, [r4, #16]
 8004ea0:	f7ff feca 	bl	8004c38 <_free_r>
 8004ea4:	e7c7      	b.n	8004e36 <__ssputs_r+0x46>
	...

08004ea8 <_svfiprintf_r>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	4698      	mov	r8, r3
 8004eae:	898b      	ldrh	r3, [r1, #12]
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	061b      	lsls	r3, r3, #24
 8004eb4:	460d      	mov	r5, r1
 8004eb6:	4614      	mov	r4, r2
 8004eb8:	b09d      	sub	sp, #116	; 0x74
 8004eba:	d50e      	bpl.n	8004eda <_svfiprintf_r+0x32>
 8004ebc:	690b      	ldr	r3, [r1, #16]
 8004ebe:	b963      	cbnz	r3, 8004eda <_svfiprintf_r+0x32>
 8004ec0:	2140      	movs	r1, #64	; 0x40
 8004ec2:	f7ff ff21 	bl	8004d08 <_malloc_r>
 8004ec6:	6028      	str	r0, [r5, #0]
 8004ec8:	6128      	str	r0, [r5, #16]
 8004eca:	b920      	cbnz	r0, 8004ed6 <_svfiprintf_r+0x2e>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	e0d1      	b.n	800507a <_svfiprintf_r+0x1d2>
 8004ed6:	2340      	movs	r3, #64	; 0x40
 8004ed8:	616b      	str	r3, [r5, #20]
 8004eda:	2300      	movs	r3, #0
 8004edc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ede:	2320      	movs	r3, #32
 8004ee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ee4:	2330      	movs	r3, #48	; 0x30
 8004ee6:	f04f 0901 	mov.w	r9, #1
 8004eea:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005094 <_svfiprintf_r+0x1ec>
 8004ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	469a      	mov	sl, r3
 8004efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004efe:	b10a      	cbz	r2, 8004f04 <_svfiprintf_r+0x5c>
 8004f00:	2a25      	cmp	r2, #37	; 0x25
 8004f02:	d1f9      	bne.n	8004ef8 <_svfiprintf_r+0x50>
 8004f04:	ebba 0b04 	subs.w	fp, sl, r4
 8004f08:	d00b      	beq.n	8004f22 <_svfiprintf_r+0x7a>
 8004f0a:	465b      	mov	r3, fp
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4638      	mov	r0, r7
 8004f12:	f7ff ff6d 	bl	8004df0 <__ssputs_r>
 8004f16:	3001      	adds	r0, #1
 8004f18:	f000 80aa 	beq.w	8005070 <_svfiprintf_r+0x1c8>
 8004f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f1e:	445a      	add	r2, fp
 8004f20:	9209      	str	r2, [sp, #36]	; 0x24
 8004f22:	f89a 3000 	ldrb.w	r3, [sl]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80a2 	beq.w	8005070 <_svfiprintf_r+0x1c8>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f36:	f10a 0a01 	add.w	sl, sl, #1
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	9307      	str	r3, [sp, #28]
 8004f3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f42:	931a      	str	r3, [sp, #104]	; 0x68
 8004f44:	4654      	mov	r4, sl
 8004f46:	2205      	movs	r2, #5
 8004f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4c:	4851      	ldr	r0, [pc, #324]	; (8005094 <_svfiprintf_r+0x1ec>)
 8004f4e:	f7ff fac1 	bl	80044d4 <memchr>
 8004f52:	9a04      	ldr	r2, [sp, #16]
 8004f54:	b9d8      	cbnz	r0, 8004f8e <_svfiprintf_r+0xe6>
 8004f56:	06d0      	lsls	r0, r2, #27
 8004f58:	bf44      	itt	mi
 8004f5a:	2320      	movmi	r3, #32
 8004f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f60:	0711      	lsls	r1, r2, #28
 8004f62:	bf44      	itt	mi
 8004f64:	232b      	movmi	r3, #43	; 0x2b
 8004f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f70:	d015      	beq.n	8004f9e <_svfiprintf_r+0xf6>
 8004f72:	4654      	mov	r4, sl
 8004f74:	2000      	movs	r0, #0
 8004f76:	f04f 0c0a 	mov.w	ip, #10
 8004f7a:	9a07      	ldr	r2, [sp, #28]
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f82:	3b30      	subs	r3, #48	; 0x30
 8004f84:	2b09      	cmp	r3, #9
 8004f86:	d94e      	bls.n	8005026 <_svfiprintf_r+0x17e>
 8004f88:	b1b0      	cbz	r0, 8004fb8 <_svfiprintf_r+0x110>
 8004f8a:	9207      	str	r2, [sp, #28]
 8004f8c:	e014      	b.n	8004fb8 <_svfiprintf_r+0x110>
 8004f8e:	eba0 0308 	sub.w	r3, r0, r8
 8004f92:	fa09 f303 	lsl.w	r3, r9, r3
 8004f96:	4313      	orrs	r3, r2
 8004f98:	46a2      	mov	sl, r4
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	e7d2      	b.n	8004f44 <_svfiprintf_r+0x9c>
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	1d19      	adds	r1, r3, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	9103      	str	r1, [sp, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bfbb      	ittet	lt
 8004faa:	425b      	neglt	r3, r3
 8004fac:	f042 0202 	orrlt.w	r2, r2, #2
 8004fb0:	9307      	strge	r3, [sp, #28]
 8004fb2:	9307      	strlt	r3, [sp, #28]
 8004fb4:	bfb8      	it	lt
 8004fb6:	9204      	strlt	r2, [sp, #16]
 8004fb8:	7823      	ldrb	r3, [r4, #0]
 8004fba:	2b2e      	cmp	r3, #46	; 0x2e
 8004fbc:	d10c      	bne.n	8004fd8 <_svfiprintf_r+0x130>
 8004fbe:	7863      	ldrb	r3, [r4, #1]
 8004fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc2:	d135      	bne.n	8005030 <_svfiprintf_r+0x188>
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	3402      	adds	r4, #2
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	9203      	str	r2, [sp, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfb8      	it	lt
 8004fd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fd6:	9305      	str	r3, [sp, #20]
 8004fd8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005098 <_svfiprintf_r+0x1f0>
 8004fdc:	2203      	movs	r2, #3
 8004fde:	4650      	mov	r0, sl
 8004fe0:	7821      	ldrb	r1, [r4, #0]
 8004fe2:	f7ff fa77 	bl	80044d4 <memchr>
 8004fe6:	b140      	cbz	r0, 8004ffa <_svfiprintf_r+0x152>
 8004fe8:	2340      	movs	r3, #64	; 0x40
 8004fea:	eba0 000a 	sub.w	r0, r0, sl
 8004fee:	fa03 f000 	lsl.w	r0, r3, r0
 8004ff2:	9b04      	ldr	r3, [sp, #16]
 8004ff4:	3401      	adds	r4, #1
 8004ff6:	4303      	orrs	r3, r0
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ffe:	2206      	movs	r2, #6
 8005000:	4826      	ldr	r0, [pc, #152]	; (800509c <_svfiprintf_r+0x1f4>)
 8005002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005006:	f7ff fa65 	bl	80044d4 <memchr>
 800500a:	2800      	cmp	r0, #0
 800500c:	d038      	beq.n	8005080 <_svfiprintf_r+0x1d8>
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <_svfiprintf_r+0x1f8>)
 8005010:	bb1b      	cbnz	r3, 800505a <_svfiprintf_r+0x1b2>
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	3307      	adds	r3, #7
 8005016:	f023 0307 	bic.w	r3, r3, #7
 800501a:	3308      	adds	r3, #8
 800501c:	9303      	str	r3, [sp, #12]
 800501e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005020:	4433      	add	r3, r6
 8005022:	9309      	str	r3, [sp, #36]	; 0x24
 8005024:	e767      	b.n	8004ef6 <_svfiprintf_r+0x4e>
 8005026:	460c      	mov	r4, r1
 8005028:	2001      	movs	r0, #1
 800502a:	fb0c 3202 	mla	r2, ip, r2, r3
 800502e:	e7a5      	b.n	8004f7c <_svfiprintf_r+0xd4>
 8005030:	2300      	movs	r3, #0
 8005032:	f04f 0c0a 	mov.w	ip, #10
 8005036:	4619      	mov	r1, r3
 8005038:	3401      	adds	r4, #1
 800503a:	9305      	str	r3, [sp, #20]
 800503c:	4620      	mov	r0, r4
 800503e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005042:	3a30      	subs	r2, #48	; 0x30
 8005044:	2a09      	cmp	r2, #9
 8005046:	d903      	bls.n	8005050 <_svfiprintf_r+0x1a8>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0c5      	beq.n	8004fd8 <_svfiprintf_r+0x130>
 800504c:	9105      	str	r1, [sp, #20]
 800504e:	e7c3      	b.n	8004fd8 <_svfiprintf_r+0x130>
 8005050:	4604      	mov	r4, r0
 8005052:	2301      	movs	r3, #1
 8005054:	fb0c 2101 	mla	r1, ip, r1, r2
 8005058:	e7f0      	b.n	800503c <_svfiprintf_r+0x194>
 800505a:	ab03      	add	r3, sp, #12
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	462a      	mov	r2, r5
 8005060:	4638      	mov	r0, r7
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <_svfiprintf_r+0x1fc>)
 8005064:	a904      	add	r1, sp, #16
 8005066:	f7fd ffcb 	bl	8003000 <_printf_float>
 800506a:	1c42      	adds	r2, r0, #1
 800506c:	4606      	mov	r6, r0
 800506e:	d1d6      	bne.n	800501e <_svfiprintf_r+0x176>
 8005070:	89ab      	ldrh	r3, [r5, #12]
 8005072:	065b      	lsls	r3, r3, #25
 8005074:	f53f af2c 	bmi.w	8004ed0 <_svfiprintf_r+0x28>
 8005078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800507a:	b01d      	add	sp, #116	; 0x74
 800507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005080:	ab03      	add	r3, sp, #12
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	462a      	mov	r2, r5
 8005086:	4638      	mov	r0, r7
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <_svfiprintf_r+0x1fc>)
 800508a:	a904      	add	r1, sp, #16
 800508c:	f7fe fa54 	bl	8003538 <_printf_i>
 8005090:	e7eb      	b.n	800506a <_svfiprintf_r+0x1c2>
 8005092:	bf00      	nop
 8005094:	08005ef4 	.word	0x08005ef4
 8005098:	08005efa 	.word	0x08005efa
 800509c:	08005efe 	.word	0x08005efe
 80050a0:	08003001 	.word	0x08003001
 80050a4:	08004df1 	.word	0x08004df1

080050a8 <_sbrk_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	2300      	movs	r3, #0
 80050ac:	4d05      	ldr	r5, [pc, #20]	; (80050c4 <_sbrk_r+0x1c>)
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	f7fb ffec 	bl	8001090 <_sbrk>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d102      	bne.n	80050c2 <_sbrk_r+0x1a>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	b103      	cbz	r3, 80050c2 <_sbrk_r+0x1a>
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	200002a4 	.word	0x200002a4

080050c8 <__assert_func>:
 80050c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050ca:	4614      	mov	r4, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <__assert_func+0x2c>)
 80050d0:	4605      	mov	r5, r0
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68d8      	ldr	r0, [r3, #12]
 80050d6:	b14c      	cbz	r4, 80050ec <__assert_func+0x24>
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <__assert_func+0x30>)
 80050da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050de:	9100      	str	r1, [sp, #0]
 80050e0:	462b      	mov	r3, r5
 80050e2:	4906      	ldr	r1, [pc, #24]	; (80050fc <__assert_func+0x34>)
 80050e4:	f000 f80e 	bl	8005104 <fiprintf>
 80050e8:	f000 faaa 	bl	8005640 <abort>
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <__assert_func+0x38>)
 80050ee:	461c      	mov	r4, r3
 80050f0:	e7f3      	b.n	80050da <__assert_func+0x12>
 80050f2:	bf00      	nop
 80050f4:	2000002c 	.word	0x2000002c
 80050f8:	08005f05 	.word	0x08005f05
 80050fc:	08005f12 	.word	0x08005f12
 8005100:	08005f40 	.word	0x08005f40

08005104 <fiprintf>:
 8005104:	b40e      	push	{r1, r2, r3}
 8005106:	b503      	push	{r0, r1, lr}
 8005108:	4601      	mov	r1, r0
 800510a:	ab03      	add	r3, sp, #12
 800510c:	4805      	ldr	r0, [pc, #20]	; (8005124 <fiprintf+0x20>)
 800510e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005112:	6800      	ldr	r0, [r0, #0]
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	f000 f895 	bl	8005244 <_vfiprintf_r>
 800511a:	b002      	add	sp, #8
 800511c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005120:	b003      	add	sp, #12
 8005122:	4770      	bx	lr
 8005124:	2000002c 	.word	0x2000002c

08005128 <__ascii_mbtowc>:
 8005128:	b082      	sub	sp, #8
 800512a:	b901      	cbnz	r1, 800512e <__ascii_mbtowc+0x6>
 800512c:	a901      	add	r1, sp, #4
 800512e:	b142      	cbz	r2, 8005142 <__ascii_mbtowc+0x1a>
 8005130:	b14b      	cbz	r3, 8005146 <__ascii_mbtowc+0x1e>
 8005132:	7813      	ldrb	r3, [r2, #0]
 8005134:	600b      	str	r3, [r1, #0]
 8005136:	7812      	ldrb	r2, [r2, #0]
 8005138:	1e10      	subs	r0, r2, #0
 800513a:	bf18      	it	ne
 800513c:	2001      	movne	r0, #1
 800513e:	b002      	add	sp, #8
 8005140:	4770      	bx	lr
 8005142:	4610      	mov	r0, r2
 8005144:	e7fb      	b.n	800513e <__ascii_mbtowc+0x16>
 8005146:	f06f 0001 	mvn.w	r0, #1
 800514a:	e7f8      	b.n	800513e <__ascii_mbtowc+0x16>

0800514c <memmove>:
 800514c:	4288      	cmp	r0, r1
 800514e:	b510      	push	{r4, lr}
 8005150:	eb01 0402 	add.w	r4, r1, r2
 8005154:	d902      	bls.n	800515c <memmove+0x10>
 8005156:	4284      	cmp	r4, r0
 8005158:	4623      	mov	r3, r4
 800515a:	d807      	bhi.n	800516c <memmove+0x20>
 800515c:	1e43      	subs	r3, r0, #1
 800515e:	42a1      	cmp	r1, r4
 8005160:	d008      	beq.n	8005174 <memmove+0x28>
 8005162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800516a:	e7f8      	b.n	800515e <memmove+0x12>
 800516c:	4601      	mov	r1, r0
 800516e:	4402      	add	r2, r0
 8005170:	428a      	cmp	r2, r1
 8005172:	d100      	bne.n	8005176 <memmove+0x2a>
 8005174:	bd10      	pop	{r4, pc}
 8005176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800517a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800517e:	e7f7      	b.n	8005170 <memmove+0x24>

08005180 <__malloc_lock>:
 8005180:	4801      	ldr	r0, [pc, #4]	; (8005188 <__malloc_lock+0x8>)
 8005182:	f000 bc19 	b.w	80059b8 <__retarget_lock_acquire_recursive>
 8005186:	bf00      	nop
 8005188:	200002a8 	.word	0x200002a8

0800518c <__malloc_unlock>:
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <__malloc_unlock+0x8>)
 800518e:	f000 bc14 	b.w	80059ba <__retarget_lock_release_recursive>
 8005192:	bf00      	nop
 8005194:	200002a8 	.word	0x200002a8

08005198 <_realloc_r>:
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	4680      	mov	r8, r0
 800519e:	4614      	mov	r4, r2
 80051a0:	460e      	mov	r6, r1
 80051a2:	b921      	cbnz	r1, 80051ae <_realloc_r+0x16>
 80051a4:	4611      	mov	r1, r2
 80051a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051aa:	f7ff bdad 	b.w	8004d08 <_malloc_r>
 80051ae:	b92a      	cbnz	r2, 80051bc <_realloc_r+0x24>
 80051b0:	f7ff fd42 	bl	8004c38 <_free_r>
 80051b4:	4625      	mov	r5, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	f000 fc64 	bl	8005a88 <_malloc_usable_size_r>
 80051c0:	4284      	cmp	r4, r0
 80051c2:	4607      	mov	r7, r0
 80051c4:	d802      	bhi.n	80051cc <_realloc_r+0x34>
 80051c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051ca:	d812      	bhi.n	80051f2 <_realloc_r+0x5a>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4640      	mov	r0, r8
 80051d0:	f7ff fd9a 	bl	8004d08 <_malloc_r>
 80051d4:	4605      	mov	r5, r0
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d0ed      	beq.n	80051b6 <_realloc_r+0x1e>
 80051da:	42bc      	cmp	r4, r7
 80051dc:	4622      	mov	r2, r4
 80051de:	4631      	mov	r1, r6
 80051e0:	bf28      	it	cs
 80051e2:	463a      	movcs	r2, r7
 80051e4:	f7ff f984 	bl	80044f0 <memcpy>
 80051e8:	4631      	mov	r1, r6
 80051ea:	4640      	mov	r0, r8
 80051ec:	f7ff fd24 	bl	8004c38 <_free_r>
 80051f0:	e7e1      	b.n	80051b6 <_realloc_r+0x1e>
 80051f2:	4635      	mov	r5, r6
 80051f4:	e7df      	b.n	80051b6 <_realloc_r+0x1e>

080051f6 <__sfputc_r>:
 80051f6:	6893      	ldr	r3, [r2, #8]
 80051f8:	b410      	push	{r4}
 80051fa:	3b01      	subs	r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	6093      	str	r3, [r2, #8]
 8005200:	da07      	bge.n	8005212 <__sfputc_r+0x1c>
 8005202:	6994      	ldr	r4, [r2, #24]
 8005204:	42a3      	cmp	r3, r4
 8005206:	db01      	blt.n	800520c <__sfputc_r+0x16>
 8005208:	290a      	cmp	r1, #10
 800520a:	d102      	bne.n	8005212 <__sfputc_r+0x1c>
 800520c:	bc10      	pop	{r4}
 800520e:	f000 b949 	b.w	80054a4 <__swbuf_r>
 8005212:	6813      	ldr	r3, [r2, #0]
 8005214:	1c58      	adds	r0, r3, #1
 8005216:	6010      	str	r0, [r2, #0]
 8005218:	7019      	strb	r1, [r3, #0]
 800521a:	4608      	mov	r0, r1
 800521c:	bc10      	pop	{r4}
 800521e:	4770      	bx	lr

08005220 <__sfputs_r>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	4606      	mov	r6, r0
 8005224:	460f      	mov	r7, r1
 8005226:	4614      	mov	r4, r2
 8005228:	18d5      	adds	r5, r2, r3
 800522a:	42ac      	cmp	r4, r5
 800522c:	d101      	bne.n	8005232 <__sfputs_r+0x12>
 800522e:	2000      	movs	r0, #0
 8005230:	e007      	b.n	8005242 <__sfputs_r+0x22>
 8005232:	463a      	mov	r2, r7
 8005234:	4630      	mov	r0, r6
 8005236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800523a:	f7ff ffdc 	bl	80051f6 <__sfputc_r>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d1f3      	bne.n	800522a <__sfputs_r+0xa>
 8005242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005244 <_vfiprintf_r>:
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	460d      	mov	r5, r1
 800524a:	4614      	mov	r4, r2
 800524c:	4698      	mov	r8, r3
 800524e:	4606      	mov	r6, r0
 8005250:	b09d      	sub	sp, #116	; 0x74
 8005252:	b118      	cbz	r0, 800525c <_vfiprintf_r+0x18>
 8005254:	6983      	ldr	r3, [r0, #24]
 8005256:	b90b      	cbnz	r3, 800525c <_vfiprintf_r+0x18>
 8005258:	f000 fb10 	bl	800587c <__sinit>
 800525c:	4b89      	ldr	r3, [pc, #548]	; (8005484 <_vfiprintf_r+0x240>)
 800525e:	429d      	cmp	r5, r3
 8005260:	d11b      	bne.n	800529a <_vfiprintf_r+0x56>
 8005262:	6875      	ldr	r5, [r6, #4]
 8005264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005266:	07d9      	lsls	r1, r3, #31
 8005268:	d405      	bmi.n	8005276 <_vfiprintf_r+0x32>
 800526a:	89ab      	ldrh	r3, [r5, #12]
 800526c:	059a      	lsls	r2, r3, #22
 800526e:	d402      	bmi.n	8005276 <_vfiprintf_r+0x32>
 8005270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005272:	f000 fba1 	bl	80059b8 <__retarget_lock_acquire_recursive>
 8005276:	89ab      	ldrh	r3, [r5, #12]
 8005278:	071b      	lsls	r3, r3, #28
 800527a:	d501      	bpl.n	8005280 <_vfiprintf_r+0x3c>
 800527c:	692b      	ldr	r3, [r5, #16]
 800527e:	b9eb      	cbnz	r3, 80052bc <_vfiprintf_r+0x78>
 8005280:	4629      	mov	r1, r5
 8005282:	4630      	mov	r0, r6
 8005284:	f000 f96e 	bl	8005564 <__swsetup_r>
 8005288:	b1c0      	cbz	r0, 80052bc <_vfiprintf_r+0x78>
 800528a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800528c:	07dc      	lsls	r4, r3, #31
 800528e:	d50e      	bpl.n	80052ae <_vfiprintf_r+0x6a>
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	b01d      	add	sp, #116	; 0x74
 8005296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529a:	4b7b      	ldr	r3, [pc, #492]	; (8005488 <_vfiprintf_r+0x244>)
 800529c:	429d      	cmp	r5, r3
 800529e:	d101      	bne.n	80052a4 <_vfiprintf_r+0x60>
 80052a0:	68b5      	ldr	r5, [r6, #8]
 80052a2:	e7df      	b.n	8005264 <_vfiprintf_r+0x20>
 80052a4:	4b79      	ldr	r3, [pc, #484]	; (800548c <_vfiprintf_r+0x248>)
 80052a6:	429d      	cmp	r5, r3
 80052a8:	bf08      	it	eq
 80052aa:	68f5      	ldreq	r5, [r6, #12]
 80052ac:	e7da      	b.n	8005264 <_vfiprintf_r+0x20>
 80052ae:	89ab      	ldrh	r3, [r5, #12]
 80052b0:	0598      	lsls	r0, r3, #22
 80052b2:	d4ed      	bmi.n	8005290 <_vfiprintf_r+0x4c>
 80052b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052b6:	f000 fb80 	bl	80059ba <__retarget_lock_release_recursive>
 80052ba:	e7e9      	b.n	8005290 <_vfiprintf_r+0x4c>
 80052bc:	2300      	movs	r3, #0
 80052be:	9309      	str	r3, [sp, #36]	; 0x24
 80052c0:	2320      	movs	r3, #32
 80052c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052c6:	2330      	movs	r3, #48	; 0x30
 80052c8:	f04f 0901 	mov.w	r9, #1
 80052cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80052d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005490 <_vfiprintf_r+0x24c>
 80052d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052d8:	4623      	mov	r3, r4
 80052da:	469a      	mov	sl, r3
 80052dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052e0:	b10a      	cbz	r2, 80052e6 <_vfiprintf_r+0xa2>
 80052e2:	2a25      	cmp	r2, #37	; 0x25
 80052e4:	d1f9      	bne.n	80052da <_vfiprintf_r+0x96>
 80052e6:	ebba 0b04 	subs.w	fp, sl, r4
 80052ea:	d00b      	beq.n	8005304 <_vfiprintf_r+0xc0>
 80052ec:	465b      	mov	r3, fp
 80052ee:	4622      	mov	r2, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ff94 	bl	8005220 <__sfputs_r>
 80052f8:	3001      	adds	r0, #1
 80052fa:	f000 80aa 	beq.w	8005452 <_vfiprintf_r+0x20e>
 80052fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005300:	445a      	add	r2, fp
 8005302:	9209      	str	r2, [sp, #36]	; 0x24
 8005304:	f89a 3000 	ldrb.w	r3, [sl]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80a2 	beq.w	8005452 <_vfiprintf_r+0x20e>
 800530e:	2300      	movs	r3, #0
 8005310:	f04f 32ff 	mov.w	r2, #4294967295
 8005314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005318:	f10a 0a01 	add.w	sl, sl, #1
 800531c:	9304      	str	r3, [sp, #16]
 800531e:	9307      	str	r3, [sp, #28]
 8005320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005324:	931a      	str	r3, [sp, #104]	; 0x68
 8005326:	4654      	mov	r4, sl
 8005328:	2205      	movs	r2, #5
 800532a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532e:	4858      	ldr	r0, [pc, #352]	; (8005490 <_vfiprintf_r+0x24c>)
 8005330:	f7ff f8d0 	bl	80044d4 <memchr>
 8005334:	9a04      	ldr	r2, [sp, #16]
 8005336:	b9d8      	cbnz	r0, 8005370 <_vfiprintf_r+0x12c>
 8005338:	06d1      	lsls	r1, r2, #27
 800533a:	bf44      	itt	mi
 800533c:	2320      	movmi	r3, #32
 800533e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005342:	0713      	lsls	r3, r2, #28
 8005344:	bf44      	itt	mi
 8005346:	232b      	movmi	r3, #43	; 0x2b
 8005348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800534c:	f89a 3000 	ldrb.w	r3, [sl]
 8005350:	2b2a      	cmp	r3, #42	; 0x2a
 8005352:	d015      	beq.n	8005380 <_vfiprintf_r+0x13c>
 8005354:	4654      	mov	r4, sl
 8005356:	2000      	movs	r0, #0
 8005358:	f04f 0c0a 	mov.w	ip, #10
 800535c:	9a07      	ldr	r2, [sp, #28]
 800535e:	4621      	mov	r1, r4
 8005360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005364:	3b30      	subs	r3, #48	; 0x30
 8005366:	2b09      	cmp	r3, #9
 8005368:	d94e      	bls.n	8005408 <_vfiprintf_r+0x1c4>
 800536a:	b1b0      	cbz	r0, 800539a <_vfiprintf_r+0x156>
 800536c:	9207      	str	r2, [sp, #28]
 800536e:	e014      	b.n	800539a <_vfiprintf_r+0x156>
 8005370:	eba0 0308 	sub.w	r3, r0, r8
 8005374:	fa09 f303 	lsl.w	r3, r9, r3
 8005378:	4313      	orrs	r3, r2
 800537a:	46a2      	mov	sl, r4
 800537c:	9304      	str	r3, [sp, #16]
 800537e:	e7d2      	b.n	8005326 <_vfiprintf_r+0xe2>
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	1d19      	adds	r1, r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	9103      	str	r1, [sp, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	bfbb      	ittet	lt
 800538c:	425b      	neglt	r3, r3
 800538e:	f042 0202 	orrlt.w	r2, r2, #2
 8005392:	9307      	strge	r3, [sp, #28]
 8005394:	9307      	strlt	r3, [sp, #28]
 8005396:	bfb8      	it	lt
 8005398:	9204      	strlt	r2, [sp, #16]
 800539a:	7823      	ldrb	r3, [r4, #0]
 800539c:	2b2e      	cmp	r3, #46	; 0x2e
 800539e:	d10c      	bne.n	80053ba <_vfiprintf_r+0x176>
 80053a0:	7863      	ldrb	r3, [r4, #1]
 80053a2:	2b2a      	cmp	r3, #42	; 0x2a
 80053a4:	d135      	bne.n	8005412 <_vfiprintf_r+0x1ce>
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	3402      	adds	r4, #2
 80053aa:	1d1a      	adds	r2, r3, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	9203      	str	r2, [sp, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bfb8      	it	lt
 80053b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80053b8:	9305      	str	r3, [sp, #20]
 80053ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005494 <_vfiprintf_r+0x250>
 80053be:	2203      	movs	r2, #3
 80053c0:	4650      	mov	r0, sl
 80053c2:	7821      	ldrb	r1, [r4, #0]
 80053c4:	f7ff f886 	bl	80044d4 <memchr>
 80053c8:	b140      	cbz	r0, 80053dc <_vfiprintf_r+0x198>
 80053ca:	2340      	movs	r3, #64	; 0x40
 80053cc:	eba0 000a 	sub.w	r0, r0, sl
 80053d0:	fa03 f000 	lsl.w	r0, r3, r0
 80053d4:	9b04      	ldr	r3, [sp, #16]
 80053d6:	3401      	adds	r4, #1
 80053d8:	4303      	orrs	r3, r0
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e0:	2206      	movs	r2, #6
 80053e2:	482d      	ldr	r0, [pc, #180]	; (8005498 <_vfiprintf_r+0x254>)
 80053e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053e8:	f7ff f874 	bl	80044d4 <memchr>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d03f      	beq.n	8005470 <_vfiprintf_r+0x22c>
 80053f0:	4b2a      	ldr	r3, [pc, #168]	; (800549c <_vfiprintf_r+0x258>)
 80053f2:	bb1b      	cbnz	r3, 800543c <_vfiprintf_r+0x1f8>
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	3307      	adds	r3, #7
 80053f8:	f023 0307 	bic.w	r3, r3, #7
 80053fc:	3308      	adds	r3, #8
 80053fe:	9303      	str	r3, [sp, #12]
 8005400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005402:	443b      	add	r3, r7
 8005404:	9309      	str	r3, [sp, #36]	; 0x24
 8005406:	e767      	b.n	80052d8 <_vfiprintf_r+0x94>
 8005408:	460c      	mov	r4, r1
 800540a:	2001      	movs	r0, #1
 800540c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005410:	e7a5      	b.n	800535e <_vfiprintf_r+0x11a>
 8005412:	2300      	movs	r3, #0
 8005414:	f04f 0c0a 	mov.w	ip, #10
 8005418:	4619      	mov	r1, r3
 800541a:	3401      	adds	r4, #1
 800541c:	9305      	str	r3, [sp, #20]
 800541e:	4620      	mov	r0, r4
 8005420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005424:	3a30      	subs	r2, #48	; 0x30
 8005426:	2a09      	cmp	r2, #9
 8005428:	d903      	bls.n	8005432 <_vfiprintf_r+0x1ee>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0c5      	beq.n	80053ba <_vfiprintf_r+0x176>
 800542e:	9105      	str	r1, [sp, #20]
 8005430:	e7c3      	b.n	80053ba <_vfiprintf_r+0x176>
 8005432:	4604      	mov	r4, r0
 8005434:	2301      	movs	r3, #1
 8005436:	fb0c 2101 	mla	r1, ip, r1, r2
 800543a:	e7f0      	b.n	800541e <_vfiprintf_r+0x1da>
 800543c:	ab03      	add	r3, sp, #12
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	462a      	mov	r2, r5
 8005442:	4630      	mov	r0, r6
 8005444:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <_vfiprintf_r+0x25c>)
 8005446:	a904      	add	r1, sp, #16
 8005448:	f7fd fdda 	bl	8003000 <_printf_float>
 800544c:	4607      	mov	r7, r0
 800544e:	1c78      	adds	r0, r7, #1
 8005450:	d1d6      	bne.n	8005400 <_vfiprintf_r+0x1bc>
 8005452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005454:	07d9      	lsls	r1, r3, #31
 8005456:	d405      	bmi.n	8005464 <_vfiprintf_r+0x220>
 8005458:	89ab      	ldrh	r3, [r5, #12]
 800545a:	059a      	lsls	r2, r3, #22
 800545c:	d402      	bmi.n	8005464 <_vfiprintf_r+0x220>
 800545e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005460:	f000 faab 	bl	80059ba <__retarget_lock_release_recursive>
 8005464:	89ab      	ldrh	r3, [r5, #12]
 8005466:	065b      	lsls	r3, r3, #25
 8005468:	f53f af12 	bmi.w	8005290 <_vfiprintf_r+0x4c>
 800546c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800546e:	e711      	b.n	8005294 <_vfiprintf_r+0x50>
 8005470:	ab03      	add	r3, sp, #12
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	462a      	mov	r2, r5
 8005476:	4630      	mov	r0, r6
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <_vfiprintf_r+0x25c>)
 800547a:	a904      	add	r1, sp, #16
 800547c:	f7fe f85c 	bl	8003538 <_printf_i>
 8005480:	e7e4      	b.n	800544c <_vfiprintf_r+0x208>
 8005482:	bf00      	nop
 8005484:	0800606c 	.word	0x0800606c
 8005488:	0800608c 	.word	0x0800608c
 800548c:	0800604c 	.word	0x0800604c
 8005490:	08005ef4 	.word	0x08005ef4
 8005494:	08005efa 	.word	0x08005efa
 8005498:	08005efe 	.word	0x08005efe
 800549c:	08003001 	.word	0x08003001
 80054a0:	08005221 	.word	0x08005221

080054a4 <__swbuf_r>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	460e      	mov	r6, r1
 80054a8:	4614      	mov	r4, r2
 80054aa:	4605      	mov	r5, r0
 80054ac:	b118      	cbz	r0, 80054b6 <__swbuf_r+0x12>
 80054ae:	6983      	ldr	r3, [r0, #24]
 80054b0:	b90b      	cbnz	r3, 80054b6 <__swbuf_r+0x12>
 80054b2:	f000 f9e3 	bl	800587c <__sinit>
 80054b6:	4b21      	ldr	r3, [pc, #132]	; (800553c <__swbuf_r+0x98>)
 80054b8:	429c      	cmp	r4, r3
 80054ba:	d12b      	bne.n	8005514 <__swbuf_r+0x70>
 80054bc:	686c      	ldr	r4, [r5, #4]
 80054be:	69a3      	ldr	r3, [r4, #24]
 80054c0:	60a3      	str	r3, [r4, #8]
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	071a      	lsls	r2, r3, #28
 80054c6:	d52f      	bpl.n	8005528 <__swbuf_r+0x84>
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	b36b      	cbz	r3, 8005528 <__swbuf_r+0x84>
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	b2f6      	uxtb	r6, r6
 80054d2:	1ac0      	subs	r0, r0, r3
 80054d4:	6963      	ldr	r3, [r4, #20]
 80054d6:	4637      	mov	r7, r6
 80054d8:	4283      	cmp	r3, r0
 80054da:	dc04      	bgt.n	80054e6 <__swbuf_r+0x42>
 80054dc:	4621      	mov	r1, r4
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 f938 	bl	8005754 <_fflush_r>
 80054e4:	bb30      	cbnz	r0, 8005534 <__swbuf_r+0x90>
 80054e6:	68a3      	ldr	r3, [r4, #8]
 80054e8:	3001      	adds	r0, #1
 80054ea:	3b01      	subs	r3, #1
 80054ec:	60a3      	str	r3, [r4, #8]
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	6022      	str	r2, [r4, #0]
 80054f4:	701e      	strb	r6, [r3, #0]
 80054f6:	6963      	ldr	r3, [r4, #20]
 80054f8:	4283      	cmp	r3, r0
 80054fa:	d004      	beq.n	8005506 <__swbuf_r+0x62>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	07db      	lsls	r3, r3, #31
 8005500:	d506      	bpl.n	8005510 <__swbuf_r+0x6c>
 8005502:	2e0a      	cmp	r6, #10
 8005504:	d104      	bne.n	8005510 <__swbuf_r+0x6c>
 8005506:	4621      	mov	r1, r4
 8005508:	4628      	mov	r0, r5
 800550a:	f000 f923 	bl	8005754 <_fflush_r>
 800550e:	b988      	cbnz	r0, 8005534 <__swbuf_r+0x90>
 8005510:	4638      	mov	r0, r7
 8005512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <__swbuf_r+0x9c>)
 8005516:	429c      	cmp	r4, r3
 8005518:	d101      	bne.n	800551e <__swbuf_r+0x7a>
 800551a:	68ac      	ldr	r4, [r5, #8]
 800551c:	e7cf      	b.n	80054be <__swbuf_r+0x1a>
 800551e:	4b09      	ldr	r3, [pc, #36]	; (8005544 <__swbuf_r+0xa0>)
 8005520:	429c      	cmp	r4, r3
 8005522:	bf08      	it	eq
 8005524:	68ec      	ldreq	r4, [r5, #12]
 8005526:	e7ca      	b.n	80054be <__swbuf_r+0x1a>
 8005528:	4621      	mov	r1, r4
 800552a:	4628      	mov	r0, r5
 800552c:	f000 f81a 	bl	8005564 <__swsetup_r>
 8005530:	2800      	cmp	r0, #0
 8005532:	d0cb      	beq.n	80054cc <__swbuf_r+0x28>
 8005534:	f04f 37ff 	mov.w	r7, #4294967295
 8005538:	e7ea      	b.n	8005510 <__swbuf_r+0x6c>
 800553a:	bf00      	nop
 800553c:	0800606c 	.word	0x0800606c
 8005540:	0800608c 	.word	0x0800608c
 8005544:	0800604c 	.word	0x0800604c

08005548 <__ascii_wctomb>:
 8005548:	4603      	mov	r3, r0
 800554a:	4608      	mov	r0, r1
 800554c:	b141      	cbz	r1, 8005560 <__ascii_wctomb+0x18>
 800554e:	2aff      	cmp	r2, #255	; 0xff
 8005550:	d904      	bls.n	800555c <__ascii_wctomb+0x14>
 8005552:	228a      	movs	r2, #138	; 0x8a
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	4770      	bx	lr
 800555c:	2001      	movs	r0, #1
 800555e:	700a      	strb	r2, [r1, #0]
 8005560:	4770      	bx	lr
	...

08005564 <__swsetup_r>:
 8005564:	4b32      	ldr	r3, [pc, #200]	; (8005630 <__swsetup_r+0xcc>)
 8005566:	b570      	push	{r4, r5, r6, lr}
 8005568:	681d      	ldr	r5, [r3, #0]
 800556a:	4606      	mov	r6, r0
 800556c:	460c      	mov	r4, r1
 800556e:	b125      	cbz	r5, 800557a <__swsetup_r+0x16>
 8005570:	69ab      	ldr	r3, [r5, #24]
 8005572:	b913      	cbnz	r3, 800557a <__swsetup_r+0x16>
 8005574:	4628      	mov	r0, r5
 8005576:	f000 f981 	bl	800587c <__sinit>
 800557a:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <__swsetup_r+0xd0>)
 800557c:	429c      	cmp	r4, r3
 800557e:	d10f      	bne.n	80055a0 <__swsetup_r+0x3c>
 8005580:	686c      	ldr	r4, [r5, #4]
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005588:	0719      	lsls	r1, r3, #28
 800558a:	d42c      	bmi.n	80055e6 <__swsetup_r+0x82>
 800558c:	06dd      	lsls	r5, r3, #27
 800558e:	d411      	bmi.n	80055b4 <__swsetup_r+0x50>
 8005590:	2309      	movs	r3, #9
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005598:	f04f 30ff 	mov.w	r0, #4294967295
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	e03e      	b.n	800561e <__swsetup_r+0xba>
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <__swsetup_r+0xd4>)
 80055a2:	429c      	cmp	r4, r3
 80055a4:	d101      	bne.n	80055aa <__swsetup_r+0x46>
 80055a6:	68ac      	ldr	r4, [r5, #8]
 80055a8:	e7eb      	b.n	8005582 <__swsetup_r+0x1e>
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <__swsetup_r+0xd8>)
 80055ac:	429c      	cmp	r4, r3
 80055ae:	bf08      	it	eq
 80055b0:	68ec      	ldreq	r4, [r5, #12]
 80055b2:	e7e6      	b.n	8005582 <__swsetup_r+0x1e>
 80055b4:	0758      	lsls	r0, r3, #29
 80055b6:	d512      	bpl.n	80055de <__swsetup_r+0x7a>
 80055b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ba:	b141      	cbz	r1, 80055ce <__swsetup_r+0x6a>
 80055bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c0:	4299      	cmp	r1, r3
 80055c2:	d002      	beq.n	80055ca <__swsetup_r+0x66>
 80055c4:	4630      	mov	r0, r6
 80055c6:	f7ff fb37 	bl	8004c38 <_free_r>
 80055ca:	2300      	movs	r3, #0
 80055cc:	6363      	str	r3, [r4, #52]	; 0x34
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	2300      	movs	r3, #0
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f043 0308 	orr.w	r3, r3, #8
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	b94b      	cbnz	r3, 80055fe <__swsetup_r+0x9a>
 80055ea:	89a3      	ldrh	r3, [r4, #12]
 80055ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d003      	beq.n	80055fe <__swsetup_r+0x9a>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 fa05 	bl	8005a08 <__smakebuf_r>
 80055fe:	89a0      	ldrh	r0, [r4, #12]
 8005600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005604:	f010 0301 	ands.w	r3, r0, #1
 8005608:	d00a      	beq.n	8005620 <__swsetup_r+0xbc>
 800560a:	2300      	movs	r3, #0
 800560c:	60a3      	str	r3, [r4, #8]
 800560e:	6963      	ldr	r3, [r4, #20]
 8005610:	425b      	negs	r3, r3
 8005612:	61a3      	str	r3, [r4, #24]
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	b943      	cbnz	r3, 800562a <__swsetup_r+0xc6>
 8005618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800561c:	d1ba      	bne.n	8005594 <__swsetup_r+0x30>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	0781      	lsls	r1, r0, #30
 8005622:	bf58      	it	pl
 8005624:	6963      	ldrpl	r3, [r4, #20]
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	e7f4      	b.n	8005614 <__swsetup_r+0xb0>
 800562a:	2000      	movs	r0, #0
 800562c:	e7f7      	b.n	800561e <__swsetup_r+0xba>
 800562e:	bf00      	nop
 8005630:	2000002c 	.word	0x2000002c
 8005634:	0800606c 	.word	0x0800606c
 8005638:	0800608c 	.word	0x0800608c
 800563c:	0800604c 	.word	0x0800604c

08005640 <abort>:
 8005640:	2006      	movs	r0, #6
 8005642:	b508      	push	{r3, lr}
 8005644:	f000 fa50 	bl	8005ae8 <raise>
 8005648:	2001      	movs	r0, #1
 800564a:	f7fb fcad 	bl	8000fa8 <_exit>
	...

08005650 <__sflush_r>:
 8005650:	898a      	ldrh	r2, [r1, #12]
 8005652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005654:	4605      	mov	r5, r0
 8005656:	0710      	lsls	r0, r2, #28
 8005658:	460c      	mov	r4, r1
 800565a:	d457      	bmi.n	800570c <__sflush_r+0xbc>
 800565c:	684b      	ldr	r3, [r1, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	dc04      	bgt.n	800566c <__sflush_r+0x1c>
 8005662:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	dc01      	bgt.n	800566c <__sflush_r+0x1c>
 8005668:	2000      	movs	r0, #0
 800566a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800566e:	2e00      	cmp	r6, #0
 8005670:	d0fa      	beq.n	8005668 <__sflush_r+0x18>
 8005672:	2300      	movs	r3, #0
 8005674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005678:	682f      	ldr	r7, [r5, #0]
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	d032      	beq.n	80056e4 <__sflush_r+0x94>
 800567e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	075a      	lsls	r2, r3, #29
 8005684:	d505      	bpl.n	8005692 <__sflush_r+0x42>
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	1ac0      	subs	r0, r0, r3
 800568a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800568c:	b10b      	cbz	r3, 8005692 <__sflush_r+0x42>
 800568e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005690:	1ac0      	subs	r0, r0, r3
 8005692:	2300      	movs	r3, #0
 8005694:	4602      	mov	r2, r0
 8005696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005698:	4628      	mov	r0, r5
 800569a:	6a21      	ldr	r1, [r4, #32]
 800569c:	47b0      	blx	r6
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	d106      	bne.n	80056b2 <__sflush_r+0x62>
 80056a4:	6829      	ldr	r1, [r5, #0]
 80056a6:	291d      	cmp	r1, #29
 80056a8:	d82c      	bhi.n	8005704 <__sflush_r+0xb4>
 80056aa:	4a29      	ldr	r2, [pc, #164]	; (8005750 <__sflush_r+0x100>)
 80056ac:	40ca      	lsrs	r2, r1
 80056ae:	07d6      	lsls	r6, r2, #31
 80056b0:	d528      	bpl.n	8005704 <__sflush_r+0xb4>
 80056b2:	2200      	movs	r2, #0
 80056b4:	6062      	str	r2, [r4, #4]
 80056b6:	6922      	ldr	r2, [r4, #16]
 80056b8:	04d9      	lsls	r1, r3, #19
 80056ba:	6022      	str	r2, [r4, #0]
 80056bc:	d504      	bpl.n	80056c8 <__sflush_r+0x78>
 80056be:	1c42      	adds	r2, r0, #1
 80056c0:	d101      	bne.n	80056c6 <__sflush_r+0x76>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	b903      	cbnz	r3, 80056c8 <__sflush_r+0x78>
 80056c6:	6560      	str	r0, [r4, #84]	; 0x54
 80056c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ca:	602f      	str	r7, [r5, #0]
 80056cc:	2900      	cmp	r1, #0
 80056ce:	d0cb      	beq.n	8005668 <__sflush_r+0x18>
 80056d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d4:	4299      	cmp	r1, r3
 80056d6:	d002      	beq.n	80056de <__sflush_r+0x8e>
 80056d8:	4628      	mov	r0, r5
 80056da:	f7ff faad 	bl	8004c38 <_free_r>
 80056de:	2000      	movs	r0, #0
 80056e0:	6360      	str	r0, [r4, #52]	; 0x34
 80056e2:	e7c2      	b.n	800566a <__sflush_r+0x1a>
 80056e4:	6a21      	ldr	r1, [r4, #32]
 80056e6:	2301      	movs	r3, #1
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b0      	blx	r6
 80056ec:	1c41      	adds	r1, r0, #1
 80056ee:	d1c7      	bne.n	8005680 <__sflush_r+0x30>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0c4      	beq.n	8005680 <__sflush_r+0x30>
 80056f6:	2b1d      	cmp	r3, #29
 80056f8:	d001      	beq.n	80056fe <__sflush_r+0xae>
 80056fa:	2b16      	cmp	r3, #22
 80056fc:	d101      	bne.n	8005702 <__sflush_r+0xb2>
 80056fe:	602f      	str	r7, [r5, #0]
 8005700:	e7b2      	b.n	8005668 <__sflush_r+0x18>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005708:	81a3      	strh	r3, [r4, #12]
 800570a:	e7ae      	b.n	800566a <__sflush_r+0x1a>
 800570c:	690f      	ldr	r7, [r1, #16]
 800570e:	2f00      	cmp	r7, #0
 8005710:	d0aa      	beq.n	8005668 <__sflush_r+0x18>
 8005712:	0793      	lsls	r3, r2, #30
 8005714:	bf18      	it	ne
 8005716:	2300      	movne	r3, #0
 8005718:	680e      	ldr	r6, [r1, #0]
 800571a:	bf08      	it	eq
 800571c:	694b      	ldreq	r3, [r1, #20]
 800571e:	1bf6      	subs	r6, r6, r7
 8005720:	600f      	str	r7, [r1, #0]
 8005722:	608b      	str	r3, [r1, #8]
 8005724:	2e00      	cmp	r6, #0
 8005726:	dd9f      	ble.n	8005668 <__sflush_r+0x18>
 8005728:	4633      	mov	r3, r6
 800572a:	463a      	mov	r2, r7
 800572c:	4628      	mov	r0, r5
 800572e:	6a21      	ldr	r1, [r4, #32]
 8005730:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005734:	47e0      	blx	ip
 8005736:	2800      	cmp	r0, #0
 8005738:	dc06      	bgt.n	8005748 <__sflush_r+0xf8>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	e790      	b.n	800566a <__sflush_r+0x1a>
 8005748:	4407      	add	r7, r0
 800574a:	1a36      	subs	r6, r6, r0
 800574c:	e7ea      	b.n	8005724 <__sflush_r+0xd4>
 800574e:	bf00      	nop
 8005750:	20400001 	.word	0x20400001

08005754 <_fflush_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	4605      	mov	r5, r0
 800575a:	460c      	mov	r4, r1
 800575c:	b913      	cbnz	r3, 8005764 <_fflush_r+0x10>
 800575e:	2500      	movs	r5, #0
 8005760:	4628      	mov	r0, r5
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	b118      	cbz	r0, 800576e <_fflush_r+0x1a>
 8005766:	6983      	ldr	r3, [r0, #24]
 8005768:	b90b      	cbnz	r3, 800576e <_fflush_r+0x1a>
 800576a:	f000 f887 	bl	800587c <__sinit>
 800576e:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <_fflush_r+0x6c>)
 8005770:	429c      	cmp	r4, r3
 8005772:	d11b      	bne.n	80057ac <_fflush_r+0x58>
 8005774:	686c      	ldr	r4, [r5, #4]
 8005776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ef      	beq.n	800575e <_fflush_r+0xa>
 800577e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005780:	07d0      	lsls	r0, r2, #31
 8005782:	d404      	bmi.n	800578e <_fflush_r+0x3a>
 8005784:	0599      	lsls	r1, r3, #22
 8005786:	d402      	bmi.n	800578e <_fflush_r+0x3a>
 8005788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800578a:	f000 f915 	bl	80059b8 <__retarget_lock_acquire_recursive>
 800578e:	4628      	mov	r0, r5
 8005790:	4621      	mov	r1, r4
 8005792:	f7ff ff5d 	bl	8005650 <__sflush_r>
 8005796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005798:	4605      	mov	r5, r0
 800579a:	07da      	lsls	r2, r3, #31
 800579c:	d4e0      	bmi.n	8005760 <_fflush_r+0xc>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	059b      	lsls	r3, r3, #22
 80057a2:	d4dd      	bmi.n	8005760 <_fflush_r+0xc>
 80057a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057a6:	f000 f908 	bl	80059ba <__retarget_lock_release_recursive>
 80057aa:	e7d9      	b.n	8005760 <_fflush_r+0xc>
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <_fflush_r+0x70>)
 80057ae:	429c      	cmp	r4, r3
 80057b0:	d101      	bne.n	80057b6 <_fflush_r+0x62>
 80057b2:	68ac      	ldr	r4, [r5, #8]
 80057b4:	e7df      	b.n	8005776 <_fflush_r+0x22>
 80057b6:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <_fflush_r+0x74>)
 80057b8:	429c      	cmp	r4, r3
 80057ba:	bf08      	it	eq
 80057bc:	68ec      	ldreq	r4, [r5, #12]
 80057be:	e7da      	b.n	8005776 <_fflush_r+0x22>
 80057c0:	0800606c 	.word	0x0800606c
 80057c4:	0800608c 	.word	0x0800608c
 80057c8:	0800604c 	.word	0x0800604c

080057cc <std>:
 80057cc:	2300      	movs	r3, #0
 80057ce:	b510      	push	{r4, lr}
 80057d0:	4604      	mov	r4, r0
 80057d2:	e9c0 3300 	strd	r3, r3, [r0]
 80057d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057da:	6083      	str	r3, [r0, #8]
 80057dc:	8181      	strh	r1, [r0, #12]
 80057de:	6643      	str	r3, [r0, #100]	; 0x64
 80057e0:	81c2      	strh	r2, [r0, #14]
 80057e2:	6183      	str	r3, [r0, #24]
 80057e4:	4619      	mov	r1, r3
 80057e6:	2208      	movs	r2, #8
 80057e8:	305c      	adds	r0, #92	; 0x5c
 80057ea:	f7fd fb63 	bl	8002eb4 <memset>
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <std+0x38>)
 80057f0:	6224      	str	r4, [r4, #32]
 80057f2:	6263      	str	r3, [r4, #36]	; 0x24
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <std+0x3c>)
 80057f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <std+0x40>)
 80057fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <std+0x44>)
 80057fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005800:	bd10      	pop	{r4, pc}
 8005802:	bf00      	nop
 8005804:	08005b21 	.word	0x08005b21
 8005808:	08005b43 	.word	0x08005b43
 800580c:	08005b7b 	.word	0x08005b7b
 8005810:	08005b9f 	.word	0x08005b9f

08005814 <_cleanup_r>:
 8005814:	4901      	ldr	r1, [pc, #4]	; (800581c <_cleanup_r+0x8>)
 8005816:	f000 b8af 	b.w	8005978 <_fwalk_reent>
 800581a:	bf00      	nop
 800581c:	08005755 	.word	0x08005755

08005820 <__sfmoreglue>:
 8005820:	2268      	movs	r2, #104	; 0x68
 8005822:	b570      	push	{r4, r5, r6, lr}
 8005824:	1e4d      	subs	r5, r1, #1
 8005826:	4355      	muls	r5, r2
 8005828:	460e      	mov	r6, r1
 800582a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800582e:	f7ff fa6b 	bl	8004d08 <_malloc_r>
 8005832:	4604      	mov	r4, r0
 8005834:	b140      	cbz	r0, 8005848 <__sfmoreglue+0x28>
 8005836:	2100      	movs	r1, #0
 8005838:	e9c0 1600 	strd	r1, r6, [r0]
 800583c:	300c      	adds	r0, #12
 800583e:	60a0      	str	r0, [r4, #8]
 8005840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005844:	f7fd fb36 	bl	8002eb4 <memset>
 8005848:	4620      	mov	r0, r4
 800584a:	bd70      	pop	{r4, r5, r6, pc}

0800584c <__sfp_lock_acquire>:
 800584c:	4801      	ldr	r0, [pc, #4]	; (8005854 <__sfp_lock_acquire+0x8>)
 800584e:	f000 b8b3 	b.w	80059b8 <__retarget_lock_acquire_recursive>
 8005852:	bf00      	nop
 8005854:	200002a9 	.word	0x200002a9

08005858 <__sfp_lock_release>:
 8005858:	4801      	ldr	r0, [pc, #4]	; (8005860 <__sfp_lock_release+0x8>)
 800585a:	f000 b8ae 	b.w	80059ba <__retarget_lock_release_recursive>
 800585e:	bf00      	nop
 8005860:	200002a9 	.word	0x200002a9

08005864 <__sinit_lock_acquire>:
 8005864:	4801      	ldr	r0, [pc, #4]	; (800586c <__sinit_lock_acquire+0x8>)
 8005866:	f000 b8a7 	b.w	80059b8 <__retarget_lock_acquire_recursive>
 800586a:	bf00      	nop
 800586c:	200002aa 	.word	0x200002aa

08005870 <__sinit_lock_release>:
 8005870:	4801      	ldr	r0, [pc, #4]	; (8005878 <__sinit_lock_release+0x8>)
 8005872:	f000 b8a2 	b.w	80059ba <__retarget_lock_release_recursive>
 8005876:	bf00      	nop
 8005878:	200002aa 	.word	0x200002aa

0800587c <__sinit>:
 800587c:	b510      	push	{r4, lr}
 800587e:	4604      	mov	r4, r0
 8005880:	f7ff fff0 	bl	8005864 <__sinit_lock_acquire>
 8005884:	69a3      	ldr	r3, [r4, #24]
 8005886:	b11b      	cbz	r3, 8005890 <__sinit+0x14>
 8005888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588c:	f7ff bff0 	b.w	8005870 <__sinit_lock_release>
 8005890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005894:	6523      	str	r3, [r4, #80]	; 0x50
 8005896:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <__sinit+0x68>)
 8005898:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <__sinit+0x6c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	62a2      	str	r2, [r4, #40]	; 0x28
 800589e:	42a3      	cmp	r3, r4
 80058a0:	bf08      	it	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	4620      	mov	r0, r4
 80058a6:	bf08      	it	eq
 80058a8:	61a3      	streq	r3, [r4, #24]
 80058aa:	f000 f81f 	bl	80058ec <__sfp>
 80058ae:	6060      	str	r0, [r4, #4]
 80058b0:	4620      	mov	r0, r4
 80058b2:	f000 f81b 	bl	80058ec <__sfp>
 80058b6:	60a0      	str	r0, [r4, #8]
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 f817 	bl	80058ec <__sfp>
 80058be:	2200      	movs	r2, #0
 80058c0:	2104      	movs	r1, #4
 80058c2:	60e0      	str	r0, [r4, #12]
 80058c4:	6860      	ldr	r0, [r4, #4]
 80058c6:	f7ff ff81 	bl	80057cc <std>
 80058ca:	2201      	movs	r2, #1
 80058cc:	2109      	movs	r1, #9
 80058ce:	68a0      	ldr	r0, [r4, #8]
 80058d0:	f7ff ff7c 	bl	80057cc <std>
 80058d4:	2202      	movs	r2, #2
 80058d6:	2112      	movs	r1, #18
 80058d8:	68e0      	ldr	r0, [r4, #12]
 80058da:	f7ff ff77 	bl	80057cc <std>
 80058de:	2301      	movs	r3, #1
 80058e0:	61a3      	str	r3, [r4, #24]
 80058e2:	e7d1      	b.n	8005888 <__sinit+0xc>
 80058e4:	08005cd0 	.word	0x08005cd0
 80058e8:	08005815 	.word	0x08005815

080058ec <__sfp>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	4607      	mov	r7, r0
 80058f0:	f7ff ffac 	bl	800584c <__sfp_lock_acquire>
 80058f4:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <__sfp+0x84>)
 80058f6:	681e      	ldr	r6, [r3, #0]
 80058f8:	69b3      	ldr	r3, [r6, #24]
 80058fa:	b913      	cbnz	r3, 8005902 <__sfp+0x16>
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff ffbd 	bl	800587c <__sinit>
 8005902:	3648      	adds	r6, #72	; 0x48
 8005904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005908:	3b01      	subs	r3, #1
 800590a:	d503      	bpl.n	8005914 <__sfp+0x28>
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	b30b      	cbz	r3, 8005954 <__sfp+0x68>
 8005910:	6836      	ldr	r6, [r6, #0]
 8005912:	e7f7      	b.n	8005904 <__sfp+0x18>
 8005914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005918:	b9d5      	cbnz	r5, 8005950 <__sfp+0x64>
 800591a:	4b16      	ldr	r3, [pc, #88]	; (8005974 <__sfp+0x88>)
 800591c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005920:	60e3      	str	r3, [r4, #12]
 8005922:	6665      	str	r5, [r4, #100]	; 0x64
 8005924:	f000 f847 	bl	80059b6 <__retarget_lock_init_recursive>
 8005928:	f7ff ff96 	bl	8005858 <__sfp_lock_release>
 800592c:	2208      	movs	r2, #8
 800592e:	4629      	mov	r1, r5
 8005930:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005934:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005938:	6025      	str	r5, [r4, #0]
 800593a:	61a5      	str	r5, [r4, #24]
 800593c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005940:	f7fd fab8 	bl	8002eb4 <memset>
 8005944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800594c:	4620      	mov	r0, r4
 800594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005950:	3468      	adds	r4, #104	; 0x68
 8005952:	e7d9      	b.n	8005908 <__sfp+0x1c>
 8005954:	2104      	movs	r1, #4
 8005956:	4638      	mov	r0, r7
 8005958:	f7ff ff62 	bl	8005820 <__sfmoreglue>
 800595c:	4604      	mov	r4, r0
 800595e:	6030      	str	r0, [r6, #0]
 8005960:	2800      	cmp	r0, #0
 8005962:	d1d5      	bne.n	8005910 <__sfp+0x24>
 8005964:	f7ff ff78 	bl	8005858 <__sfp_lock_release>
 8005968:	230c      	movs	r3, #12
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	e7ee      	b.n	800594c <__sfp+0x60>
 800596e:	bf00      	nop
 8005970:	08005cd0 	.word	0x08005cd0
 8005974:	ffff0001 	.word	0xffff0001

08005978 <_fwalk_reent>:
 8005978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597c:	4606      	mov	r6, r0
 800597e:	4688      	mov	r8, r1
 8005980:	2700      	movs	r7, #0
 8005982:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800598a:	f1b9 0901 	subs.w	r9, r9, #1
 800598e:	d505      	bpl.n	800599c <_fwalk_reent+0x24>
 8005990:	6824      	ldr	r4, [r4, #0]
 8005992:	2c00      	cmp	r4, #0
 8005994:	d1f7      	bne.n	8005986 <_fwalk_reent+0xe>
 8005996:	4638      	mov	r0, r7
 8005998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599c:	89ab      	ldrh	r3, [r5, #12]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d907      	bls.n	80059b2 <_fwalk_reent+0x3a>
 80059a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a6:	3301      	adds	r3, #1
 80059a8:	d003      	beq.n	80059b2 <_fwalk_reent+0x3a>
 80059aa:	4629      	mov	r1, r5
 80059ac:	4630      	mov	r0, r6
 80059ae:	47c0      	blx	r8
 80059b0:	4307      	orrs	r7, r0
 80059b2:	3568      	adds	r5, #104	; 0x68
 80059b4:	e7e9      	b.n	800598a <_fwalk_reent+0x12>

080059b6 <__retarget_lock_init_recursive>:
 80059b6:	4770      	bx	lr

080059b8 <__retarget_lock_acquire_recursive>:
 80059b8:	4770      	bx	lr

080059ba <__retarget_lock_release_recursive>:
 80059ba:	4770      	bx	lr

080059bc <__swhatbuf_r>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	460e      	mov	r6, r1
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	4614      	mov	r4, r2
 80059c6:	2900      	cmp	r1, #0
 80059c8:	461d      	mov	r5, r3
 80059ca:	b096      	sub	sp, #88	; 0x58
 80059cc:	da08      	bge.n	80059e0 <__swhatbuf_r+0x24>
 80059ce:	2200      	movs	r2, #0
 80059d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	061a      	lsls	r2, r3, #24
 80059d8:	d410      	bmi.n	80059fc <__swhatbuf_r+0x40>
 80059da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059de:	e00e      	b.n	80059fe <__swhatbuf_r+0x42>
 80059e0:	466a      	mov	r2, sp
 80059e2:	f000 f903 	bl	8005bec <_fstat_r>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	dbf1      	blt.n	80059ce <__swhatbuf_r+0x12>
 80059ea:	9a01      	ldr	r2, [sp, #4]
 80059ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059f4:	425a      	negs	r2, r3
 80059f6:	415a      	adcs	r2, r3
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	e7ee      	b.n	80059da <__swhatbuf_r+0x1e>
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	2000      	movs	r0, #0
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	b016      	add	sp, #88	; 0x58
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a08 <__smakebuf_r>:
 8005a08:	898b      	ldrh	r3, [r1, #12]
 8005a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a0c:	079d      	lsls	r5, r3, #30
 8005a0e:	4606      	mov	r6, r0
 8005a10:	460c      	mov	r4, r1
 8005a12:	d507      	bpl.n	8005a24 <__smakebuf_r+0x1c>
 8005a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	6163      	str	r3, [r4, #20]
 8005a20:	b002      	add	sp, #8
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	466a      	mov	r2, sp
 8005a26:	ab01      	add	r3, sp, #4
 8005a28:	f7ff ffc8 	bl	80059bc <__swhatbuf_r>
 8005a2c:	9900      	ldr	r1, [sp, #0]
 8005a2e:	4605      	mov	r5, r0
 8005a30:	4630      	mov	r0, r6
 8005a32:	f7ff f969 	bl	8004d08 <_malloc_r>
 8005a36:	b948      	cbnz	r0, 8005a4c <__smakebuf_r+0x44>
 8005a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a3c:	059a      	lsls	r2, r3, #22
 8005a3e:	d4ef      	bmi.n	8005a20 <__smakebuf_r+0x18>
 8005a40:	f023 0303 	bic.w	r3, r3, #3
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	e7e3      	b.n	8005a14 <__smakebuf_r+0xc>
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <__smakebuf_r+0x7c>)
 8005a4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	6020      	str	r0, [r4, #0]
 8005a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	9b00      	ldr	r3, [sp, #0]
 8005a5c:	6120      	str	r0, [r4, #16]
 8005a5e:	6163      	str	r3, [r4, #20]
 8005a60:	9b01      	ldr	r3, [sp, #4]
 8005a62:	b15b      	cbz	r3, 8005a7c <__smakebuf_r+0x74>
 8005a64:	4630      	mov	r0, r6
 8005a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a6a:	f000 f8d1 	bl	8005c10 <_isatty_r>
 8005a6e:	b128      	cbz	r0, 8005a7c <__smakebuf_r+0x74>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	89a0      	ldrh	r0, [r4, #12]
 8005a7e:	4305      	orrs	r5, r0
 8005a80:	81a5      	strh	r5, [r4, #12]
 8005a82:	e7cd      	b.n	8005a20 <__smakebuf_r+0x18>
 8005a84:	08005815 	.word	0x08005815

08005a88 <_malloc_usable_size_r>:
 8005a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8c:	1f18      	subs	r0, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bfbc      	itt	lt
 8005a92:	580b      	ldrlt	r3, [r1, r0]
 8005a94:	18c0      	addlt	r0, r0, r3
 8005a96:	4770      	bx	lr

08005a98 <_raise_r>:
 8005a98:	291f      	cmp	r1, #31
 8005a9a:	b538      	push	{r3, r4, r5, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	d904      	bls.n	8005aac <_raise_r+0x14>
 8005aa2:	2316      	movs	r3, #22
 8005aa4:	6003      	str	r3, [r0, #0]
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005aae:	b112      	cbz	r2, 8005ab6 <_raise_r+0x1e>
 8005ab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ab4:	b94b      	cbnz	r3, 8005aca <_raise_r+0x32>
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 f830 	bl	8005b1c <_getpid_r>
 8005abc:	462a      	mov	r2, r5
 8005abe:	4601      	mov	r1, r0
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ac6:	f000 b817 	b.w	8005af8 <_kill_r>
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d00a      	beq.n	8005ae4 <_raise_r+0x4c>
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	d103      	bne.n	8005ada <_raise_r+0x42>
 8005ad2:	2316      	movs	r3, #22
 8005ad4:	6003      	str	r3, [r0, #0]
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	e7e7      	b.n	8005aaa <_raise_r+0x12>
 8005ada:	2400      	movs	r4, #0
 8005adc:	4628      	mov	r0, r5
 8005ade:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ae2:	4798      	blx	r3
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e7e0      	b.n	8005aaa <_raise_r+0x12>

08005ae8 <raise>:
 8005ae8:	4b02      	ldr	r3, [pc, #8]	; (8005af4 <raise+0xc>)
 8005aea:	4601      	mov	r1, r0
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	f7ff bfd3 	b.w	8005a98 <_raise_r>
 8005af2:	bf00      	nop
 8005af4:	2000002c 	.word	0x2000002c

08005af8 <_kill_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	2300      	movs	r3, #0
 8005afc:	4d06      	ldr	r5, [pc, #24]	; (8005b18 <_kill_r+0x20>)
 8005afe:	4604      	mov	r4, r0
 8005b00:	4608      	mov	r0, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	602b      	str	r3, [r5, #0]
 8005b06:	f7fb fa3f 	bl	8000f88 <_kill>
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	d102      	bne.n	8005b14 <_kill_r+0x1c>
 8005b0e:	682b      	ldr	r3, [r5, #0]
 8005b10:	b103      	cbz	r3, 8005b14 <_kill_r+0x1c>
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	bd38      	pop	{r3, r4, r5, pc}
 8005b16:	bf00      	nop
 8005b18:	200002a4 	.word	0x200002a4

08005b1c <_getpid_r>:
 8005b1c:	f7fb ba2d 	b.w	8000f7a <_getpid>

08005b20 <__sread>:
 8005b20:	b510      	push	{r4, lr}
 8005b22:	460c      	mov	r4, r1
 8005b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b28:	f000 f894 	bl	8005c54 <_read_r>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	bfab      	itete	ge
 8005b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b32:	89a3      	ldrhlt	r3, [r4, #12]
 8005b34:	181b      	addge	r3, r3, r0
 8005b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b3a:	bfac      	ite	ge
 8005b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b3e:	81a3      	strhlt	r3, [r4, #12]
 8005b40:	bd10      	pop	{r4, pc}

08005b42 <__swrite>:
 8005b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b46:	461f      	mov	r7, r3
 8005b48:	898b      	ldrh	r3, [r1, #12]
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	05db      	lsls	r3, r3, #23
 8005b4e:	460c      	mov	r4, r1
 8005b50:	4616      	mov	r6, r2
 8005b52:	d505      	bpl.n	8005b60 <__swrite+0x1e>
 8005b54:	2302      	movs	r3, #2
 8005b56:	2200      	movs	r2, #0
 8005b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5c:	f000 f868 	bl	8005c30 <_lseek_r>
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	4632      	mov	r2, r6
 8005b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b76:	f000 b817 	b.w	8005ba8 <_write_r>

08005b7a <__sseek>:
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b82:	f000 f855 	bl	8005c30 <_lseek_r>
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	bf15      	itete	ne
 8005b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b96:	81a3      	strheq	r3, [r4, #12]
 8005b98:	bf18      	it	ne
 8005b9a:	81a3      	strhne	r3, [r4, #12]
 8005b9c:	bd10      	pop	{r4, pc}

08005b9e <__sclose>:
 8005b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba2:	f000 b813 	b.w	8005bcc <_close_r>
	...

08005ba8 <_write_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	4611      	mov	r1, r2
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4d05      	ldr	r5, [pc, #20]	; (8005bc8 <_write_r+0x20>)
 8005bb4:	602a      	str	r2, [r5, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f7fb fa1d 	bl	8000ff6 <_write>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_write_r+0x1e>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_write_r+0x1e>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	200002a4 	.word	0x200002a4

08005bcc <_close_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	2300      	movs	r3, #0
 8005bd0:	4d05      	ldr	r5, [pc, #20]	; (8005be8 <_close_r+0x1c>)
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	f7fb fa29 	bl	800102e <_close>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d102      	bne.n	8005be6 <_close_r+0x1a>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b103      	cbz	r3, 8005be6 <_close_r+0x1a>
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	200002a4 	.word	0x200002a4

08005bec <_fstat_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	2300      	movs	r3, #0
 8005bf0:	4d06      	ldr	r5, [pc, #24]	; (8005c0c <_fstat_r+0x20>)
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	f7fb fa23 	bl	8001044 <_fstat>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d102      	bne.n	8005c08 <_fstat_r+0x1c>
 8005c02:	682b      	ldr	r3, [r5, #0]
 8005c04:	b103      	cbz	r3, 8005c08 <_fstat_r+0x1c>
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200002a4 	.word	0x200002a4

08005c10 <_isatty_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	2300      	movs	r3, #0
 8005c14:	4d05      	ldr	r5, [pc, #20]	; (8005c2c <_isatty_r+0x1c>)
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fb fa21 	bl	8001062 <_isatty>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_isatty_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_isatty_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	200002a4 	.word	0x200002a4

08005c30 <_lseek_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4d05      	ldr	r5, [pc, #20]	; (8005c50 <_lseek_r+0x20>)
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fb fa19 	bl	8001076 <_lseek>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_lseek_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_lseek_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	200002a4 	.word	0x200002a4

08005c54 <_read_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4d05      	ldr	r5, [pc, #20]	; (8005c74 <_read_r+0x20>)
 8005c60:	602a      	str	r2, [r5, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f7fb f9aa 	bl	8000fbc <_read>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_read_r+0x1e>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_read_r+0x1e>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	200002a4 	.word	0x200002a4

08005c78 <_init>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr

08005c84 <_fini>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr
